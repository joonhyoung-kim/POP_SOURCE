<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.workOrder.workOrderCreate">
	<select id="get_workOrderCreate_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.*
		  FROM (SELECT A.STATE
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (A.DIVISION_CD
				                                              , A.COMPANY_CD
				                                              , 'CREATE_WORK_ORDER'
				                                              , A.STATE)
				          FROM DUAL) AS STATE_NAME
				     , A.PRODUCT_ORDER_ID
				     , A.PURCHASE_ORDER
				     , A.ITEM_ID
				     , MI.ITEM_NAME
				     , MI.SPECIFICATION
				     , A.VENDOR_CD
				     , NVL ( (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME (A.DIVISION_CD
				     												  , A.COMPANY_CD
				     												  , A.VENDOR_CD) 
				     			FROM DUAL), A.VENDOR_CD) AS CUSTOMER_NAME
				     , NVL (A.PLAN_QTY, 0) PLAN_QTY
				     , NVL (A.CONFIRM_QTY, 0) CONFIRM_QTY
				     , NVL (A.CONFIRM_QTY, 0) QTY2
				     , TO_CHAR (A.PLAN_DATE, 'YYYY-MM-DD') PLAN_DATE
				     , TO_CHAR (A.PLAN_START_TIME, 'YYYY-MM-DD') PLAN_START_TIME
				     , TO_CHAR (A.PLAN_END_TIME, 'YYYY-MM-DD') PLAN_END_TIME
				     , NVL (A.ORDER_TYPE, 'SYSTEM') AS ORDER_TYPE
				     , A.RESOURCE_CD
					 , NVL (MR.RESOURCE_NAME, A.RESOURCE_CD) AS RESOURCE_NAME
				     , A.OUT_RESOURCE_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_NAME (A.DIVISION_CD
				     											  , A.COMPANY_CD
				     											  , A.OUT_RESOURCE_CD)
				     	  FROM DUAL) AS OUT_RESOURCE_NAME
				     , A.REASON_CODE
				     , A.DESCRIPTION
				     , A.PRIORITY
				     , NVL ( (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME (A.DIVISION_CD
				     												, A.COMPANY_CD
				     												, A.UPDATE_BY) 
				     			FROM DUAL), A.UPDATE_BY) AS UPDATE_USER_NAME
				     , TO_CHAR (A.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
				     , NVL ( (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME (A.DIVISION_CD
				     												, A.COMPANY_CD
				     												, A.CREATE_BY) 
				     			FROM DUAL), A.CREATE_BY) AS CREATE_USER_NAME
				     , TO_CHAR (A.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
				     , A.PARENT_WO_ID
				     , A.PRODUCTION_START_NO
				     , A.PRODUCTION_END_NO
				     , MR.MEASURE_USER_INIT
					 , MR.LINE_INIT
				     , A.CUSTOMER_LINE_CD
				     , TO_CHAR (A.CUSTOMER_DUE_DATE, 'YYYY-MM-DD') CUSTOMER_DUE_DATE
				     , A.MODEL_SUFFIX
					 , NVL((SELECT S.WORK_PERSON_CNT
				            FROM   MOM_SHIFT_SCHEDULE S
				            WHERE  S.DIVISION_CD = A.DIVISION_CD
				            AND    S.COMPANY_CD  = A.COMPANY_CD
				            AND    S.RESOURCE_CD = A.RESOURCE_CD
				            AND    S.APPLY_DATE = TRUNC (MOM_COMMON_PKG.FN_GET_LOCAL_TIME (A.DIVISION_CD, A.COMPANY_CD))
				            AND    ROWNUM = 1), 0) AS INSERT_NUMBER
				     , A.DEMAND_ID
				     , MI.ITEM_GROUP_LARGE
				     , MI.ITEM_GROUP_MEDIUM
				     , MI.ITEM_GROUP_SMALL
				     , ROUND (  (NVL ( (SELECT R.TACT_TIME
				                          FROM MOM_BOR R
				                         WHERE R.DIVISION_CD = A.DIVISION_CD 
				                           AND R.COMPANY_CD = A.COMPANY_CD 
				                           AND R.ITEM_ID = A.ITEM_ID 
				                           AND R.RESOURCE_CD = A.RESOURCE_CD 
				                           AND ROWNUM = 1)
				                      , 1)
				                 * NVL (A.CONFIRM_QTY, 0))
				              / 60)
				          AS PLAN_LEAD_TIME
					 , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_GROUP_NAME (MR.DIVISION_CD
					 													, MR.COMPANY_CD
					 													, MR.RESOURCE_GROUP_CD) 
					 	  FROM DUAL) AS RESOURCE_GROUP_NAME
					 , DECODE(NVL(MR.OUTSOURCING_FLAG, 'N'), 'Y', 'OUT', 'IN') AS ORDER_FLAG
					 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MR.DIVISION_CD
					 										 , MR.COMPANY_CD
					 										 , 'WO_FLAG'
					 										 , DECODE(NVL(MR.OUTSOURCING_FLAG, 'N'), 'Y', 'OUT', 'IN')) 
					 	  FROM DUAL) AS ORDER_FLAG_NAME
		             , A.MARKET_CD
		             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD
		             										 , A.COMPANY_CD
		             										 , 'MARKET_CODE'
		             										 , A.MARKET_CD) 
		             	  FROM DUAL) AS MARKET_NAME
		             , A.PRODUCT_ORDER_TYPE
		             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD
		             										 , A.COMPANY_CD
		             										 , 'PRODUCT_ORDER_TYPE'
		             										 , A.PRODUCT_ORDER_TYPE) 
		             	  FROM DUAL) AS PRODUCT_ORDER_TYPE_NAME
		             , A.EQUIPMENT_CD
		             , (SELECT MOM_COMMON_PKG.FN_GET_EQUIPMENT_NAME (A.DIVISION_CD
		             												, A.COMPANY_CD
		             												, A.EQUIPMENT_CD) 
		             	  FROM DUAL) AS EQUIPMENT_NAME
		             , NVL(A.INLINE_FLAG, 'N') AS INLINE_FLAG
		             , (  SELECT  MIN(MC.ECO_NO)
	                        FROM  MOM_ECO_MASTER MC
	                             ,MOM_ECO_ITEM_MAPPING MI
	                       WHERE  MC.DIVISION_CD = MI.DIVISION_CD
	                         AND  MC.COMPANY_CD  = MI.COMPANY_CD
	                         AND  MC.ECO_NO      = MI.ECO_NO
	                         AND  MC.DIVISION_CD  = A.DIVISION_CD
	                         AND  MC.COMPANY_CD   = A.COMPANY_CD 
	                         AND  MI.ITEM_ID      =  A.ITEM_ID 
	                         AND  A.PLAN_DATE BETWEEN MC.START_DATE AND MC.END_DATE )  AS  ECO_NO
				  FROM MOM_PRODUCT_ORDER A
				     , MOM_RESOURCE MR
					 , MOM_ITEM_DEFINITION MI
				  WHERE 1 = 1
					AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
					AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
					AND A.DIVISION_CD = MI.DIVISION_CD(+)
					AND A.COMPANY_CD = MI.COMPANY_CD(+)
					AND A.ITEM_ID = MI.ITEM_ID(+)
					AND NVL(MI.USE_YN, 'Y') = 'Y'
					AND A.DIVISION_CD = MR.DIVISION_CD(+)
					AND A.COMPANY_CD = MR.COMPANY_CD(+)
					AND A.RESOURCE_CD = MR.RESOURCE_CD(+)
					<if test="dateCombo != null and dateCombo != ''">
						<choose>
							<when test="dateCombo == 'CREATE_TIME'">
								AND A.CREATE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR},'YYYY-MM-DD') 
								                  AND (TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')+ 23.9997 / 24)
							</when>
							<when test="dateCombo == 'CUSTOMER_DUE_DATE'">
								AND A.CUSTOMER_DUE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR},'YYYY-MM-DD') 
								                        AND (TO_DATE(#{toDate, jdbcType=VARCHAR},'YYYY-MM-DD')+ 23.9997 / 24)
							</when>
							<when test="dateCombo == 'SCHEDULE_START_TIME'">
								AND A.PLAN_START_TIME BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR},'YYYY-MM-DD') 
								                      AND (TO_DATE(#{toDate, jdbcType=VARCHAR},'YYYY-MM-DD')+ 23.9997 / 24)
							</when>
						</choose>
					</if>
			        <if test="searchKeyWord != null and searchKeyWord != ''"> 
						<choose>
							<when test="searchJobTerms == 'WO_PO_ID'">
								AND ( A.PRODUCT_ORDER_ID LIKE '%'|| TRIM(UPPER(#{searchKeyWord, jdbcType=VARCHAR})) || '%'
								      OR A.PURCHASE_ORDER LIKE '%'|| TRIM(UPPER(#{searchKeyWord, jdbcType=VARCHAR})) || '%')
							</when>
							<otherwise>
								AND (A.ITEM_ID LIKE '%'|| TRIM(UPPER(#{searchKeyWord, jdbcType=VARCHAR})) || '%'
								     OR UPPER(MI.ITEM_NAME) LIKE '%'|| TRIM(UPPER(#{searchKeyWord, jdbcType=VARCHAR})) || '%')
							</otherwise>
						</choose>
					</if>
					<if test="resourceName != null and resourceName != ''">
						AND A.RESOURCE_CD = #{resourceName, jdbcType=VARCHAR}
					</if>
					<if test="state != null and state != ''">
						AND A.STATE = #{state, jdbcType=VARCHAR}
					</if>
					<if test="orderType != null and orderType != ''">
						AND NVL (A.ORDER_TYPE, 'SYSTEM') = #{orderType, jdbcType=VARCHAR}
					</if>
					<if test="equipmentCd != null and equipmentCd != ''">
						AND A.EQUIPMENT_CD = #{equipmentCd, jdbcType=VARCHAR}
					</if>
					) A
		   WHERE 1 = 1
		 <if test="userName != null and userName != ''">
             AND UPPER(A.CREATE_USER_NAME) LIKE '%' || TRIM(UPPER(#{userName, jdbcType=VARCHAR})) || '%'
         </if>
         
         <if test="orderFlag != null and orderFlag != ''">
             AND A.ORDER_FLAG = #{orderFlag, jdbcType=VARCHAR}
         </if>
           ORDER BY A.RESOURCE_CD
			      , A.PLAN_START_TIME
			      , A.PRIORITY
			      , A.PRODUCT_ORDER_ID
	</select>

	<select id="get_workOrderCheckBom_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT COUNT(A.CHILD_ITEM_ID) CNT
		  FROM (SELECT * FROM MOM_BOM
			   	 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
				   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
				   AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(DIVISION_CD, COMPANY_CD) BETWEEN START_TIME AND END_TIME
				   AND USE_YN = 'Y') A
		     , MOM_ITEM_DEFINITION B
		 WHERE 1 = 1
		   AND NVL(A.RNP_FLAG, 'Y') = 'Y'
		   AND NVL(A.IS_PHANTOM, 'N') = 'N'
		   AND A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.CHILD_ITEM_ID = B.ITEM_ID
		 START WITH A.PARENT_ITEM_ID = #{itemId, jdbcType=VARCHAR}
		 CONNECT BY NOCYCLE PRIOR A.CHILD_ITEM_ID = A.PARENT_ITEM_ID
		 ORDER SIBLINGS BY A.CHILD_ITEM_ID
	</select>
	
	<insert id="create_workOrderCreate" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
      DECLARE
      		v_product_order_id  varchar2(40) := MOM_COMMON_PKG.FN_GET_WORK_ORDER_ID(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}, #{itemId, jdbcType=VARCHAR});
      BEGIN
      		#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
      		
		INSERT INTO MOM_PRODUCT_ORDER
            ( DIVISION_CD
            , COMPANY_CD
            , PRODUCT_ORDER_ID
            , ITEM_ID
            , PURCHASE_ORDER
            , ORDER_TYPE
            , STATE
            , PREV_STATE
            , PLAN_QTY
            , CONFIRM_QTY
            , VENDOR_CD
            , RESOURCE_CD
            , PLAN_DATE
            , PLAN_START_TIME
            , PLAN_END_TIME
            , PRIORITY
            , DEMAND_ID
            , BC_ITEM_ID
            , ROUTE_CD
            , OUT_RESOURCE_CD
            , MODEL_SUFFIX
            , CUSTOMER_DUE_DATE
            , CUSTOMER_LINE_CD
            , PRODUCTION_START_NO
            , PRODUCTION_END_NO
            , PARENT_WO_ID
            , ORDER_SEQ
            , MARKET_CD
            , PRODUCT_ORDER_TYPE
            , DESCRIPTION
            , REASON_CODE
            , EQUIPMENT_CD
            , INLINE_FLAG
            , CREATE_DATE
            , CREATE_BY
            , UPDATE_DATE
            , UPDATE_BY
            , TID )
        values      
            ( #{divisionCd, jdbcType=VARCHAR}
            , #{companyCd, jdbcType=VARCHAR}
            , v_product_order_id
            , TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))
            , TRIM(UPPER(#{purchaseOrder, jdbcType=VARCHAR}))
            , 'MANUAL'
            , 'S'
            , ''
            , #{planQty, jdbcType=NUMERIC}
            , #{planQty, jdbcType=NUMERIC}
            , TRIM(UPPER(#{vendorCd, jdbcType=VARCHAR}))
            , TRIM(UPPER(#{resourceCd, jdbcType=VARCHAR}))
            , NVL(TO_DATE(#{planDate, jdbcType=VARCHAR}, 'YYYY-MM-DD'), MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}))
            , TO_DATE(#{planStartTime, jdbcType=VARCHAR}, 'YYYY-MM-DD')
            , TO_DATE(NVL(#{planEndTime, jdbcType=VARCHAR}, #{planStartTime, jdbcType=VARCHAR}), 'YYYY-MM-DD')
            , #{priority, jdbcType=INTEGER}
            , ''
            , #{bcItemId, jdbcType=VARCHAR}
            , TRIM(UPPER(#{routeCd, jdbcType=VARCHAR}))
            , #{outResourceCd, jdbcType=VARCHAR}
            , #{modelSuffix, jdbcType=VARCHAR}
            , TO_DATE(#{customerDueDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
            , #{customerLineCd, jdbcType=VARCHAR}
            , #{productionStartNo, jdbcType=VARCHAR}
            , #{productionEndNo, jdbcType=VARCHAR}
            , ''
            , 0
            , #{marketCd, jdbcType=VARCHAR}
            , #{productOrderType, jdbcType=VARCHAR}
            , #{description, jdbcType=VARCHAR}
            , #{reasonCode, jdbcType=VARCHAR}
            , #{equipmentCd, jdbcType=VARCHAR}
            , #{inlineFlag, jdbcType=VARCHAR}
            , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
            , #{updateBy, jdbcType=VARCHAR}
            , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
            , #{updateBy, jdbcType=VARCHAR}
            , ''
            );
        
        INSERT INTO MOM_PRODUCT_ORDER_HIST
            ( LAST_EVENT_SEQ
            , DIVISION_CD
            , COMPANY_CD
            , PRODUCT_ORDER_ID
            , ITEM_ID
            , PURCHASE_ORDER
            , ORDER_TYPE
            , STATE
            , PREV_STATE
            , PLAN_QTY
            , CONFIRM_QTY
            , VENDOR_CD
            , RESOURCE_CD
            , PLAN_DATE
            , PLAN_START_TIME
            , PLAN_END_TIME
            , PRIORITY
            , DEMAND_ID
            , BC_ITEM_ID
            , ROUTE_CD
            , OUT_RESOURCE_CD
            , MODEL_SUFFIX
            , CUSTOMER_DUE_DATE
            , CUSTOMER_LINE_CD
            , PRODUCTION_START_NO
            , PRODUCTION_END_NO
            , PARENT_WO_ID
            , ORDER_SEQ
            , MARKET_CD
            , PRODUCT_ORDER_TYPE
            , DESCRIPTION
            , REASON_CODE
            , EQUIPMENT_CD
            , INLINE_FLAG
            , CREATE_DATE
            , CREATE_BY
            , UPDATE_DATE
            , UPDATE_BY
            , TID )
        SELECT S_ORDER_SEQ.NEXTVAL 
             , DIVISION_CD
             , COMPANY_CD
             , PRODUCT_ORDER_ID
             , ITEM_ID
             , PURCHASE_ORDER
             , ORDER_TYPE
             , STATE
             , PREV_STATE
             , PLAN_QTY
             , CONFIRM_QTY
             , VENDOR_CD
             , RESOURCE_CD
             , PLAN_DATE
             , PLAN_START_TIME
             , PLAN_END_TIME
             , PRIORITY
             , DEMAND_ID
             , BC_ITEM_ID
             , ROUTE_CD
             , OUT_RESOURCE_CD
             , MODEL_SUFFIX
             , CUSTOMER_DUE_DATE
             , CUSTOMER_LINE_CD
             , PRODUCTION_START_NO
             , PRODUCTION_END_NO
             , PARENT_WO_ID
             , ORDER_SEQ
             , MARKET_CD
             , PRODUCT_ORDER_TYPE
             , DESCRIPTION
             , REASON_CODE
             , EQUIPMENT_CD
             , INLINE_FLAG
             , CREATE_DATE
             , CREATE_BY
             , UPDATE_DATE
             , UPDATE_BY
             , TID
          FROM MOM_PRODUCT_ORDER
         WHERE PRODUCT_ORDER_ID = v_product_order_id
           AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
         ;
         
        SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_PRODUCT_ORDER
		WHERE 
			    PRODUCT_ORDER_ID = v_product_order_id
			AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
            AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		;
        END
    }
	</insert>
	
	<update id="modify_workOrderCreate" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
      DECLARE
      BEGIN
      	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
      	
		UPDATE MOM_PRODUCT_ORDER
		   SET RESOURCE_CD = TRIM(UPPER(#{resourceCd, jdbcType=VARCHAR}))
		     , PURCHASE_ORDER = TRIM(UPPER(#{purchaseOrder, jdbcType=VARCHAR}))
		     , PLAN_QTY = #{planQty, jdbcType=NUMERIC}
		     , CONFIRM_QTY = #{planQty, jdbcType=NUMERIC}
		     , MODEL_SUFFIX =  #{modelSuffix, jdbcType=VARCHAR}
		     , PLAN_DATE = TO_DATE(SUBSTR(#{planDate, jdbcType=VARCHAR},0,10), 'YYYY-MM-DD')
		     , PLAN_START_TIME = TO_DATE(SUBSTR(#{planStartTime, jdbcType=VARCHAR},0,10), 'YYYY-MM-DD')
		     , PLAN_END_TIME = TO_DATE(SUBSTR(#{planEndTime, jdbcType=VARCHAR},0,10), 'YYYY-MM-DD')
		     , PRIORITY = #{priority, jdbcType=INTEGER}
		     , OUT_RESOURCE_CD = #{outResourceCd, jdbcType=VARCHAR}
		     , BC_ITEM_ID = #{bcItemId, jdbcType=VARCHAR}
             , VENDOR_CD = TRIM(UPPER(#{vendorCd, jdbcType=VARCHAR}))
             , ROUTE_CD = TRIM(UPPER(#{routeCd, jdbcType=VARCHAR}))
             , CUSTOMER_DUE_DATE = TO_DATE(SUBSTR(#{customerDueDate, jdbcType=VARCHAR},0,10), 'YYYY-MM-DD')
             , CUSTOMER_LINE_CD = #{customerLineCd, jdbcType=VARCHAR}
             , PRODUCTION_START_NO = #{productionStartNo, jdbcType=VARCHAR}
             , PRODUCTION_END_NO = #{productionEndNo, jdbcType=VARCHAR}
             , MARKET_CD = #{marketCd, jdbcType=VARCHAR}
		     , DESCRIPTION = #{description, jdbcType=VARCHAR}
		     , REASON_CODE = #{reasonCode, jdbcType=VARCHAR}
		     , EQUIPMENT_CD = #{equipmentCd, jdbcType=VARCHAR}
		     , INLINE_FLAG = #{inlineFlag, jdbcType=VARCHAR}
		     , UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
		     , UPDATE_BY = #{updateBy, jdbcType=VARCHAR}
		 WHERE PRODUCT_ORDER_ID = TRIM(UPPER(#{productOrderId, jdbcType=VARCHAR}))
		   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		;
		
		INSERT INTO MOM_PRODUCT_ORDER_HIST
            ( LAST_EVENT_SEQ
            , DIVISION_CD
            , COMPANY_CD
            , PRODUCT_ORDER_ID
            , ITEM_ID
            , PURCHASE_ORDER
            , ORDER_TYPE
            , STATE
            , PREV_STATE
            , PLAN_QTY
            , CONFIRM_QTY
            , VENDOR_CD
            , RESOURCE_CD
            , PLAN_DATE
            , PLAN_START_TIME
            , PLAN_END_TIME
            , PRIORITY
            , DEMAND_ID
            , BC_ITEM_ID
            , ROUTE_CD
            , OUT_RESOURCE_CD
            , MODEL_SUFFIX
            , CUSTOMER_DUE_DATE
            , CUSTOMER_LINE_CD
            , PRODUCTION_START_NO
            , PRODUCTION_END_NO
            , PARENT_WO_ID
            , ORDER_SEQ
            , MARKET_CD
            , PRODUCT_ORDER_TYPE
            , DESCRIPTION
            , REASON_CODE
            , EQUIPMENT_CD
            , INLINE_FLAG
            , CREATE_DATE
            , CREATE_BY
            , UPDATE_DATE
            , UPDATE_BY
            , TID )
        SELECT S_ORDER_SEQ.NEXTVAL 
             , DIVISION_CD
             , COMPANY_CD
             , PRODUCT_ORDER_ID
             , ITEM_ID
             , PURCHASE_ORDER
             , ORDER_TYPE
             , STATE
             , PREV_STATE
             , PLAN_QTY
             , CONFIRM_QTY
             , VENDOR_CD
             , RESOURCE_CD
             , PLAN_DATE
             , PLAN_START_TIME
             , PLAN_END_TIME
             , PRIORITY
             , DEMAND_ID
             , BC_ITEM_ID
             , ROUTE_CD
             , OUT_RESOURCE_CD
             , MODEL_SUFFIX
             , CUSTOMER_DUE_DATE
             , CUSTOMER_LINE_CD
             , PRODUCTION_START_NO
             , PRODUCTION_END_NO
             , PARENT_WO_ID
             , ORDER_SEQ
             , MARKET_CD
             , PRODUCT_ORDER_TYPE
             , DESCRIPTION
             , REASON_CODE
             , EQUIPMENT_CD
             , INLINE_FLAG
             , CREATE_DATE
             , CREATE_BY
             , UPDATE_DATE
             , UPDATE_BY
             , TID
          FROM MOM_PRODUCT_ORDER
         WHERE PRODUCT_ORDER_ID = TRIM(UPPER(#{productOrderId, jdbcType=VARCHAR}))
           AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
         ;
         
        SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_PRODUCT_ORDER
		WHERE 
				PRODUCT_ORDER_ID = #{productOrderId, jdbcType=VARCHAR}
            AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		;
        END
    }
	</update>
	
	<delete id="remove_workOrderCreate" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
      DECLARE
      BEGIN
      	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
      	
        INSERT INTO MOM_PRODUCT_ORDER_HIST
            ( LAST_EVENT_SEQ
            , DIVISION_CD
            , COMPANY_CD
            , PRODUCT_ORDER_ID
            , ITEM_ID
            , PURCHASE_ORDER
            , ORDER_TYPE
            , STATE
            , PREV_STATE
            , PLAN_QTY
            , CONFIRM_QTY
            , VENDOR_CD
            , RESOURCE_CD
            , PLAN_DATE
            , PLAN_START_TIME
            , PLAN_END_TIME
            , PRIORITY
            , DEMAND_ID
            , BC_ITEM_ID
            , ROUTE_CD
            , OUT_RESOURCE_CD
            , MODEL_SUFFIX
            , CUSTOMER_DUE_DATE
            , CUSTOMER_LINE_CD
            , PRODUCTION_START_NO
            , PRODUCTION_END_NO
            , PARENT_WO_ID
            , ORDER_SEQ
            , MARKET_CD
            , PRODUCT_ORDER_TYPE
            , DESCRIPTION
            , REASON_CODE
            , EQUIPMENT_CD
            , INLINE_FLAG
            , CREATE_DATE
            , CREATE_BY
            , UPDATE_DATE
            , UPDATE_BY
            , TID )
        SELECT S_ORDER_SEQ.NEXTVAL 
             , DIVISION_CD
             , COMPANY_CD
             , PRODUCT_ORDER_ID
             , ITEM_ID
             , PURCHASE_ORDER
             , ORDER_TYPE
             , STATE
             , PREV_STATE
             , PLAN_QTY
             , CONFIRM_QTY
             , VENDOR_CD
             , RESOURCE_CD
             , PLAN_DATE
             , PLAN_START_TIME
             , PLAN_END_TIME
             , PRIORITY
             , DEMAND_ID
             , BC_ITEM_ID
             , ROUTE_CD
             , OUT_RESOURCE_CD
             , MODEL_SUFFIX
             , CUSTOMER_DUE_DATE
             , CUSTOMER_LINE_CD
             , PRODUCTION_START_NO
             , PRODUCTION_END_NO
             , PARENT_WO_ID
             , ORDER_SEQ
             , MARKET_CD
             , PRODUCT_ORDER_TYPE
             , 'Delete Data'
             , REASON_CODE
             , EQUIPMENT_CD
             , INLINE_FLAG
             , CREATE_DATE
             , CREATE_BY
             , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
             , #{updateBy, jdbcType=VARCHAR}
             , TID
          FROM MOM_PRODUCT_ORDER
         WHERE PRODUCT_ORDER_ID = #{productOrderId, jdbcType=VARCHAR}
           AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
         ;
		
		DELETE FROM MOM_PRODUCT_ORDER
		 WHERE PRODUCT_ORDER_ID = #{productOrderId, jdbcType=VARCHAR}
		   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		;
		
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_PRODUCT_ORDER
		WHERE 
			   PRODUCT_ORDER_ID = #{productOrderId, jdbcType=VARCHAR}
		   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		;
		END
    }		
	</delete>
	
	<delete id="remove_confirmWorkOrderTemp" parameterType="java.util.HashMap">
		DELETE FROM MOM_PRODUCT_ORDER_TMP
 		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
   		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	</delete>
	
	<insert id="create_confirmWorkOrderTemp" parameterType="java.util.HashMap">
		INSERT INTO MOM_PRODUCT_ORDER_TMP
			( DIVISION_CD          
			, COMPANY_CD           
			, PRODUCT_ORDER_ID     
			, ITEM_ID              
			, PURCHASE_ORDER       
			, ORDER_TYPE           
			, STATE                
			, PLAN_QTY             
			, CONFIRM_QTY          
			, RESOURCE_CD          
			, PLAN_DATE            
			, PLAN_START_TIME      
			, PLAN_END_TIME        
			, PRIORITY             
			, DEMAND_ID            
			, BC_ITEM_ID           
			, ROUTE_CD             
			, OUT_RESOURCE_CD      
			, CUSTOMER_DUE_DATE    
			, CUSTOMER_LINE_CD     
			, PRODUCTION_START_NO  
			, PRODUCTION_END_NO    
			, PARENT_WO_ID         
			, ORDER_SEQ            
			, DESCRIPTION          
			, REASON_CODE          
			, CREATE_DATE          
			, CREATE_BY            
			, MARKET_CD 
			, PRODUCT_ORDER_TYPE
			, EQUIPMENT_CD  
			, INLINE_FLAG
			)
		SELECT DIVISION_CD
		     , COMPANY_CD
		     , PRODUCT_ORDER_ID
		     , ITEM_ID
		     , PURCHASE_ORDER
		     , ORDER_TYPE
		     , STATE
		     , PLAN_QTY
		     , NVL(#{confirmQty, jdbcType=INTEGER}, CONFIRM_QTY) CONFIRM_QTY
		     , RESOURCE_CD
		     , PLAN_DATE
		     , PLAN_START_TIME
		     , PLAN_END_TIME
		     , NVL(#{priority, jdbcType=INTEGER}, PRIORITY) PRIORITY
		     , DEMAND_ID
		     , BC_ITEM_ID
		     , ROUTE_CD
		     , OUT_RESOURCE_CD
		     , CUSTOMER_DUE_DATE
		     , CUSTOMER_LINE_CD
		     , PRODUCTION_START_NO
		     , PRODUCTION_END_NO
		     , PARENT_WO_ID
		     , ORDER_SEQ
		     , DESCRIPTION
		     , REASON_CODE
		     , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
		     , #{updateBy, jdbcType=VARCHAR}
             , MARKET_CD
             , PRODUCT_ORDER_TYPE
             , EQUIPMENT_CD
             , INLINE_FLAG
		  FROM MOM_PRODUCT_ORDER
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND PRODUCT_ORDER_ID = #{productOrderId, jdbcType=VARCHAR}
	</insert>
	
	<update id="modify_confirmWorkOrderTemp" parameterType="java.util.HashMap">
	UPDATE MOM_PRODUCT_ORDER_TMP
	SET 
		DESCRIPTION = DESCRIPTION
	WHERE 
		    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND PRODUCT_ORDER_ID = #{productOrderId, jdbcType=VARCHAR}
		
	</update>
	
	<select id="get_confirmWorkOrderTemp_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT * 
		  FROM MOM_PRODUCT_ORDER_TMP
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	</select>

	<insert id="create_confirmWorkOrderProc" statementType="CALLABLE">
		{
	        CALL SP_MOM_WORK_ORDER_PKG.P_CREATE_WORK_ORDER (
	             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
	           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
	           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
	           , #{companyCd, mode=IN, jdbcType=VARCHAR}
	           , #{createBy, mode=IN, jdbcType=VARCHAR}
	        )
	    }
	</insert>
	
	<select id="get_ezMesConfirmWorkOrder" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
    		  W.WORK_ORDER_ID AS WOID
		    , W.WORK_ORDER_ID AS WONAME
		    , W.ITEM_ID AS PRODID
		    , 1 AS BOMREV
		    , W.PLAN_QTY AS PLANQTY
		    , I.UNIT AS UNIT
		    , W.PLAN_START_TIME AS PLANSTDTTM
		    , W.PLAN_END_TIME AS PLANEDDTTM
		    , R.RESOURCE_GROUP_CD AS AREAID
		    , W.RESOURCE_CD AS PCSGID
		    , NULL AS EQSGID
		    , NULL AS CUSTOMERID
		    , W.DEMAND_ID AS CUSTPRODID
		    , 'GENERAL' AS WOTYPE
		    , W.PRIORITY AS PRIORITY
		    , 'N' AS DELFLAG
		    , S.CUSTOMER_PO_ID AS ATTRIBUTE2
		    , 'N' AS IFFLAG
  		FROM 
  			MOM_WORK_ORDER W
  			LEFT JOIN MOM_SALES_ORDER S
            ON 
            W.DIVISION_CD = S.DIVISION_CD AND W.COMPANY_CD = S.COMPANY_CD AND W.PRODUCT_ORDER_ID = S.CUSTOMER_PO_ID AND W.ITEM_ID = S.ITEM_ID AND S.CUSTOMER_PO_TYPE = 'SO'
            LEFT JOIN MOM_RESOURCE R
            ON 
            W.DIVISION_CD = R.DIVISION_CD AND W.COMPANY_CD = R.COMPANY_CD AND W.RESOURCE_CD = R.RESOURCE_CD
    		, MOM_ITEM_DEFINITION I
 		WHERE 
 			W.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   	AND W.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   	AND W.WORK_ORDER_ID = #{workOrderId, jdbcType=VARCHAR}
		   	AND W.ITEM_ID = I.ITEM_ID
	</select>
	
	<select id="get_ezMesConfirmWorkOrderList_list" resultType="camelMap" parameterType="java.util.HashMap">
        SELECT W.PRODUCT_ORDER_ID AS WOID
	         , W.PRODUCT_ORDER_ID AS WONAME
	         , W.ITEM_ID AS PRODID
	         , 1 AS BOMREV
	         , W.PLAN_QTY AS PLANQTY
	         , I.UNIT AS UNIT
	         , W.PLAN_START_TIME AS PLANSTDTTM
	         , W.PLAN_END_TIME AS PLANEDDTTM
	         , R.RESOURCE_GROUP_CD AS AREAID
	         , W.RESOURCE_CD AS PCSGID
	         , NULL AS EQSGID
	         , NULL AS CUSTOMERID
	         , W.DEMAND_ID AS CUSTPRODID
	         , 'GENERAL' AS WOTYPE
	         , W.PRIORITY AS PRIORITY
	         , 'N' AS DELFLAG
	         , S.CUSTOMER_PO_ID AS ATTRIBUTE2
	         , 'N' AS IFFLAG
	         , W.DIVISION_CD
	         , W.COMPANY_CD
          FROM MOM_PRODUCT_ORDER_TMP W
             , MOM_SALES_ORDER S
             , MOM_RESOURCE R
             , MOM_ITEM_DEFINITION I
         WHERE W.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND W.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND W.DIVISION_CD = S.DIVISION_CD (+)
           AND W.COMPANY_CD = S.COMPANY_CD (+)
           AND W.PURCHASE_ORDER = S.CUSTOMER_PO_ID (+)
           AND W.ITEM_ID = S.ITEM_ID (+)
           AND S.CUSTOMER_PO_TYPE(+) = 'SO'
           AND W.DIVISION_CD = R.DIVISION_CD 
           AND W.COMPANY_CD = R.COMPANY_CD 
           AND W.RESOURCE_CD = R.RESOURCE_CD
           AND W.DIVISION_CD = I.DIVISION_CD 
           AND W.COMPANY_CD = I.COMPANY_CD 
           AND W.ITEM_ID = I.ITEM_ID
         ORDER BY W.PRODUCT_ORDER_ID
    </select>
	
	<select id="get_equipment_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT EQUIPMENT_CD AS CODE
		     , EQUIPMENT_NAME AS NAME
		  FROM MOM_EQUIPMENT
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NVL(USE_YN, 'N') = 'Y'
		 ORDER BY NAME
	</select>
</mapper>