<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.itemInfo.equipmentBom">
	<select id="get_equipmentBom_list" resultType="camelMap" parameterType="java.util.HashMap">
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		WITH TEMP1 AS (	
	    </if>
			SELECT A.EQUIPMENT_CD
				 , A.EQUIPMENT_CD AS EQUIPMENT_CD2
			     , (SELECT MOM_COMMON_PKG.FN_GET_EQUIPMENT_NAME( A.DIVISION_CD 
														       , A.COMPANY_CD 
														       , A.EQUIPMENT_CD)
			          FROM DUAL) AS EQUIPMENT_NAME
			     , A.ITEM_ID
			     , A.ITEM_ID AS ITEM_ID2
			     , A.ITEM_NAME
			     , A.BOM_SEQ
			     , A.QTY
			     , A.USE_YN
			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD 
		     											  , A.COMPANY_CD 
		     											  , 'USE_FLAG' 
		     											  , A.USE_YN)
			          FROM DUAL) AS USE_YN_NAME
			     , A.DESCRIPTION
			     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			     , A.CREATE_BY
			     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD 
			     										  , A.COMPANY_CD 
			     										  , A.CREATE_BY)
			          FROM DUAL) AS CREATE_BY_NAME
			     , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			     , A.UPDATE_BY
			     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD 
			     										  , A.COMPANY_CD 
			     										  , A.UPDATE_BY)
			          FROM DUAL) AS UPDATE_BY_NAME
			  FROM (SELECT MEB.DIVISION_CD
			             , MEB.COMPANY_CD
			             , MEB.EQUIPMENT_CD
			             , MEB.ITEM_ID
			             , (SELECT MOM_COMMON_PKG.FN_GET_ITEM_NAME( MEB.DIVISION_CD 
			             									      , MEB.COMPANY_CD 
			             									      , MEB.ITEM_ID)
			                  FROM DUAL) AS ITEM_NAME
			             , MEB.QTY
			             , MEB.BOM_SEQ
			             , MEB.USE_YN
			             , MEB.DESCRIPTION
			             , MEB.CREATE_DATE
			             , MEB.CREATE_BY
			             , MEB.UPDATE_DATE
			             , MEB.UPDATE_BY
			          FROM MOM_EQUIPMENT_BOM MEB
			         WHERE MEB.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND MEB.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			           <if test="equipmentCd != null and equipmentCd != ''">
			           AND MEB.EQUIPMENT_CD = #{equipmentCd, jdbcType=VARCHAR}
			           </if>
			           <if test="useYn != null and useYn != ''">
			           AND MEB.USE_YN = #{useYn, jdbcType=VARCHAR}
			           </if>
			            ) A
			 WHERE 1 = 1
			  <if test="itemId != null and itemId != ''">
			   AND (A.ITEM_ID LIKE '%' || TRIM(#{itemId, jdbcType=VARCHAR}) || '%'
			            OR A.ITEM_NAME LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%') 
              </if>
			 <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
			  )
		      SELECT A.*
		           , B.ROW_COUNT
		        FROM (SELECT A.*
		                   , ROWNUM GRIDROW
		                FROM TEMP1 A) A
		           , (SELECT COUNT(*) ROW_COUNT
		                FROM TEMP1) B 
		       WHERE GRIDROW BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
	         </if>
	</select>

	<insert id="create_equipmentBom" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_EQUIPMENT_BOM (
			DIVISION_CD,
			COMPANY_CD,
			EQUIPMENT_CD,
			ITEM_ID,
			BOM_SEQ,
			QTY,
			USE_YN,
			DESCRIPTION,
			CREATE_BY,
			CREATE_DATE,
			UPDATE_BY,
			UPDATE_DATE,
			TID
		)
		VALUES(
			#{divisionCd, jdbcType=VARCHAR},
			#{companyCd, jdbcType=VARCHAR},
			#{equipmentCd, jdbcType=VARCHAR},
			#{itemId, jdbcType=VARCHAR},
			#{bomSeq, jdbcType=INTEGER},
			#{qty, jdbcType=INTEGER},
			NVL(TRIM(UPPER(#{useYn, jdbcType=VARCHAR})), 'Y'),
			#{description, jdbcType=VARCHAR},
			#{userId, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{userId, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{tid, jdbcType=VARCHAR}
		);
		
		INSERT INTO MOM_EQUIPMENT_BOM_HIST (
			   LAST_EVENT_SEQ,
			   DIVISION_CD,
			   COMPANY_CD,
			   EQUIPMENT_CD,
			   ITEM_ID,
			   BOM_SEQ,
			   QTY,
			   USE_YN,
			   DESCRIPTION,
			   CREATE_BY,
			   CREATE_DATE,
			   UPDATE_BY,
			   UPDATE_DATE,
			   TID
		)
		SELECT S_ORDER_SEQ.NEXTVAL,
			   DIVISION_CD,
			   COMPANY_CD,
			   EQUIPMENT_CD,
			   ITEM_ID,
			   BOM_SEQ,
			   QTY,
			   USE_YN,
			   DESCRIPTION,
			   CREATE_BY,
			   CREATE_DATE,
			   UPDATE_BY,
			   UPDATE_DATE,
			   TID
		  FROM MOM_EQUIPMENT_BOM
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND EQUIPMENT_CD = UPPER(TRIM(#{equipmentCd, jdbcType=VARCHAR}))
		   AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(EQUIPMENT_CD) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_EQUIPMENT_BOM
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND    EQUIPMENT_CD = UPPER(TRIM(#{equipmentCd, jdbcType=VARCHAR}))
		AND    ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
		
		END
		}
	</insert>

	<update id="modify_equipmentBom" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		UPDATE MOM_EQUIPMENT_BOM
		   SET QTY = #{qty, jdbcType=INTEGER},
		       BOM_SEQ = #{bomSeq, jdbcType=INTEGER},
			   DESCRIPTION = #{description, jdbcType=VARCHAR},
			   USE_YN = NVL(TRIM(UPPER(#{useYn, jdbcType=VARCHAR})), 'Y'),
			   UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   UPDATE_BY = #{updateBy, jdbcType=VARCHAR}
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND EQUIPMENT_CD = UPPER(TRIM(#{equipmentCd, jdbcType=VARCHAR}))
		   AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
			
		;
		INSERT INTO MOM_EQUIPMENT_BOM_HIST (
					LAST_EVENT_SEQ,
				    DIVISION_CD,
				    COMPANY_CD,
				    EQUIPMENT_CD,
				    ITEM_ID,
				    BOM_SEQ,
				    QTY,
				    USE_YN,
				    DESCRIPTION,
				    CREATE_BY,
				    CREATE_DATE,
				    UPDATE_BY,
				    UPDATE_DATE,
				    TID
				  )
			 SELECT S_ORDER_SEQ.NEXTVAL,
				    DIVISION_CD,
				    COMPANY_CD,
				    EQUIPMENT_CD,
				    ITEM_ID,
				    BOM_SEQ,
				    QTY,
				    USE_YN,
				    DESCRIPTION,
				    CREATE_BY,
				    CREATE_DATE,
				    UPDATE_BY,
				    UPDATE_DATE,
				    TID
			   FROM MOM_EQUIPMENT_BOM
			  WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			    AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			    AND EQUIPMENT_CD = UPPER(TRIM(#{equipmentCd, jdbcType=VARCHAR}))
		   	 	AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
	
 		SELECT
			CASE 
				WHEN COUNT(EQUIPMENT_CD) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM  MOM_EQUIPMENT_BOM
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	      AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	      AND EQUIPMENT_CD = UPPER(TRIM(#{equipmentCd, jdbcType=VARCHAR}))
		  AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
	END
	}
	</update>
	
	<delete id="remove_equipmentBom" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
		  INSERT INTO MOM_EQUIPMENT_BOM_HIST
				( LAST_EVENT_SEQ,
			      DIVISION_CD,
			      COMPANY_CD,
			      EQUIPMENT_CD,
			      ITEM_ID,
			      BOM_SEQ,
			      QTY,
			      USE_YN,
			      DESCRIPTION,
			      CREATE_DATE,       
			      CREATE_BY,  
			      UPDATE_DATE, 
			      UPDATE_BY,
			      TID
				)
		SELECT S_ORDER_SEQ.NEXTVAL,
	     	   DIVISION_CD,
			   COMPANY_CD,
			   EQUIPMENT_CD,
			   ITEM_ID,
			   BOM_SEQ,
			   QTY,
			   USE_YN,              
			   'Delete Data',      
			   CREATE_DATE,       
			   CREATE_BY,           
			   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),         
			   #{userId, jdbcType=VARCHAR},           
			   TID  
		  FROM MOM_EQUIPMENT_BOM 
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
           AND EQUIPMENT_CD = UPPER(TRIM(#{equipmentCd, jdbcType=VARCHAR}))
		   AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
	     ;
            
		DELETE 
		FROM   MOM_EQUIPMENT_BOM
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND  COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND EQUIPMENT_CD = UPPER(TRIM(#{equipmentCd, jdbcType=VARCHAR}))
		  AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(EQUIPMENT_CD) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_EQUIPMENT_BOM
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND EQUIPMENT_CD = UPPER(TRIM(#{equipmentCd, jdbcType=VARCHAR}))
		    AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
	  END
	}
	</delete>
	
	<select id="get_equipment_list" resultType="camelMap" parameterType="java.util.HashMap">
	    SELECT A.EQUIPMENT_CD AS CODE
		     , A.EQUIPMENT_CD || '(' || A.EQUIPMENT_NAME || ')' AS NAME
		  FROM MOM_EQUIPMENT A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NVL(A.USE_YN, 'Y') = 'Y'
	</select>
</mapper>
