<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.itemInfo.bor">
	<select id="get_bor_list" resultType="camelMap" parameterType="java.util.HashMap">
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		WITH TEMP1 AS (	
	    </if>
		SELECT A.DIVISION_CD
	         , A.COMPANY_CD
	         , A.ITEM_ID
	         , A.ITEM_ID AS ITEM_ID2
	         , C.ITEM_NAME
	         , A.ROUTE_CD
	         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
	                                                  , A.COMPANY_CD 
	                                                  , 'ROUTE_CODE'
	                                                  , A.ROUTE_CD)
		          FROM DUAL) AS ROUTE_NAME
	         , A.RESOURCE_CD
	         , A.RESOURCE_CD AS RESOURCE_CD2
	         , B.RESOURCE_NAME
	         , A.TACT_TIME
	         , A.EARLY_PRODUCING_TERM
	         , A.EARLY_PRODUCING_TERM_UOM
	         , A.PROD_LOT_SIZE
	         , A.ALT_PRIORITY
	         , A.TAT
	         , A.YIELD
	         , A.CYCLE_TIME
	         , A.USE_YN
	         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD  
		                                              , 'USE_FLAG'
		                                              , A.USE_YN)
		          FROM DUAL) AS USE_YN_NAME
	         , A.DESCRIPTION
	         , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
	         , A.CREATE_BY
	         , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
	                                                  , A.COMPANY_CD  
	                                                  , A.CREATE_BY)
	              FROM DUAL) AS CREATE_USER_NAME          
	         , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE          
	         , A.UPDATE_BY
	         , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
	                                                  , A.COMPANY_CD  
	                                                  , A.UPDATE_BY)
	              FROM DUAL) AS UPDATE_USER_NAME
	         , C.SPECIFICATION
	         , C.ITEM_TYPE
	         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( C.DIVISION_CD
                                                      , C.COMPANY_CD  
                                                      , 'ITEM_TYPE'
                                                      , C.ITEM_TYPE)
                  FROM DUAL) AS ITEM_TYPE_NAME
             , A.NORMAL_IN_PERSON_CNT
             , A.NORMAL_DR_PERSON_CNT
	     FROM   MOM_BOR A
	          , MOM_RESOURCE B
	          , MOM_ITEM_DEFINITION C
	     WHERE 1 = 1
	       AND   A.DIVISION_CD = B.DIVISION_CD(+)
	       AND   A.COMPANY_CD  = B.COMPANY_CD(+)
	       AND   A.RESOURCE_CD = B.RESOURCE_CD(+)
	       AND   A.DIVISION_CD = C.DIVISION_CD(+)
	       AND   A.COMPANY_CD  = C.COMPANY_CD(+)
	       AND   A.ITEM_ID    =  C.ITEM_ID(+)
	       AND   A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND   A.COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
	      <if test="itemName != null and itemName != ''">
	       AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%' 
	           OR UPPER(C.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%')
	      </if>
	      <if test="copyItemId != null and copyItemId != ''">
           AND A.ITEM_ID != #{copyItemId, jdbcType=VARCHAR} 
          </if>
	      <if test="routeName != null and routeName != ''">
	       AND A.ROUTE_CD = #{routeName, jdbcType=VARCHAR} 
	      </if>
	      <if test="resourceName != null and resourceName != ''">
	       AND A.RESOURCE_CD LIKE '%' || TRIM(UPPER(#{resourceName, jdbcType=VARCHAR})) || '%' 
	      </if>
	      <if test="resourceCd != null and resourceCd != ''">
	       AND A.RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
	      </if>
	      <if test="searchUseYn != null and searchUseYn != ''">
	       AND A.USE_YN = #{searchUseYn, jdbcType=VARCHAR} 
	      </if>
	   ORDER BY A.RESOURCE_CD, A.ITEM_ID
	   <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
				)
	      SELECT A.*
	           , B.ROW_COUNT
	      FROM (SELECT A.*
	                 , ROWNUM GRIDROW
	              FROM TEMP1 A) A
	         , (SELECT COUNT(*) ROW_COUNT
	              FROM TEMP1) B 
	      WHERE GRIDROW BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
       </if>
	</select>
	
	<select id="get_borHist_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.ITEM_ID
	         , C.ITEM_NAME
             , C.SPECIFICATION
	         , A.ROUTE_CD
	         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
	                                                  , A.COMPANY_CD
	                                                  , 'ROUTE_CODE'
	                                                  , A.ROUTE_CD) 
	         	  FROM DUAL) AS ROUTE_NAME
	         , A.RESOURCE_CD
	         , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_NAME( A.DIVISION_CD
                                                          , A.COMPANY_CD
                                                          , A.RESOURCE_CD) 
	              FROM DUAL) AS RESOURCE_NAME
	         , TO_CHAR (A.TACT_TIME) TACT_TIME
	         , A.EARLY_PRODUCING_TERM
	         , A.PROD_LOT_SIZE
	         , A.ALT_PRIORITY
	         , A.USE_YN
	         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
	                                                  , A.COMPANY_CD
	                                                  , 'USE_FLAG'
	                                                  , A.USE_YN) 
	         	  FROM DUAL) AS USE_YN_NAME
	         , A.TAT
	         , A.YIELD
	         , A.CYCLE_TIME
	         , A.DESCRIPTION
	         , A.UPDATE_BY
	         , TO_CHAR (A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') UPDATE_DATE
	      FROM MOM_BOR_HIST A
		     , MOM_ITEM_DEFINITION C
	     WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND A.DIVISION_CD = C.DIVISION_CD(+)
           AND A.COMPANY_CD = C.COMPANY_CD(+)           
           AND A.ITEM_ID = C.ITEM_ID(+)
           AND A.ITEM_ID = #{itemId, jdbcType=VARCHAR}
           AND A.ROUTE_CD = #{routeCd, jdbcType=VARCHAR}
           AND A.RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		ORDER BY A.UPDATE_DATE DESC
	</select>
	
	<select id="get_bor" resultType="camelMap" parameterType="java.util.HashMap">
	    SELECT *
	      FROM   MOM_BOR
	     WHERE   DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND   COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
	       AND 	 ITEM_ID = #{itemId, jdbcType=VARCHAR}
	       AND 	 ROUTE_CD = #{routeCd, jdbcType=VARCHAR}
	       AND 	 RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
	</select>
	
	<insert id="create_bor" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
		INSERT INTO MOM_BOR(
			DIVISION_CD,
			COMPANY_CD,
			ITEM_ID,
			ROUTE_CD,
			RESOURCE_CD,
			TACT_TIME,
			EARLY_PRODUCING_TERM,
			EARLY_PRODUCING_TERM_UOM,
			PROD_LOT_SIZE,
			ALT_PRIORITY,
			TAT,
			YIELD,
			CYCLE_TIME,
			USE_YN,
			DESCRIPTION,
			CREATE_DATE,
			CREATE_BY,
			UPDATE_DATE,
			UPDATE_BY,
			TID,
			NORMAL_IN_PERSON_CNT,
            NORMAL_DR_PERSON_CNT
			)
			VALUES(
			#{divisionCd, jdbcType=VARCHAR},
			#{companyCd, jdbcType=VARCHAR},
			UPPER(TRIM(#{itemId, jdbcType=VARCHAR})),
			UPPER(TRIM(#{routeCd, jdbcType=VARCHAR})),
			UPPER(TRIM(#{resourceCd, jdbcType=VARCHAR})),
			#{tactTime, jdbcType=INTEGER},
			#{earlyProducingTerm, jdbcType=INTEGER},
			'DAY',
			#{prodLotSize, jdbcType=INTEGER},
			#{altPriority, jdbcType=INTEGER},
			#{tat, jdbcType=INTEGER},
			#{yield, jdbcType=INTEGER},
			#{cycleTime, jdbcType=INTEGER},
			NVL(TRIM(UPPER(#{useYn, jdbcType=VARCHAR})),'Y'),
			#{description, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{createBy, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{updateBy, jdbcType=VARCHAR},
			#{tid, jdbcType=VARCHAR},
			#{normalInPersonCnt, jdbcType=INTEGER},
			#{normalDrPersonCnt, jdbcType=INTEGER}
		)
	   ;
	   
		INSERT INTO MOM_BOR_HIST (
			LAST_EVENT_SEQ,
			DIVISION_CD,
			COMPANY_CD,
			ITEM_ID,
			ROUTE_CD,
			RESOURCE_CD,
			TACT_TIME,
			EARLY_PRODUCING_TERM,
			EARLY_PRODUCING_TERM_UOM,
			PROD_LOT_SIZE,
			ALT_PRIORITY,
			TAT,
			YIELD,
			CYCLE_TIME,
			USE_YN,
			DESCRIPTION,
			CREATE_DATE,
			CREATE_BY,
			UPDATE_DATE,
			UPDATE_BY,
			TID,
			NORMAL_IN_PERSON_CNT,
			NORMAL_DR_PERSON_CNT
		)
		SELECT S_ORDER_SEQ.NEXTVAL,
			   DIVISION_CD,
			   COMPANY_CD,
			   ITEM_ID,
			   ROUTE_CD,
			   RESOURCE_CD,
			   TACT_TIME,
			   EARLY_PRODUCING_TERM,
			   EARLY_PRODUCING_TERM_UOM,
			   PROD_LOT_SIZE,
			   ALT_PRIORITY,
			   TAT,
			   YIELD,
			   CYCLE_TIME,
			   USE_YN,
			   DESCRIPTION,
			   CREATE_DATE,
			   CREATE_BY,
			   UPDATE_DATE,
			   UPDATE_BY,
			   TID,
			   NORMAL_IN_PERSON_CNT,
			   NORMAL_DR_PERSON_CNT
		 FROM MOM_BOR
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		  AND ROUTE_CD = UPPER(TRIM(#{routeCd, jdbcType=VARCHAR}))
		  AND RESOURCE_CD = UPPER(TRIM(#{resourceCd, jdbcType=VARCHAR}))
	  ;
	 		
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_BOR
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		    AND ROUTE_CD = UPPER(TRIM(#{routeCd, jdbcType=VARCHAR}))
		    AND RESOURCE_CD = UPPER(TRIM(#{resourceCd, jdbcType=VARCHAR}))
		;
	 END
	}	  
	</insert>	
	
	<update id="modify_bor" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
		UPDATE MOM_BOR
		   SET ALT_PRIORITY = #{altPriority, jdbcType=INTEGER},
		       EARLY_PRODUCING_TERM = #{earlyProducingTerm, jdbcType=INTEGER},
		       PROD_LOT_SIZE =  #{prodLotSize, jdbcType=INTEGER},
		       TACT_TIME = #{tactTime, jdbcType=INTEGER},
		       TAT = #{tat, jdbcType=INTEGER},
		       YIELD =  #{yield, jdbcType=INTEGER},
		       USE_YN = NVL(TRIM(UPPER(#{useYn, jdbcType=VARCHAR})), 'Y'),
		       UPDATE_DATE =  MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
		       UPDATE_BY =  #{updateBy, jdbcType=VARCHAR},
		       CYCLE_TIME = #{cycleTime, jdbcType=INTEGER},
		       DESCRIPTION =  #{description, jdbcType=VARCHAR},
		       NORMAL_IN_PERSON_CNT = #{normalInPersonCnt, jdbcType=INTEGER},
		       NORMAL_DR_PERSON_CNT = #{normalDrPersonCnt, jdbcType=INTEGER}
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		   AND ROUTE_CD = UPPER(TRIM(#{routeCd, jdbcType=VARCHAR}))
		   AND RESOURCE_CD = UPPER(TRIM(#{resourceCd, jdbcType=VARCHAR}))
	   ;
	  
	  INSERT INTO MOM_BOR_HIST (
			LAST_EVENT_SEQ,
			DIVISION_CD,
			COMPANY_CD,
			ITEM_ID,
			ROUTE_CD,
			RESOURCE_CD,
			TACT_TIME,
			EARLY_PRODUCING_TERM,
			EARLY_PRODUCING_TERM_UOM,
			PROD_LOT_SIZE,
			ALT_PRIORITY,
			TAT,
			YIELD,
			CYCLE_TIME,
			USE_YN,
			DESCRIPTION,
			CREATE_DATE,
			CREATE_BY,
			UPDATE_DATE,
			UPDATE_BY,
			TID,
			NORMAL_IN_PERSON_CNT,
			NORMAL_DR_PERSON_CNT
		)
		SELECT S_ORDER_SEQ.NEXTVAL,
			   DIVISION_CD,
			   COMPANY_CD,
			   ITEM_ID,
			   ROUTE_CD,
			   RESOURCE_CD,
			   TACT_TIME,
			   EARLY_PRODUCING_TERM,
			   EARLY_PRODUCING_TERM_UOM,
			   PROD_LOT_SIZE,
			   ALT_PRIORITY,
			   TAT,
			   YIELD,
			   CYCLE_TIME,
			   USE_YN,
			   DESCRIPTION,
			   CREATE_DATE,
			   CREATE_BY,
			   UPDATE_DATE,
			   UPDATE_BY,
			   TID,
			   NORMAL_IN_PERSON_CNT,
			   NORMAL_DR_PERSON_CNT
		 FROM MOM_BOR
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		  AND ROUTE_CD = UPPER(TRIM(#{routeCd, jdbcType=VARCHAR}))
		  AND RESOURCE_CD = UPPER(TRIM(#{resourceCd, jdbcType=VARCHAR}))
	  ;
	  	
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_BOR
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		    AND ROUTE_CD = UPPER(TRIM(#{routeCd, jdbcType=VARCHAR}))
		    AND RESOURCE_CD = UPPER(TRIM(#{resourceCd, jdbcType=VARCHAR}))
		;
	 END
	}	
	</update>
	
	<delete id="remove_bor" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
	  INSERT INTO MOM_BOR_HIST (
			LAST_EVENT_SEQ,
			DIVISION_CD,
			COMPANY_CD,
			ITEM_ID,
			ROUTE_CD,
			RESOURCE_CD,
			TACT_TIME,
			EARLY_PRODUCING_TERM,
			EARLY_PRODUCING_TERM_UOM,
			PROD_LOT_SIZE,
			ALT_PRIORITY,
			TAT,
			YIELD,
			CYCLE_TIME,
			USE_YN,
			DESCRIPTION,
			CREATE_DATE,
			CREATE_BY,
			UPDATE_DATE,
			UPDATE_BY,
			TID,
			NORMAL_IN_PERSON_CNT,
			NORMAL_DR_PERSON_CNT
		)
		SELECT S_ORDER_SEQ.NEXTVAL,
			   DIVISION_CD,
			   COMPANY_CD,
			   ITEM_ID,
			   ROUTE_CD,
			   RESOURCE_CD,
			   TACT_TIME,
			   EARLY_PRODUCING_TERM,
			   EARLY_PRODUCING_TERM_UOM,
			   PROD_LOT_SIZE,
			   ALT_PRIORITY,
			   TAT,
			   YIELD,
			   CYCLE_TIME,
			   USE_YN,
			   'Delete Data',
			   CREATE_DATE,
			   CREATE_BY,
			   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   #{userId, jdbcType=VARCHAR},
			   TID,
			   NORMAL_IN_PERSON_CNT,
			   NORMAL_DR_PERSON_CNT
		  FROM MOM_BOR
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		   AND ITEM_ID = UPPER(#{itemId, jdbcType=VARCHAR})
		   AND ROUTE_CD = UPPER(#{routeCd, jdbcType=VARCHAR})
		   AND RESOURCE_CD = UPPER(#{resourceCd, jdbcType=VARCHAR})
	  ;
	   
		DELETE FROM MOM_BOR
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} 
	   	   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND ITEM_ID = UPPER(#{itemId, jdbcType=VARCHAR})
		   AND ROUTE_CD = UPPER(#{routeCd, jdbcType=VARCHAR})
		   AND RESOURCE_CD = UPPER(#{resourceCd, jdbcType=VARCHAR})
	  ;
	  	
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_BOR
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND ITEM_ID = UPPER(#{itemId, jdbcType=VARCHAR})
		    AND ROUTE_CD = UPPER(#{routeCd, jdbcType=VARCHAR})
		    AND RESOURCE_CD = UPPER(#{resourceCd, jdbcType=VARCHAR})
		;
	 END
	}
	</delete>
	
	<select id="get_route_list" resultType="camelMap" parameterType="java.util.HashMap">
<!-- 		SELECT * FROM(SELECT DISTINCT ROUTE_CD AS ID, ROUTE_CD AS TEXT, ROUTE_CD AS CODE, ROUTE_CD AS NAME -->
<!-- 	  	  FROM MOM_BOR WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}) -->
<!-- 	 	 GROUP BY ID -->
	 	 
		SELECT DISTINCT ROUTE_CD AS ID
				      , ROUTE_CD AS TEXT
				      , ROUTE_CD AS CODE
				      , ROUTE_CD AS NAME
		  FROM MOM_BOR
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		 ORDER BY ID
	</select>
	
	<!-- 
    * 20191030 / gyp / 사용안하는 sql로 주석처리 후 삭제예정
     -->
<!-- 	<select id="get_item_list" resultType="camelMap" parameterType="java.util.HashMap"> -->
<!-- 		SELECT * -->
<!-- 		  FROM (SELECT MAX(ID) AS ID -->
<!-- 		             , MAX(TEXT) AS TEXT -->
<!-- 		          FROM (SELECT distinct ITEM_ID AS ID -->
<!-- 		                              , ITEM_ID||'('||ITEM_NAME||')' AS TEXT -->
<!-- 		                              , DIVISION_CD -->
<!-- 		                  FROM MOM_ITEM_DEFINITION -->
<!-- 		                 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} -->
<!-- 		                 AND UPPER(ITEM_ID) LIKE '%' || UPPER(#{key, jdbcType=VARCHAR}) || '%' -->
<!-- 		                 AND NVL(USE_YN, 'Y') = 'Y') -->
<!-- 		          GROUP BY ID -->
<!-- 		          ORDER BY ID ) -->
<!-- 	</select> -->
	
	<!-- 
    * 20191030 / gyp / 사용안하는 sql로 주석처리 후 삭제예정
     -->
<!-- 	<select id="get_resource_list" resultType="camelMap" parameterType="java.util.HashMap"> -->
<!-- 		SELECT RESOURCE_CD AS ID, RESOURCE_CD || '(' || RESOURCE_NAME || ')'  AS TEXT -->
<!-- 	  	  FROM MOM_RESOURCE -->
<!-- 	 	 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} -->
<!-- 	 	   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR} -->
<!-- 	   	   AND NVL(USE_YN, 'Y') = 'Y' -->
<!-- 	 	 ORDER BY ID -->
<!-- 	</select> -->
	
	<select id="get_priorityCheck_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT ALT_PRIORITY 
		FROM   MOM_BOR
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND	   ITEM_ID = #{itemId, jdbcType=VARCHAR}
		AND    ROUTE_CD = #{routeCd, jdbcType=VARCHAR}
		AND    RESOURCE_CD != #{resourceCd, jdbcType=VARCHAR}
		AND    USE_YN = 'Y'
	</select>
</mapper>
