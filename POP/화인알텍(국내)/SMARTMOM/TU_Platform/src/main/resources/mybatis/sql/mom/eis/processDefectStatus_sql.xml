<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.eis.processDefectStatus">
	<select id="get_processDefectStatus_list" resultType="camelMap" parameterType="java.util.HashMap">
<!-- 		<choose> -->
<!-- 			<when test="resourceCd != null and resourceCd !=''"> -->
<!-- 			SELECT REASON_CD -->
<!-- 			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(#{divisionCd, jdbcType=VARCHAR} -->
<!-- 			     										 , #{companyCd, jdbcType=VARCHAR} -->
<!-- 			     										 , 'WO_BAD_TYPE',REASON_CD)  -->
<!-- 			     	  FROM DUAL) AS REASON_NAME -->
<!-- 			     , RESOURCE_CD -->
<!-- 			     , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_NAME(#{divisionCd, jdbcType=VARCHAR} -->
<!-- 			     											 , #{companyCd, jdbcType=VARCHAR} -->
<!-- 			     											 , RESOURCE_CD)  -->
<!-- 			     	  FROM DUAL) AS RESOURCE_NAME -->
<!-- 			     ${pivot} -->
<!-- 			     , SEQ -->
<!-- 			  FROM (SELECT REASON_CD  -->
<!-- 			             , RESOURCE_CD -->
<!-- 			             , SUM(BAD_RATE1) AS BAD_RATE1 -->
<!-- 			             , SUM(BAD_RATE2) AS BAD_RATE2 -->
<!-- 			             , DENSE_RANK() OVER(ORDER BY RESOURCE_CD, SUM(BAD_RATE2) DESC, REASON_CD) AS SEQ -->
<!-- 			          FROM (SELECT A.REASON_CD -->
<!-- 			                     , A.RESOURCE_CD -->
<!-- 			                     , DECODE(B.W_SEQ, 1, BAD_RATE, 0) AS BAD_RATE1 -->
<!-- 			                     , DECODE(B.W_SEQ, 2, BAD_RATE, 0) AS BAD_RATE2  -->
<!-- 			                     , B.WEEKSTART_DATE -->
<!-- 			                  FROM MOM_EIS_PRODUCE_BAD_STATUS A -->
<!-- 			                  	 , MOM_RESOURCE R -->
<!-- 			                     , (SELECT WEEKSTART_DATE -->
<!-- 			                             , DENSE_RANK() OVER(ORDER BY WEEKSTART_DATE) AS W_SEQ -->
<!-- 			                             , MAX(WEEKEND_DATE) AS WEEKEND_DATE -->
<!-- 			                          FROM TH_MST_TIME -->
<!-- 			                         WHERE WEEKSTART_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'yyyymmdd') - 13  -->
<!-- 			                                                  AND TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'yyyymmdd') -->
<!-- 			                         GROUP BY WEEKSTART_DATE -->
<!-- 			                      ) B -->
<!-- 			                 WHERE A.DIVISION_CD = R.DIVISION_CD -->
<!-- 	                           AND A.COMPANY_CD  = R.COMPANY_CD -->
<!-- 	                           AND A.RESOURCE_CD = R.RESOURCE_CD  -->
<!--                           	   AND TO_DATE(A.YYYYMMDD, 'yyyymmdd') BETWEEN B.WEEKSTART_DATE AND B.WEEKEND_DATE -->
<!-- 			                   AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} -->
<!-- 			                   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR} -->
<!-- 			                  <if test="resourceGroupCd != null and resourceGroupCd != ''"> -->
<!-- 		                       AND R.RESOURCE_GROUP_CD = #{resourceGroupCd, jdbcType=VARCHAR} -->
<!-- 		                      </if> -->
<!-- 		                      <if test="placeCd != null and placeCd != ''"> -->
<!-- 		                       AND NVL(R.PLACE_CD, 'ETC') = #{placeCd, jdbcType=VARCHAR} -->
<!-- 		                      </if> -->
<!-- 			                )  -->
<!-- 			         WHERE 1=1 -->
<!-- 			           AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR} -->
<!-- 			         GROUP BY REASON_CD, RESOURCE_CD -->
<!-- 			       ) -->
<!-- 			 WHERE SEQ <![CDATA[<=]]> 5  -->
<!-- 			 ORDER BY SEQ -->
<!-- 			</when> -->
<!-- 			<otherwise> -->
			SELECT REASON_CD
			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(#{divisionCd, jdbcType=VARCHAR}
			     										 , #{companyCd, jdbcType=VARCHAR}
			     										 , 'WO_BAD_TYPE'
			     										 , REASON_CD) 
			     	  FROM DUAL) AS REASON_NAME
			     ${pivot}
			     , SEQ
			  FROM (SELECT Z.REASON_CD 
			             , TRUNC(SUM(Z.DEFECT_QTY1)/DECODE(SUM(Z.RESULT_QTY1), 0, NULL, SUM(Z.RESULT_QTY1)) * 100, 1) AS BAD_RATE1
		                 , TRUNC(SUM(Z.DEFECT_QTY2)/DECODE(SUM(Z.RESULT_QTY2), 0, NULL, SUM(Z.RESULT_QTY2)) * 100, 1) AS BAD_RATE2
		                 , DENSE_RANK () OVER (ORDER BY TRUNC(SUM(Z.DEFECT_QTY2)/DECODE(SUM(Z.RESULT_QTY2), 0, NULL, SUM(Z.RESULT_QTY2)) * 100, 1) DESC NULLS LAST, REASON_CD) AS SEQ
			          FROM (SELECT A.REASON_CD
			                     , DECODE (B.W_SEQ, 1, DEFECT_QTY, 0) AS DEFECT_QTY1
		                         , DECODE (B.W_SEQ, 2, DEFECT_QTY, 0) AS DEFECT_QTY2
		                         , DECODE (B.W_SEQ, 1, RESULT_QTY, 0) AS RESULT_QTY1
		                         , DECODE (B.W_SEQ, 2, RESULT_QTY, 0) AS RESULT_QTY2
			                     , B.WEEKSTART_DATE
			                  FROM MOM_EIS_PRODUCE_BAD_STATUS A
			                  	 , MOM_RESOURCE R
			                     , (SELECT WEEKSTART_DATE
			                             , DENSE_RANK() OVER(ORDER BY WEEKSTART_DATE) AS W_SEQ
			                             , MAX(WEEKEND_DATE) AS WEEKEND_DATE
			                          FROM TH_MST_TIME
			                         WHERE WEEKSTART_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'yyyymmdd') - 13 
			                                                  AND TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'yyyymmdd')
			                         GROUP BY WEEKSTART_DATE
			                      ) B
			                 WHERE A.DIVISION_CD = R.DIVISION_CD
	                           AND A.COMPANY_CD  = R.COMPANY_CD
	                           AND A.RESOURCE_CD = R.RESOURCE_CD 
	                           AND TO_DATE(A.YYYYMMDD, 'yyyymmdd') BETWEEN B.WEEKSTART_DATE AND B.WEEKEND_DATE
			                   AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			                   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			                  <if test="resourceGroupCd != null and resourceGroupCd != ''">
		                       AND R.RESOURCE_GROUP_CD = #{resourceGroupCd, jdbcType=VARCHAR}
		                      </if>
		                      <if test="placeCd != null and placeCd != ''">
		                       AND NVL(R.PLACE_CD, 'ETC') = #{placeCd, jdbcType=VARCHAR}
		                      </if>
			                ) Z
			         WHERE 1=1
			         GROUP BY REASON_CD
			       )
			 WHERE SEQ <![CDATA[<=]]> 5 
			 ORDER BY SEQ
<!-- 			</otherwise> -->
<!-- 		</choose> -->
	</select>
	
</mapper>