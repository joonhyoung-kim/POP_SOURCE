<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.equipment.emMaterialReleaseStatus">
	<select id="get_emMaterialReleaseStatus_list" resultType="camelMap" parameterType="java.util.HashMap">
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		WITH TEMP1 AS (	
	    </if>
		SELECT EI.EQM_WO_ID        
		     , EW.EQM_WO_NAME       
		     , MIS.REQUEST_OUTPUT_ID       
		     , MIS.FROM_INOUT_ID            
		     , MIS.TO_INOUT_ID             
		     , EI.ITEM_ID          
		     , MI.ITEM_NAME        
		     , MI.SPECIFICATION    
		     , MI.UNIT             
		     , TO_CHAR(EI.REQUEST_DATE, 'yyyy-mm-dd') AS REQUEST_DATE  
		     , NVL(MIS.TO_LOCATION_CD, EI.IN_LOCATION_CD) as TO_LOCATION_CD       
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (MIS.DIVISION_CD
		                                                  , MIS.COMPANY_CD
		                                                  , NVL(MIS.TO_LOCATION_CD, EI.IN_LOCATION_CD))
		          FROM DUAL) AS TO_LOCATION_NAME    
		     , NVL(MIS.FROM_LOCATION_CD, EI.OUT_LOCATION_CD) as FROM_LOCATION_CD     
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (MIS.DIVISION_CD
		                                                  , MIS.COMPANY_CD
		                                                  , NVL(MIS.FROM_LOCATION_CD, EI.OUT_LOCATION_CD))
		          FROM DUAL) AS FROM_LOCATION_NAME   
		     , EI.REQUEST_QTY                     
		     , MIS.ISSUE_QTY                       
		     , MIS.CANCEL_QTY                      
		     , TO_CHAR(MIS.IO_TIME, 'yyyy-mm-dd') AS IO_TIME 
		     , MIS.CANCEL_DATE                    
		     , MIS.CONVERSION_UNIT_QTY            
		     , MI.CONVERSION_UNIT   
		     , EI.REQUEST_TYPE     
		     , EI.REQUEST_STATE    
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (EI.DIVISION_CD
		                                              , EI.COMPANY_CD
		                                              , 'EQM_REQ_STATE'
		                                              , EI.REQUEST_STATE)
		          FROM DUAL) AS REQUEST_STATE_NAME 
		     , MIS.DESCRIPTION     
		     , MIS.CANCEL_DESC     
		     , NVL(MIS.UPDATE_BY, EI.UPDATE_BY) AS UPDATE_BY    
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME (MIS.DIVISION_CD
		                                              , MIS.COMPANY_CD
		                                              , NVL(MIS.UPDATE_BY, EI.UPDATE_BY))
		          FROM DUAL) AS UPDATE_BY_NAME     
		     , TO_CHAR(NVL(MIS.UPDATE_DATE, EI.UPDATE_DATE), 'yyyy-mm-dd') AS UPDATE_DATE    
		  FROM MOM_EQM_ISSUE_REQUEST EI
		     , MOM_EQM_WORK_ORDER EW
		     , (SELECT A.WORK_ORDER_ID
		             , A.ITEM_ORDER_ID
		             , A.ITEM_ID
		             , A.PREV_LOCATION_CD AS FROM_LOCATION_CD
		             , A.LOCATION_CD AS TO_LOCATION_CD
		             , A.QTY AS ISSUE_QTY
		             , (AC.QTY * -1) AS CANCEL_QTY
		             , TO_CHAR (AC.IO_TIME, 'YYYY-MM-DD') AS CANCEL_DATE
		             , A.DESCRIPTION
		             , AC.DESCRIPTION AS CANCEL_DESC
		             , A.IO_TIME
		             , A.CONVERSION_UNIT_QTY
		             , A.ITEM_INPUT_ID AS REQUEST_OUTPUT_ID
		             , A.PREV_STOCK_INOUT_ID AS FROM_INOUT_ID
		             , A.ITEM_STOCK_INOUT_ID AS TO_INOUT_ID
		             , NVL(AC.UPDATE_BY, A.UPDATE_BY) AS UPDATE_BY
		             , NVL(AC.UPDATE_DATE, A.UPDATE_DATE) AS UPDATE_DATE
		             , A.DIVISION_CD
		             , A.COMPANY_CD
		          FROM MOM_ITEM_STOCK_INOUT A
		             , MOM_ITEM_STOCK_INOUT AC
		         WHERE A.IO_TYPE = 'I' 
		           AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} 
		           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		           AND A.DIVISION_CD = AC.DIVISION_CD(+)
		           AND A.COMPANY_CD = AC.COMPANY_CD(+)
		           AND A.ITEM_STOCK_INOUT_ID = AC.PREV_STOCK_INOUT_ID(+)
		           AND A.IO_TYPE = AC.IO_TYPE(+)
		           AND A.IO_CATEGORY IN (SELECT CODE_ID 
		                                   FROM MOM_CODE 
		                                  WHERE DIVISION_CD = A.DIVISION_CD 
		                                    AND COMPANY_CD = A.COMPANY_CD 
		                                    AND CODE_CLASS_ID = 'IO_CATEGORY' 
		                                    AND ATTRIBUTE24 = 'Y'
		                                    AND CODE_VALUES IS NULL
		                                    AND USE_YN = 'Y')
		            <if test="dateCombo == 'STATE_TIME'">
		           AND A.IO_TIME BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR},'yyyy-mm-dd') AND TO_DATE(#{toDate, jdbcType=VARCHAR},'yyyy-mm-dd') + 23.9997/24
		           </if>
		       ) MIS
		     , MOM_ITEM_DEFINITION MI
		 WHERE EI.DIVISION_CD =  #{divisionCd, jdbcType=VARCHAR} 
		   AND EI.COMPANY_CD =  #{companyCd, jdbcType=VARCHAR} 
		   AND EI.DIVISION_CD = EW.DIVISION_CD
		   AND EI.COMPANY_CD = EW.COMPANY_CD
		   AND EI.EQM_WO_ID = EW.EQM_WO_ID
		   AND EI.ISSUE_REQUEST_ID = MIS.ITEM_ORDER_ID(+)
		   AND EI.EQM_WO_ID = MIS.WORK_ORDER_ID(+)
		   AND EI.ITEM_ID = MIS.ITEM_ID(+)
		   AND EI.DIVISION_CD = MI.DIVISION_CD
		   AND EI.COMPANY_CD = MI.COMPANY_CD
		   AND EI.ITEM_ID = MI.ITEM_ID
		   <if test="dateCombo == 'REQUEST_TIME'">
		   AND EI.REQUEST_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR},'yyyy-mm-dd') AND TO_DATE(#{toDate, jdbcType=VARCHAR},'yyyy-mm-dd') + 23.9997/24
		   </if>
		   <if test="fromLocation != null and fromLocation != ''">
		   AND NVL(MIS.FROM_LOCATION_CD, EI.OUT_LOCATION_CD) = #{fromLocation, jdbcType=VARCHAR}
		   </if>
		   <if test="toLocation != null and toLocation != ''">
		   AND NVL(MIS.TO_LOCATION_CD, EI.IN_LOCATION_CD) = #{toLocation, jdbcType=VARCHAR}
		   </if>
		   <if test="item != null and item != ''">
		   AND (EI.ITEM_ID LIKE '%' || TRIM(UPPER(#{item, jdbcType=VARCHAR})) || '%'
		    OR (MI.ITEM_NAME LIKE '%' || TRIM(UPPER(#{item, jdbcType=VARCHAR})) || '%'))
		   </if>
		   <if test="specification != null and specification != ''">
		   AND UPPER(MI.SPECIFICATION) LIKE  '%' || TRIM(UPPER(#{specification, jdbcType=VARCHAR})) || '%'
		   </if>
		   <if test="woId != null and woId != ''">
		   AND UPPER(EI.EQM_WO_ID) LIKE  '%' || TRIM(UPPER(#{woId, jdbcType=VARCHAR})) || '%'
		   </if>
		    <if test="equipment != null and equipment != ''">
		   AND EW.EQUIPMENT_CD = #{equipment, jdbcType=VARCHAR}
		   </if>
		 ORDER BY EI.EQM_WO_ID, EI.ISSUE_REQUEST_ID
	   <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
				)
	      SELECT A.*
	           , B.ROW_COUNT
	      FROM (SELECT A.*
	                 , ROWNUM GRIDROW
	              FROM TEMP1 A) A
	         , (SELECT COUNT(*) ROW_COUNT
	              FROM TEMP1) B 
	      WHERE GRIDROW BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
       </if>
    </select>
    
    <insert id="create_cancelEmReleaseProc" statementType="CALLABLE">
		{
	        CALL SP_MOM_EQUIPMENT_PKG.P_CANCLE_EQM_ISSUE (
	             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
	           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
	           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
	           , #{companyCd, mode=IN, jdbcType=VARCHAR}
	           , #{menuId, mode=IN, jdbcType=VARCHAR}
	           , #{tableId, mode=IN, jdbcType=VARCHAR}
	           , #{createBy, mode=IN, jdbcType=VARCHAR}
	        )
	    }
	</insert>
	
	<select id="get_emReleasePrintStatus_list" resultType="camelMap" parameterType="java.util.HashMap">
		WITH TEMP1 AS (
			SELECT TO_CHAR(MI.IO_TIME, 'YYYY-MM-DD') AS 출고일자
			     , TO_CHAR(MI.IO_TIME, 'YYYY-MM-DD') AS 출고일자하단
			     , MI.ITEM_INPUT_ID AS 출고번호
			     , MI.UPDATE_BY  AS USER_ID
			     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(MI.DIVISION_CD, MI.COMPANY_CD, MI.LOCATION_CD) FROM DUAL) AS 거래선 
			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.DIVISION_CD, MI.COMPANY_CD, 'DEPT_CD', TU.DEPT_CD) 
			        FROM   TU_USER TU
			        WHERE  TU.DIVISION_CD = MI.DIVISION_CD
			        AND    TU.COMPANY_CD = MI.COMPANY_CD
			        AND    TU.EMP_NO     = MI.UPDATE_BY )  AS 소속
			     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MI.DIVISION_CD, MI.COMPANY_CD, MI.UPDATE_BY) FROM DUAL) AS 성명
			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (MI.DIVISION_CD, MI.COMPANY_CD, 'IO_CATEGORY', MI.IO_CATEGORY) FROM DUAL) AS 출고구분
			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.DIVISION_CD, MI.COMPANY_CD, 'ITEM_TYPE', MD.ITEM_TYPE) FROM DUAL) AS 종류
			     , '*' || MI.ITEM_INPUT_ID || '*' AS 바코드
			     , MI.ITEM_ID || '/' || MD.ITEM_NAME AS PLIST_ITEM
			     , TO_CHAR(MI.QTY)    AS PLIST_QTY
			     , ''                 AS PLIST_UNIT_PRICE
			     , ''                 AS PLIST_DESCRIPTION
			     , (SELECT MV.VENDOR_NAME
                      FROM MOM_VENDOR MV
                     WHERE MV.DIVISION_CD = MI.DIVISION_CD
                       AND MV.COMPANY_CD = MI.COMPANY_CD
                       AND MV.VENDOR_CD = MI.DIVISION_CD) AS COMPANY_NAME
			     , MI.DIVISION_CD
                 , MI.COMPANY_CD
                 , MI.ITEM_STOCK_INOUT_ID
                 , MI.ITEM_INPUT_ID
                 , MI.IO_TIME
                 , MI.WORK_ORDER_ID
                 , MI.ITEM_ID
			FROM   MOM_ITEM_STOCK_INOUT MI
			     , MOM_ITEM_DEFINITION MD
			WHERE  MI.DIVISION_CD = MD.DIVISION_CD
			AND    MI.COMPANY_CD  = MD.COMPANY_CD
			AND    MI.ITEM_ID     = MD.ITEM_ID
			AND    MI.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND    MI.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
			AND    MI.ITEM_INPUT_ID IN (${requestOutputIds})
			AND    MI.IO_TYPE = 'I'
	        AND EXISTS
	              (SELECT '*'
	                 FROM MOM_CODE MC
	                WHERE MC.DIVISION_CD = MI.DIVISION_CD
                      AND MC.COMPANY_CD = MI.COMPANY_CD
                      AND MC.CODE_CLASS_ID = 'IO_CATEGORY'
                      AND MC.CODE_ID = MI.IO_CATEGORY
                      AND MC.ATTRIBUTE24 = 'Y'
                      AND MC.CODE_VALUES IS NULL)
			AND    NOT EXISTS (SELECT '*'
			                   FROM   MOM_ITEM_STOCK_INOUT B
			                   WHERE  B.DIVISION_CD = MI.DIVISION_CD
			                   AND    B.COMPANY_CD  = MI.COMPANY_CD
			                   AND	  B.IO_TYPE = 'I'
			                   AND    B.PREV_STOCK_INOUT_ID = MI.ITEM_STOCK_INOUT_ID)
			)
		SELECT A.*
		     , CASE WHEN MOD(PLIST_CELLROW, LIST_ALLCOUNT) = 1 THEN (CEIL(PLIST_CELLROW / LIST_ALLCOUNT)) || '/' || (CEIL(GROUP_COUNT / LIST_ALLCOUNT)) 
       		   ELSE '' END AS PLIST_PAGING
		  FROM (SELECT A.*
		             , ROW_NUMBER() OVER(PARTITION BY A.ITEM_INPUT_ID ORDER BY A.IO_TIME, A.WORK_ORDER_ID, A.ITEM_ID) AS PLIST_CELLROW
		  			 , COUNT(*) OVER(PARTITION BY A.ITEM_INPUT_ID) AS GROUP_COUNT
				  	 , (SELECT LIST_ALLCOUNT
				          FROM MOM_EXCEL
				         WHERE DIVISION_CD = A.DIVISION_CD
				           AND COMPANY_CD = A.COMPANY_CD
				           AND EXCEL_ID = #{excelId, jdbcType=VARCHAR}) AS LIST_ALLCOUNT
		          FROM TEMP1 A
		             ) A
	</select>
	
	<select id="get_emReleasePrintStatusCount_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT COUNT(*) AS ROW_COUNT
		  FROM MOM_ITEM_STOCK_INOUT A
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.ITEM_INPUT_ID IN (${requestOutputIds})
	       AND EXISTS
              (SELECT '*'
                 FROM MOM_CODE C
                WHERE C.DIVISION_CD = A.DIVISION_CD
                  AND C.COMPANY_CD = A.COMPANY_CD
                  AND C.CODE_CLASS_ID = 'IO_CATEGORY'
                  AND C.CODE_ID = A.IO_CATEGORY
                  AND C.USE_YN = 'Y'
                  AND C.ATTRIBUTE24 = 'Y'
                  AND C.CODE_VALUES IS NULL)
		   AND NOT EXISTS (SELECT '*'
		   					 FROM MOM_ITEM_STOCK_INOUT IC
		   					WHERE IC.DIVISION_CD = A.DIVISION_CD
		   					  AND IC.COMPANY_CD = A.COMPANY_CD
		   					  AND IC.IO_TYPE = 'I'
		   					  AND IC.PREV_STOCK_INOUT_ID = A.ITEM_STOCK_INOUT_ID)
	</select>
</mapper>