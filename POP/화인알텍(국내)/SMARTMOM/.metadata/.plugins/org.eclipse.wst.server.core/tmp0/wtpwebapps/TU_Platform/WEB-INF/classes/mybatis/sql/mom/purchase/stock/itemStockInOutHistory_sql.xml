<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.purchase.stock.itemStockInOutHistory">
	<select id="get_itemStock_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT B.ITEM_STOCK_ID
		     , A.ITEM_ID
		     , A.ITEM_NAME
		     , A.SPECIFICATION
		     , B.LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (B.DIVISION_CD
		      											  , B.COMPANY_CD
		      											  , B.LOCATION_CD) 
		      	  FROM DUAL) AS LOCATION_NAME
		     , B.CURRENT_QTY
		     , A.UNIT
		     , NVL(C.MONTH_PRICE, 0) AS UNIT_PRICE
		     , (B.CURRENT_QTY * NVL(C.MONTH_PRICE, 0)) AS CURRENT_AMT
		     , TO_CHAR(B.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
		  FROM MOM_ITEM_DEFINITION A
		     , MOM_ITEM_STOCK      B
		     , (SELECT ITEM_ID
		             , LOCATION_CD
		             , MONTH_PRICE
		             , BASIS_YYYYMM
		             , DIVISION_CD
		             , COMPANY_CD
		            FROM (SELECT ROW_NUMBER() OVER(PARTITION BY DIVISION_CD, COMPANY_CD, ITEM_ID, LOCATION_CD ORDER BY BASIS_YYYYMM DESC) AS RN
	                           , BASIS_YYYYMM
	                           , LOCATION_CD
	                           , ITEM_ID
	                           , MONTH_PRICE
	                           , DIVISION_CD
	                           , COMPANY_CD
	                        FROM MOM_MONTH_MATERIAL)
		           WHERE RN = 1
		          UNION ALL
		          SELECT ITEM_ID
		               , LOCATION_CD
		               , MONTH_PRICE
		               , BASIS_YYYYMM
		               , DIVISION_CD
		               , COMPANY_CD
		            FROM (SELECT ROW_NUMBER() OVER(PARTITION BY DIVISION_CD, COMPANY_CD, ITEM_ID, LOCATION_CD ORDER BY BASIS_YYYYMM DESC) AS RN
	                           , BASIS_YYYYMM
	                           , LOCATION_CD
	                           , ITEM_ID
	                           , MONTH_PRICE
	                           , DIVISION_CD
	                           , COMPANY_CD
	                       FROM MOM_MONTH_MATERIAL)
		           WHERE RN = 1) C
		 WHERE   A.DIVISION_CD = B.DIVISION_CD
		   AND   A.COMPANY_CD = B.COMPANY_CD
		   AND   A.ITEM_ID = B.ITEM_ID
		   AND   B.DIVISION_CD = C.DIVISION_CD(+)
		   AND   B.COMPANY_CD = C.COMPANY_CD(+)
		   AND   B.ITEM_ID = C.ITEM_ID(+)
		   AND   B.LOCATION_CD = C.LOCATION_CD(+)
		   AND   A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND   A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND   B.LOCATION_CD = #{locationName, jdbcType=VARCHAR}
		  <if test="itemName != null and itemName != ''">
		   AND  (B.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%'
		         OR UPPER(A.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%')
		  </if>
		  <if test='stockQty == "N"'>
		   AND   B.CURRENT_QTY != 0
		  </if>
		 ORDER BY ITEM_ID
	</select>
	
	<select id="get_itemStockInOut_list" resultType="camelMap" parameterType="java.util.HashMap">
		WITH TEMP1 AS(
			 SELECT A.*
			      , A.IO_CATEGORY_NAME AS IO_DESC
			   FROM (
			        SELECT A.ITEM_STOCK_ID
			             , A.ITEM_STOCK_INOUT_ID
			             , A.ITEM_ID
			             , TO_CHAR(A.IO_TIME, 'YYYY-MM-DD') AS IO_TIME
			             , A.QTY
			             , DECODE(A.IO_TYPE, 'I', A.QTY, '') AS IN_QTY
			             , DECODE(A.IO_TYPE, 'O', A.QTY, '') AS OUT_QTY
			             , A.UNIT
			             , NVL(A.UNIT_PRICE, 0) AS UNIT_PRICE
			             , NVL(A.INOUT_PRICE, 0) AS INOUT_PRICE
			             , DECODE(A.IO_TYPE, 'I', NVL(A.INOUT_PRICE, 0), '') AS IN_AMT
			             , DECODE(A.IO_TYPE, 'O', NVL(A.INOUT_PRICE, 0), '') AS OUT_AMT
			             , A.LOCATION_CD
			             , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (A.DIVISION_CD
			             											  , A.COMPANY_CD
			             											  , A.LOCATION_CD) 
			             	  FROM DUAL) AS LOCATION_NAME
			             , A.IO_TYPE
			             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD
			             										 , A.COMPANY_CD
			             										 , 'IO_TYPE'
			             										 , A.IO_TYPE) 
			             	  FROM DUAL) AS IO_TYPE_NAME
			             , A.IO_CATEGORY
			             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD
			             										 , A.COMPANY_CD
			             										 , 'IO_CATEGORY'
			             										 , A.IO_CATEGORY) 
			             	  FROM DUAL) AS IO_CATEGORY_NAME
			             , A.CREATE_DATE
			          FROM MOM_ITEM_STOCK_INOUT A
			         WHERE 1=1
			           AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}          
			           AND A.ITEM_STOCK_ID = #{itemStockId, jdbcType=VARCHAR}
			          <if test="ioType != null and ioType != ''">
			           AND A.IO_TYPE = #{ioType, jdbcType=VARCHAR}
			          </if>
			           AND A.IO_TIME BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
			           	   			 AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997/24
			       ) A
			 ORDER BY A.IO_TIME DESC, A.CREATE_DATE DESC 
			 )
	 SELECT A.*
	      , B.CNT CNT
	      , B.SUM_IN_QTY
	      , B.SUM_OUT_QTY
	   FROM (SELECT A.*
	              , ROWNUM JQGRIDROW
	           FROM TEMP1 A) A
	      , (SELECT COUNT(*) CNT
	              , SUM(NVL(IN_QTY,0)) SUM_IN_QTY
	              , SUM(NVL(OUT_QTY,0)) SUM_OUT_QTY
	           FROM TEMP1) B
	</select>

</mapper>