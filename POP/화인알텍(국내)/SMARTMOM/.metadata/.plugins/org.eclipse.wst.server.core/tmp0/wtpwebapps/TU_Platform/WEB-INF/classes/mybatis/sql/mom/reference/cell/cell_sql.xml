<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.cell.cell">
	<select id="get_cell_list" resultType="camelMap" parameterType="java.util.HashMap">
    WITH TEMP1 AS (
		SELECT 
			  A.DIVISION_CD
			, A.COMPANY_CD
			, A.CELL_CD
			, A.CELL_NAME
			, A.SEQ
			, A.USE_YN
			, A.DESCRIPTION
			, TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			, A.CREATE_BY
			, TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			, A.UPDATE_BY
 		FROM MOM_CELL A
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
        AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	  <if test="cellCd != null and cellCd != '' ">
		AND		CELL_CD LIKE '%' || TRIM(UPPER(#{cellCd, jdbcType=VARCHAR})) || '%'
	  </if>
	  <if test="cellName != null and cellName != '' ">
		AND		UPPER(CELL_NAME) LIKE '%' || TRIM(UPPER(#{cellName, jdbcType=VARCHAR})) || '%'
	  </if>
	  ORDER BY SEQ
	  )
				
	  SELECT A.*
	         , B.ROW_COUNT
	  FROM (SELECT A.*
	        	   , ROWNUM GRIDROW
	        FROM TEMP1 A) A
	        , (SELECT COUNT(*) ROW_COUNT
	          FROM TEMP1) B 
      <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
	      WHERE GRIDROW BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
      </if>
	</select>

	<insert id="create_cell" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_CELL(	 
			  DIVISION_CD
			, COMPANY_CD
			, CELL_CD
			, CELL_NAME
			, SEQ
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		)
		VALUES(
				  #{divisionCd, jdbcType=VARCHAR}
				, #{companyCd, jdbcType=VARCHAR}
				, UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
				, #{cellName, jdbcType=VARCHAR}
				, #{seq, jdbcType=INTEGER}
				, NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})), 'Y')
				, #{description, jdbcType=VARCHAR}
				, MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			    , #{createBy, jdbcType=VARCHAR}
			    , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			    , #{updateBy, jdbcType=VARCHAR}
		)
		;
				
		INSERT INTO MOM_CELL_HIST(
			  LAST_EVENT_SEQ
			, DIVISION_CD
			, COMPANY_CD
			, CELL_CD
			, CELL_NAME
			, SEQ
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		)
		SELECT
			  S_ORDER_SEQ.NEXTVAL
			, DIVISION_CD
			, COMPANY_CD
			, CELL_CD
			, CELL_NAME
			, SEQ
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		FROM  MOM_CELL
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
		AND CELL_CD       = UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(CELL_CD) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
				FROM MOM_CELL
				WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
				AND COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
				AND CELL_CD       = UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
		;
		
	  END			
	}
	</insert>

	<update id="modify_cell" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		UPDATE MOM_CELL
		  SET 
		  	  CELL_NAME   = #{cellName,jdbcType=VARCHAR}
			, SEQ         = #{seq,jdbcType=INTEGER}
			, USE_YN      = NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})), 'Y')
			, DESCRIPTION = #{description, jdbcType=VARCHAR}
			, UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			, UPDATE_BY   = #{updateBy, jdbcType=VARCHAR}
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
		AND CELL_CD       = UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
		;
		
		INSERT INTO MOM_CELL_HIST(
			  LAST_EVENT_SEQ
			, DIVISION_CD
			, COMPANY_CD
			, CELL_CD
			, CELL_NAME
			, SEQ
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		)
		SELECT
			  S_ORDER_SEQ.NEXTVAL
			, DIVISION_CD
			, COMPANY_CD
			, CELL_CD
			, CELL_NAME
			, SEQ
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		FROM  MOM_CELL
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
		AND CELL_CD       = UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(CELL_CD) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_CELL
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
		AND CELL_CD       = UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
		;
			
		END
		}
	</update>

	<delete id="remove_cell" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
		#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
		
		INSERT INTO MOM_CELL_HIST(
			  LAST_EVENT_SEQ
			, DIVISION_CD
			, COMPANY_CD
			, CELL_CD
			, CELL_NAME
			, SEQ
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		)
		SELECT
			  S_ORDER_SEQ.NEXTVAL
			, DIVISION_CD
			, COMPANY_CD
			, CELL_CD
			, CELL_NAME
			, SEQ
			, USE_YN
			, 'Delete Data'
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		FROM  MOM_CELL
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND CELL_CD       = UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
		;
		
		DELETE FROM MOM_CELL
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
		AND CELL_CD = UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(CELL_CD) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_CELL
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		    AND CELL_CD       = UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
		;
		END
		}
	</delete>
	
	<select id="get_priorityCheck_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT SEQ 
		FROM   MOM_CELL
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		AND    CELL_CD    != UPPER(TRIM(#{cellCd, jdbcType=VARCHAR}))
		AND    SEQ         = #{seq, jdbcType=VARCHAR}
	</select>

</mapper>
