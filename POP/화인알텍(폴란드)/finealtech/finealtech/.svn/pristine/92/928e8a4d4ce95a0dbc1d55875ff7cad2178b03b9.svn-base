<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.common">
	<select id="get_comVendor_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.VENDOR_CD AS CODE
		     , A.VENDOR_CD||'('|| A.VENDOR_NAME ||')' AS NAME
		  FROM MOM_VENDOR A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NVL(USE_YN, 'Y') = 'Y'
		   <if test = "attribute1 != '' and attribute1 != null">
		   AND A.VENDOR_TYPE IN ('COOPERATIVE', 'BOTH')
		   </if>
		   <if test = "vendorType != '' and vendorType != null">
           AND A.VENDOR_TYPE IN (${vendorType})
           </if>
 		 ORDER BY VENDOR_NAME
	</select>
	
	<select id="get_comVendorId_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.VENDOR_CD AS CODE
		     , A.VENDOR_CD||'('|| A.VENDOR_NAME ||')' AS NAME
		  FROM MOM_VENDOR A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND UPPER(A.VENDOR_CD) LIKE '%' || UPPER(#{key, jdbcType=VARCHAR}) || '%'
		   AND NVL(USE_YN, 'Y') = 'Y'
		   <if test = "attribute1 != '' and attribute1 != null">
		   AND A.VENDOR_TYPE IN ('COOPERATIVE', 'BOTH')
		   </if>
 		 ORDER BY VENDOR_NAME
	</select>
	
	<select id="get_comVendorType_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT VENDOR_TYPE 
		FROM   MOM_VENDOR
		WHERE  VENDOR_CD = #{vendorCd, jdbcType=VARCHAR}
	</select>
	
	<select id="get_comFacility_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.FACILITY_CD AS CODE 
		     , A.FACILITY_CD||'('||A.FACILITY_NAME ||')' AS NAME
		  FROM MOM_FACILITY A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NVL(A.USE_YN, 'Y') = 'Y'
		  <if test = "facilityType != null and facilityType != ''">
		   AND A.FACILITY_TYPE = #{facilityType, jdbcType=VARCHAR}
		  </if>
		  <if test = "facilityClassCd != '' and facilityClassCd != null">
		   AND A.FACILITY_CLASS_CD = #{facilityClassCd, jdbcType=VARCHAR}
		  </if>
		  <if test = "scrapLocationFlag != null and scrapLocationFlag != ''">
		   AND A.SCRAP_LOCATION_FLAG = #{scrapLocationFlag, jdbcType=VARCHAR}
		  </if>
		 ORDER BY A.FACILITY_SEQ, FACILITY_NAME
	</select>
	
	<select id="get_specifyCode_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.CODE_ID AS CODE
		     , A.CODE_NAME AS NAME
		     , A.CODE_VALUES AS VALUE
		  FROM MOM_CODE A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.CODE_CLASS_ID = #{codeClassId, jdbcType=VARCHAR} 
		   AND NVL(A.USE_YN, 'Y') = 'Y'
		   <if test = "attribute1 != null and attribute1 != ''">
		    AND A.ATTRIBUTE1 = #{attribute1, jdbcType=VARCHAR}
		   </if>
           <if test = "attribute2 != null and attribute2 != ''">
            AND A.ATTRIBUTE2 = #{attribute2, jdbcType=VARCHAR}
           </if>
           <if test = "attribute3 != null and attribute3 != ''">
            AND A.ATTRIBUTE3 = #{attribute3, jdbcType=VARCHAR}
           </if>
           <if test = "attribute4 != null and attribute4 != ''">
            AND A.ATTRIBUTE4 = #{attribute4, jdbcType=VARCHAR}
           </if>
           <if test = "attribute5 != null and attribute5 != ''">
            AND A.ATTRIBUTE5 = #{attribute5, jdbcType=VARCHAR}
           </if>
           <if test = "attribute6 != null and attribute6 != ''">
            AND A.ATTRIBUTE6 = #{attribute6, jdbcType=VARCHAR}
           </if>
           <if test = "attribute7 != null and attribute7 != ''">
            AND A.ATTRIBUTE7 = #{attribute7, jdbcType=VARCHAR}
           </if>
           <if test = "attribute8 != null and attribute8 != ''">
            AND A.ATTRIBUTE8 = #{attribute8, jdbcType=VARCHAR}
           </if>
           <if test = "attribute9 != null and attribute9 != ''">
            AND A.ATTRIBUTE9 = #{attribute9, jdbcType=VARCHAR}
           </if>
           <if test = "attribute10 != null and attribute10 != ''">
            AND A.ATTRIBUTE10 = #{attribute10, jdbcType=VARCHAR}
           </if>
           <if test = "attribute11 != null and attribute11 != ''">
            AND A.ATTRIBUTE11 = #{attribute11, jdbcType=VARCHAR}
           </if>
           <if test = "attribute12 != null and attribute12 != ''">
            AND A.ATTRIBUTE12 = #{attribute12, jdbcType=VARCHAR}
           </if>
           <if test = "attribute13 != null and attribute13 != ''">
            AND A.ATTRIBUTE13 = #{attribute13, jdbcType=VARCHAR}
           </if>
           <if test = "attribute14 != null and attribute14 != ''">
            AND A.ATTRIBUTE14 = #{attribute14, jdbcType=VARCHAR}
           </if>
           <if test = "attribute15 != null and attribute15 != ''">
            AND A.ATTRIBUTE15 = #{attribute15, jdbcType=VARCHAR}
           </if>
           <if test = "attribute16 != null and attribute16 != ''">
            AND A.ATTRIBUTE16 = #{attribute16, jdbcType=VARCHAR}
           </if>
           <if test = "attribute17 != null and attribute17 != ''">
            AND A.ATTRIBUTE17 = #{attribute17, jdbcType=VARCHAR}
           </if>
           <if test = "attribute18 != null and attribute18 != ''">
            AND A.ATTRIBUTE18 = #{attribute18, jdbcType=VARCHAR}
           </if>
           <if test = "attribute19 != null and attribute19 != ''">
            AND A.ATTRIBUTE19 = #{attribute19, jdbcType=VARCHAR}
           </if>
           <if test = "attribute20 != null and attribute20 != ''">
            AND A.ATTRIBUTE20 = #{attribute20, jdbcType=VARCHAR}
           </if>
           <if test = "codeId != null and codeId != ''">
            AND A.CODE_ID IN (${codeId})
           </if>
		  ORDER BY A.UI_SEQUENCE
	</select>
	
	<select id="get_comCode_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.CODE_ID AS CODE
		     , A.CODE_NAME AS NAME
		     , A.CODE_VALUES AS VALUE
		     , A.CODE_ID || '(' || A.CODE_NAME || ')' AS CODE_NAME
		  FROM MOM_CODE A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.CODE_CLASS_ID = #{codeClassId, jdbcType=VARCHAR} 
		   AND NVL(A.USE_YN, 'Y') = 'Y'
		   <if test = "attribute1 != null and attribute1 != ''">
		    AND A.ATTRIBUTE1 = #{attribute1, jdbcType=VARCHAR}
		   </if>
           <if test = "attribute2 != null and attribute2 != ''">
            AND A.ATTRIBUTE2 = #{attribute2, jdbcType=VARCHAR}
           </if>
           <if test = "attribute3 != null and attribute3 != ''">
            AND A.ATTRIBUTE3 = #{attribute3, jdbcType=VARCHAR}
           </if>
           <if test = "attribute4 != null and attribute4 != ''">
            AND A.ATTRIBUTE4 = #{attribute4, jdbcType=VARCHAR}
           </if>
           <if test = "attribute5 != null and attribute5 != ''">
            AND A.ATTRIBUTE5 = #{attribute5, jdbcType=VARCHAR}
           </if>
           <if test = "attribute6 != null and attribute6 != ''">
            AND A.ATTRIBUTE6 = #{attribute6, jdbcType=VARCHAR}
           </if>
           <if test = "attribute7 != null and attribute7 != ''">
            AND A.ATTRIBUTE7 = #{attribute7, jdbcType=VARCHAR}
           </if>
           <if test = "attribute8 != null and attribute8 != ''">
            AND A.ATTRIBUTE8 = #{attribute8, jdbcType=VARCHAR}
           </if>
           <if test = "attribute9 != null and attribute9 != ''">
            AND A.ATTRIBUTE9 = #{attribute9, jdbcType=VARCHAR}
           </if>
           <if test = "attribute10 != null and attribute10 != ''">
            AND A.ATTRIBUTE10 = #{attribute10, jdbcType=VARCHAR}
           </if>
           <if test = "attribute11 != null and attribute11 != ''">
            AND A.ATTRIBUTE11 = #{attribute11, jdbcType=VARCHAR}
           </if>
           <if test = "attribute12 != null and attribute12 != ''">
            AND A.ATTRIBUTE12 = #{attribute12, jdbcType=VARCHAR}
           </if>
           <if test = "attribute13 != null and attribute13 != ''">
            AND A.ATTRIBUTE13 = #{attribute13, jdbcType=VARCHAR}
           </if>
           <if test = "attribute14 != null and attribute14 != ''">
            AND A.ATTRIBUTE14 = #{attribute14, jdbcType=VARCHAR}
           </if>
           <if test = "attribute15 != null and attribute15 != ''">
            AND A.ATTRIBUTE15 = #{attribute15, jdbcType=VARCHAR}
           </if>
           <if test = "attribute16 != null and attribute16 != ''">
            AND A.ATTRIBUTE16 = #{attribute16, jdbcType=VARCHAR}
           </if>
           <if test = "attribute17 != null and attribute17 != ''">
            AND A.ATTRIBUTE17 = #{attribute17, jdbcType=VARCHAR}
           </if>
           <if test = "attribute18 != null and attribute18 != ''">
            AND A.ATTRIBUTE18 = #{attribute18, jdbcType=VARCHAR}
           </if>
           <if test = "attribute19 != null and attribute19 != ''">
            AND A.ATTRIBUTE19 = #{attribute19, jdbcType=VARCHAR}
           </if>
           <if test = "attribute20 != null and attribute20 != ''">
            AND A.ATTRIBUTE20 = #{attribute20, jdbcType=VARCHAR}
           </if>
           <if test = "codeId != null and codeId != ''">
            AND A.CODE_ID = #{codeId, jdbcType=VARCHAR}
           </if>
		  ORDER BY A.UI_SEQUENCE
	</select>
	
	<select id="get_comSequence_list" resultType="camelMap">
		SELECT s_global.nextval AS SEQUENCE
		  FROM DUAL
	</select>
	
	<select id="get_comItem_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.ITEM_ID AS CODE
		     , A.ITEM_ID || '(' || A.ITEM_NAME || ')' AS NAME
		  FROM MOM_ITEM_DEFINITION A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND (A.ITEM_ID LIKE '%' || UPPER(#{key, jdbcType=VARCHAR}) || '%'
		       OR UPPER(A.ITEM_NAME) LIKE '%' || UPPER(#{key, jdbcType=VARCHAR}) || '%')
		   AND NVL(USE_YN, 'Y') = 'Y'
		  <if test="itemType != null and itemType != ''">
		   AND ITEM_TYPE IN(${itemType})
		  </if>
		 ORDER BY ITEM_NAME
	</select>
	
	<select id="get_comResourceGroup_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT RESOURCE_GROUP_CD AS CODE
     		 , RESOURCE_GROUP_CD || '(' || RESOURCE_GROUP_NAME || ')' AS NAME
  		  FROM MOM_RESOURCE_GROUP
 		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
   		   AND NVL(USE_YN, 'Y') = 'Y'
 		 ORDER BY RESOURCE_GROUP_NAME
	</select>
	
	<select id="get_comResource_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT RESOURCE_CD AS CODE
     		 , RESOURCE_CD || '(' || RESOURCE_NAME || ')' AS NAME
  		  FROM MOM_RESOURCE
 		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
   		   AND NVL(USE_YN, 'Y') = 'Y'
 		 ORDER BY NVL(OUTSOURCING_FLAG, 'N'), RESOURCE_NAME
	</select>
	
	<select id="get_comUser_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT EMP_NO AS CODE
	         , EMP_NO || '(' || NAME || ')' AS NAME
	      FROM TU_USER
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	       AND NVL(USE_YN, 'Y') = 'Y'
    	 ORDER BY NAME
    </select>
    
    <select id="get_comDestination_list" resultType="camelMap" parameterType="java.util.HashMap">
	    SELECT DISTINCT A.DESTINATION_CD CODE
	             	  , A.DESTINATION_CD || '(' || B.VENDOR_NAME || ')' NAME
          FROM MOM_PRODUCT_CLASS_REL A
             , MOM_VENDOR B
         WHERE A.DIVISION_CD = B.DIVISION_CD
           AND A.DESTINATION_CD = B.VENDOR_CD
           AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND NVL(A.USE_YN, 'Y') = 'Y'
           AND NVL(B.USE_YN, 'Y') = 'Y'
         ORDER BY A.DESTINATION_CD
    </select>
    
    <select id="get_comMixGroup_list" resultType="camelMap" parameterType="java.util.HashMap">
	    SELECT DISTINCT MIX_GROUP CODE
	             	  , MIX_GROUP NAME
	      FROM MOM_SALES_ORDER
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	     ORDER BY MIX_GROUP
    </select>
    
    <select id="get_comCustomerLine_list" resultType="camelMap" parameterType="java.util.HashMap">
	    SELECT DISTINCT CUSTOMER_LINE_CD CODE
	            	  , CUSTOMER_LINE_CD NAME
	      FROM MOM_SALES_ORDER
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	     ORDER BY CUSTOMER_LINE_CD
    </select>
    
    <select id="get_comClosingMonthly_list" resultType="camelMap" parameterType="java.util.HashMap">
		 SELECT TO_CHAR(TRUNC(SOLAR_DATE, 'MONTH'), 'YYYY-MM') CODE
	         , TO_CHAR(TRUNC(SOLAR_DATE, 'MONTH'), 'YYYY-MM') NAME
	      FROM MOM_CALENDA
	     WHERE 1 = 1
	       AND SOLAR_DATE >= TO_DATE(TO_CHAR( NVL( (SELECT MIN (IO_TIME)
	                                                  FROM MOM_ITEM_STOCK_INOUT
	                                                 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	                                                   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR})
	                                             , TRUNC (MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})))
	                                        , 'YYYY-MM-DD')
	                                , 'YYYY-MM-DD')
	       AND SOLAR_DATE &lt;= TRUNC(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}))
	     GROUP BY TRUNC(SOLAR_DATE, 'MONTH')
	     ORDER BY 1 DESC
	 </select>
	 
	<select id="get_comClosingYears_list" resultType="camelMap" parameterType="java.util.HashMap">
	     SELECT TO_CHAR (END_DATE, 'yyyy') CODE
              , TO_CHAR (END_DATE, 'yyyy') NAME
           FROM MOM_ITEM_MONTH_END
		  WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		    AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		  GROUP BY TO_CHAR (END_DATE, 'yyyy')
          ORDER BY TO_CHAR (END_DATE, 'yyyy') DESC
	</select>      
	
	<select id="get_comClosingYearMonths_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT DISTINCT YEAR_MONTH CODE
	                  , YEAR_MONTH NAME
	      FROM MOM_ITEM_LAST_END
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND END_FLAG = 'Y'
	     ORDER BY YEAR_MONTH DESC
    </select>
    
    <select id="get_site_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			 DIVISION_CD         
		    ,DIVISION_NAME      
		    ,COMPANY_CD          
		    ,COMPANY_NAME       
		    ,COUNTRY            
		    ,LANGUAGE           
		    ,STANDARD_TIME       
		    ,CURRENCY            
		    ,DIVISION_CI        
		    ,DIVISION_FAVICON            
		    ,DESCRIPTION 
		FROM 
			MOM_SITE
		WHERE 	
			1 = 1
			AND USE_YN = 'Y'
		<if test = "companyCd != null and companyCd != ''">
			AND COMPANY_CD = #{companyCd}
		</if>
		ORDER BY DIVISION_CD DESC				  
    </select>
    
    <select id="get_siteAll_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			 DIVISION_CD         
		    ,DIVISION_NAME      
		    ,COMPANY_CD          
		    ,COMPANY_NAME       
		    ,COUNTRY            
		    ,LANGUAGE           
		    ,STANDARD_TIME       
		    ,CURRENCY            
		    ,DIVISION_CI        
		    ,DIVISION_FAVICON            
		    ,DESCRIPTION 
		FROM 
			MOM_SITE
		WHERE 	
			1 = 1
			AND USE_YN = 'Y'
		ORDER BY DIVISION_CD DESC				  
    </select>

	<select id="get_code" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			CODE_ID AS CODE
		   ,CODE_NAME AS VALUE
		FROM
			MOM_CODE
		WHERE
			DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND CODE_CLASS_ID = #{codeClassId, jdbcType=VARCHAR}
		AND CODE_NAME = #{key, jdbcType=VARCHAR}
		ORDER BY UI_SEQUENCE
	</select>
	
	<select id="get_codeValue_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			CODE_VALUES
		FROM
			MOM_CODE
		WHERE
			DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND CODE_CLASS_ID = #{codeClassId, jdbcType=VARCHAR}
		AND CODE_ID = #{codeId, jdbcType=VARCHAR}
		ORDER BY UI_SEQUENCE
	</select>
	
	<select id="get_vendor_code" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			VENDOR_CD AS CODE
		   ,VENDOR_NAME AS VALUE
		FROM
			MOM_VENDOR
		WHERE
			DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		ORDER BY VENDOR_NAME
	</select>
	
	<select id="get_facility_code" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			FACILITY_CD AS CODE
		   ,FACILITY_NAME AS VALUE
		FROM
			MOM_FACILITY
		WHERE
			DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		ORDER BY A.FACILITY_SEQ, FACILITY_NAME
	</select>
	
	<select id="get_resource_code" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			RESOURCE_CD AS CODE
		   ,RESOURCE_NAME AS VALUE
		FROM
			MOM_RESOURCE
		WHERE
			DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		ORDER BY NVL(OUTSOURCING_FLAG, 'N'), RESOURCE_NAME
	</select>
	
	<select id="get_comItem_code" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			ITEM_ID AS CODE
		   ,ITEM_ID || '(' || ITEM_NAME || ')' AS NAME
		FROM
			MOM_ITEM_DEFINITION
		WHERE
			DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		ORDER BY ITEM_NAME
	</select>
	
	<select id="get_comItemInfo_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT ITEM_NAME
		     , SPECIFICATION
		     , ITEM_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (DIVISION_CD, COMPANY_CD, 'ITEM_TYPE', ITEM_TYPE) FROM DUAL) AS ITEM_TYPE_NAME
		  FROM MOM_ITEM_DEFINITION
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
	</select>
	
	<select id="get_comItemId_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			ITEM_ID AS CODE
		   ,ITEM_ID || '(' || ITEM_NAME || ')' AS NAME
		FROM
			MOM_ITEM_DEFINITION
		WHERE
			DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND UPPER(ITEM_ID || '(' || ITEM_NAME || ')') LIKE UPPER('%' || #{key, jdbcType=VARCHAR} || '%') 
		AND NVL(USE_YN, 'N') = 'Y'
		ORDER BY ITEM_NAME
	</select>
	
	<select id="get_user_code" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			USER_ID AS CODE
		   ,NAME AS VALUE
		FROM
			TU_USER
		WHERE
			DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		ORDER BY NAME
    </select>
    
    <select id="get_comGetVendor_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			VENDOR_CD AS CODE
		   ,VENDOR_CD || '(' || VENDOR_NAME || ')' AS NAME
		FROM
			MOM_VENDOR
		WHERE
			DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND VENDOR_CD = #{vendorCd, jdbcType=VARCHAR}
		ORDER BY VENDOR_NAME
	</select>
    
    <!-- 발주 공통  -->
    <delete id="remove_materialOrderDel" parameterType="java.util.HashMap">
		DELETE FROM MOM_MATERIAL_ORDER_UPLOAD
		 WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
  		   AND  COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
  		   AND  ORDER_TYPE = #{orderType, jdbcType=VARCHAR}
	</delete>
	
    <insert id="create_materialOrderUpload" parameterType="java.util.HashMap">
		INSERT INTO MOM_MATERIAL_ORDER_UPLOAD ( DIVISION_CD,
												COMPANY_CD,
												VENDOR_CD,
												DEPARTURE_VENDOR_CD,
												LOCATION_CD,
												ITEM_ID,
												ORDER_QTY,
												ORDER_DATE,
												MARKET_CD,
												CURRENCY_CD,
												ORDER_TYPE,
												DESCRIPTION,
												DEPARTURE_FLAG,
												IQC_FLAG,
												SEQ
												)
								   VALUES ( #{divisionCd, jdbcType=VARCHAR},
											#{companyCd, jdbcType=VARCHAR},
											#{vendorCd, jdbcType=VARCHAR},
											NVL(#{departureVendorCd, jdbcType=VARCHAR}, #{vendorCd, jdbcType=VARCHAR}),
											#{inLocationId, jdbcType=VARCHAR},
											#{itemId, jdbcType=VARCHAR},
											#{requestQty, jdbcType=INTEGER},
											TO_DATE(SUBSTR(#{requestDate, jdbcType=VARCHAR},0,10),'YYYY-MM-DD'),
											#{marketCd, jdbcType=VARCHAR},
											#{currencyCd, jdbcType=VARCHAR},
											#{orderType, jdbcType=VARCHAR},
											#{description, jdbcType=VARCHAR},
											#{departureFlag, jdbcType=VARCHAR},
											#{iqcFlag, jdbcType=VARCHAR},
											#{seq, jdbcType=VARCHAR})
	</insert>
	
	<update id="modify_materialOrderUpload" parameterType="java.util.HashMap">
		UPDATE MOM_MATERIAL_ORDER_UPLOAD
		SET 
			ORDER_QTY = #{requestQty, jdbcType=INTEGER},
			MARKET_CD = #{marketCd, jdbcType=VARCHAR},
			CURRENCY_CD = #{currencyCd, jdbcType=VARCHAR},
			ORDER_TYPE = #{orderType, jdbcType=VARCHAR},
			ORDER_DATE = TO_DATE(SUBSTR(#{requestDate, jdbcType=VARCHAR},0,10),'YYYY-MM-DD'),
			DESCRIPTION = #{description, jdbcType=VARCHAR}
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			AND VENDOR_CD = #{vendorCd, jdbcType=VARCHAR}
			AND DEPARTURE_VENDOR_CD = #{departureVendorCd, jdbcType=VARCHAR}
			AND LOCATION_CD = #{inLocationId, jdbcType=VARCHAR}
			AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
			AND TO_CHAR(ORDER_DATE,'YYYY-MM-DD') = #{requestDate, jdbcType=VARCHAR}
	</update>
	
	<insert id="create_materialOrder" statementType="CALLABLE">
	{
        CALL SP_MOM_MATERIAL_PKG.P_CREATE_MATERIAL_ORDER (
        	#{p_err_code, mode=OUT, jdbcType=VARCHAR}
           ,#{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           ,#{divisionCd, mode=IN, jdbcType=VARCHAR}
           ,#{companyCd, mode=IN, jdbcType=VARCHAR}
           ,#{orderType, mode=IN, jdbcType=VARCHAR}
           ,#{userId, mode=IN, jdbcType=VARCHAR}
        )
    }
    </insert>
    
    <!-- 2018.07.13 hyjeong begin -->
	<select parameterType="java.util.HashMap" resultType="hashMap" id="get_code_tmp"> 
		SELECT CODE_VALUE AS codeValue FROM MOM_CODE_TMP WHERE CODE_PAGE = #{codePage, jdbcType=VARCHAR} AND CODE_ID = #{codeId, jdbcType=VARCHAR} 
	</select>
	<!-- 2018.07.13 hyjeong end -->
	
	<select id="get_comCurrencyCode_list" resultType="camelMap" parameterType="java.util.HashMap">
	SELECT C.CODE_ID AS CODE
		 , C.CODE_NAME AS NAME
	  FROM   MOM_CODE C
	 WHERE  C.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	   AND    C.COMPANY_CD  =  #{companyCd, jdbcType=VARCHAR}
	   AND    C.CODE_CLASS_ID = 'CURRENCY_CODE'
	   AND    C.USE_YN = 'Y'
	   AND    C.CODE_ID NOT IN ( SELECT P.CURRENCY_CD
		                           FROM   MOM_PARAMETER P
		                          WHERE  P.DIVISION_CD = C.DIVISION_CD
		                            AND    P.COMPANY_CD = C.COMPANY_CD )
    ORDER BY UI_SEQUENCE
	</select>
	
	<select id="get_specifyFacility_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.FACILITY_CD AS CODE 
		     , A.FACILITY_CD||'('||A.FACILITY_NAME ||')' AS NAME
		  FROM MOM_FACILITY A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NVL(A.USE_YN, 'Y') = 'Y'
		  <if test = "facilityType != null and facilityType != ''">
		   AND A.FACILITY_TYPE IN (${facilityType})
		  </if>
		  <if test = "facilityClassCd != '' and facilityClassCd != null">
		   AND A.FACILITY_CLASS_CD = #{facilityClassCd, jdbcType=VARCHAR}
		  </if>
		 ORDER BY A.FACILITY_SEQ, FACILITY_NAME
	</select>
	
	<select id="get_dynamicFacility_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.FACILITY_CD AS CODE 
		     , A.FACILITY_CD||'('||A.FACILITY_NAME ||')' AS NAME
		  FROM MOM_FACILITY A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NVL(A.USE_YN, 'Y') = 'Y'
		  <if test = "stockType != null and stockType != ''">
		   AND A.FACILITY_TYPE IN (SELECT CODE_ID 
                                   FROM   MOM_CODE
                                   WHERE  CODE_CLASS_ID = 'FACILITY_TYPE'
                                   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                   <if test = "stockType =='WO'">
                                   AND    NVL(ATTRIBUTE9, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='MAT'">
                                   AND    NVL(ATTRIBUTE8, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='SO'">
                                   AND    NVL(ATTRIBUTE10, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='MRTN'">
                                   AND    NVL(ATTRIBUTE12, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='SRTN'">
                                   AND    NVL(ATTRIBUTE5, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='CLOSE'">
                                   AND    NVL(ATTRIBUTE11, 'N')  = 'Y'
                                   </if>
<!--                                    <if test = 'stockType =="PO"'> -->
<!--                                    AND    NVL(ATTRIBUTE5, 'N')  = 'Y' -->
<!--                                    </if> -->
                                   AND    NVL(USE_YN, 'Y') = 'Y')
		  </if>
		  <if test = "returnType != null and returnType != ''">
		   AND A.FACILITY_TYPE IN (SELECT CODE_ID 
                                   FROM   MOM_CODE
                                   WHERE  CODE_CLASS_ID = 'FACILITY_TYPE'
                                   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                   <if test = "returnType =='MTP'">
                                   AND    NVL(ATTRIBUTE6, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTW' and locationType == 'FROM'">
                                   AND    NVL(ATTRIBUTE14, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTW' and locationType == 'TO_M'">
                                   AND    NVL(ATTRIBUTE1, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTW' and locationType == 'TO_P'">
                                   AND    NVL(ATTRIBUTE3, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTO' and locationType == 'FROM'">
                                   AND    NVL(ATTRIBUTE15, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTO' and locationType == 'TO'">
                                   AND    NVL(ATTRIBUTE4, 'N')  = 'Y'
                                   </if>
                                   <if test = 'returnType =="P" and locationType == "TO"'>
                                   AND    NVL(ATTRIBUTE5, 'N')  = 'Y'
                                   </if>
                                   <if test = 'returnType =="P" and locationType == "FROM"'>
                                   AND    NVL(ATTRIBUTE7, 'N')  = 'Y'
                                   </if>
                                   AND    NVL(USE_YN, 'Y') = 'Y')
		  </if>
		  <if test = "facilityClassCd != '' and facilityClassCd != null">
		   AND A.FACILITY_CLASS_CD = #{facilityClassCd, jdbcType=VARCHAR}
		  </if>
		 ORDER BY A.FACILITY_SEQ, FACILITY_NAME
	</select>
	
	<select id="get_toFacility_list" resultType="camelMap" parameterType="java.util.HashMap">
        SELECT A.FACILITY_CD AS CODE 
             , A.FACILITY_CD||'('||A.FACILITY_NAME ||')' AS NAME
          FROM MOM_FACILITY A
         WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND NVL(A.USE_YN, 'Y') = 'Y'
          <if test = "stockType != null and stockType != ''">
           AND A.FACILITY_TYPE IN (SELECT CODE_ID 
                                   FROM   MOM_CODE
                                   WHERE  CODE_CLASS_ID = 'FACILITY_TYPE'
                                   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                   <if test = "stockType =='MAT'">
                                   AND    NVL(ATTRIBUTE16, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='WO'">
                                   AND    NVL(ATTRIBUTE17, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='SO'">
                                   AND    NVL(ATTRIBUTE18, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='MRTN'">
                                   AND    NVL(ATTRIBUTE13, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='SRTN'">
                                   AND    NVL(ATTRIBUTE13, 'N')  = 'Y'
                                   </if>
                                   AND    NVL(USE_YN, 'Y') = 'Y')
          </if>
          <if test = "facilityClassCd != '' and facilityClassCd != null">
           AND A.FACILITY_CLASS_CD = #{facilityClassCd, jdbcType=VARCHAR}
          </if>
         ORDER BY A.FACILITY_SEQ, FACILITY_NAME
    </select>
    
    <select id="get_outsourcingVendor_list" resultType="camelMap" parameterType="java.util.HashMap">
	    SELECT VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}, VENDOR_CD)
		          FROM DUAL) VENDOR_NAME
		  FROM MOM_FACILITY
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND FACILITY_CD = #{facilityCd, jdbcType=VARCHAR}
		   AND FACILITY_TYPE = 'FAC500'
		   AND NVL(USE_YN, 'N') = 'Y'
    </select>
    
    <select id="get_outsourcingFacility_list" resultType="camelMap" parameterType="java.util.HashMap">
	    SELECT FACILITY_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}, FACILITY_CD)
		          FROM DUAL) FACILITY_NAME
		  FROM MOM_FACILITY
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND VENDOR_CD = #{vendorCd, jdbcType=VARCHAR}
		   AND FACILITY_TYPE = 'FAC500'
           AND NVL(USE_YN, 'N') = 'Y'
    </select>
	
	<select id="get_comEncPassword_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT FN_ENCRYPT(TO_CHAR(#{specPassword, jdbcType=VARCHAR})) AS PASSWORD 
		  FROM DUAL
	</select>
	
	<select id="get_uploadFile_list" resultType="camelMap" parameterType="java.util.HashMap">
		 SELECT  DIVISION_CD
		       , COMPANY_CD
		       , FILE_ID
		       , ENTITY_NAME
		       , ENTITY_ID
		       , FILE_CATEGORY
		       , FILE_PATH
		       , NEW_FILE_NAME
		       , OLD_FILE_NAME
		       , FILE_SIZE
		       , DOWN_COUNT
		       , DEFAULT_FLAG
		       , USE_YN
		       , DESCRIPTION
		       , REASON_CODE
		       , CREATE_BY
		       , TO_CHAR(CREATE_DATE, 'yyyy-mm-dd') CREATE_DATE
		       , UPDATE_BY
		       , TO_CHAR(UPDATE_DATE, 'yyyy-mm-dd') UPDATE_DATE
		    FROM MOM_FILE
		   WHERE ENTITY_ID = #{entityId, jdbcType=VARCHAR}
			 AND ENTITY_NAME = #{entityName, jdbcType=VARCHAR}
			 AND NVL(USE_YN, 'Y') = 'Y'
			 AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			 AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   ORDER BY FILE_ID
	</select>
	
	<select id="get_comVendorItem_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT DISTINCT ID, TEXT, (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}, 'ITEM_TYPE', ITEM_TYPE)
	                               FROM   DUAL ) AS ITEM_TYPE_NAME, UNIT, SPECIFICATION
	    FROM   (SELECT ITEM_ID AS ID
	                 , ITEM_ID||'('||ITEM_NAME||')' AS TEXT
	                 , ITEM_TYPE AS ITEM_TYPE
	           , UNIT AS UNIT
	           , SPECIFICATION AS SPECIFICATION
	            FROM   MOM_ITEM_DEFINITION A
	            WHERE  1 = 1
	            AND    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	            AND    NVL(A.USE_YN, 'Y') = 'Y'
	            AND    'N' = NVL(MOM_COMMON_PKG.FN_GET_CODE_VALUES(A.DIVISION_CD, A.COMPANY_CD, 'MATERIAL_MASTER_SETUP', 'VENDOR_ITEM_USE_FLAG'), 'N')
	            UNION ALL
	            SELECT  A.ITEM_ID AS ID
	                 ,  A.ITEM_ID ||'('|| B.ITEM_NAME||')' AS TEXT
	                 ,  B.ITEM_TYPE
	                 ,  B.UNIT
	                 ,  B.SPECIFICATION
	            FROM    MOM_PRODUCT_CLASS_REL A
	                 ,  MOM_ITEM_DEFINITION B
	            WHERE   A.DIVISION_CD = B.DIVISION_CD
	            AND     A.ITEM_ID = B.ITEM_ID
	            AND     A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	            AND     A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	            <if test="key != null and key != ''">
	               AND  A.CUSTOMER_CD = #{key, jdbcType=VARCHAR}
	            </if>
	            AND     NVL(A.USE_YN, 'Y') = 'Y'
	            AND     NVL(B.USE_YN, 'Y') = 'Y'
	            AND     'Y' = NVL(MOM_COMMON_PKG.FN_GET_CODE_VALUES(A.DIVISION_CD, A.COMPANY_CD, 'MATERIAL_MASTER_SETUP', 'VENDOR_ITEM_USE_FLAG'), 'N'))
	    ORDER BY 1
    </select>
    
    <select id="get_comSelectItem_list" resultType="camelMap" parameterType="java.util.HashMap">
	    SELECT DISTINCT ID
		             , TEXT
		             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}, 'ITEM_TYPE', ITEM_TYPE)
		                  FROM DUAL ) AS ITEM_TYPE_NAME
	                 , UNIT
	                 , SPECIFICATION
	                 , IN_LOCATION_ID
	                 , IN_LOCATION_ID || '(' || IN_LOCATION_NAME || ')' AS IN_LOCATION_NAME
	                 , NVL((SELECT MOM_COMMON_PKG.FN_GET_UNIT_DECIMAL_POINT_FLAG(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}, UNIT)
	                        FROM  DUAL ), 'N') AS DP_FLAG
	                 , FREE_OFFER_FLAG
	                 , FREE_OFFER_FLAG_NAME
	    FROM   (SELECT ITEM_ID AS ID
	                 , ITEM_NAME AS TEXT
	                 , ITEM_TYPE AS ITEM_TYPE
	           , UNIT AS UNIT
	           , SPECIFICATION AS SPECIFICATION
	           , IN_LOCATION_ID
	           , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(A.DIVISION_CD, A.COMPANY_CD, A.IN_LOCATION_ID) FROM DUAL) AS IN_LOCATION_NAME
	           , A.FREE_OFFER_FLAG
               , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}, 'FREE_OFFER_FLAG', A.FREE_OFFER_FLAG) FROM DUAL), 'N') AS FREE_OFFER_FLAG_NAME
	            FROM   MOM_ITEM_DEFINITION A
	            WHERE  1 = 1
	            AND    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	            AND    COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	            AND    NVL(A.USE_YN, 'Y') = 'Y'
	            AND    'N' = NVL(MOM_COMMON_PKG.FN_GET_CODE_VALUES(DIVISION_CD, COMPANY_CD, 'MATERIAL_MASTER_SETUP', 'VENDOR_ITEM_USE_FLAG'), 'N')
	            <if test="key != null and key != ''">
	            AND    A.ITEM_ID = #{key, jdbcType=VARCHAR}
	            </if>
	            UNION ALL
	            SELECT  A.ITEM_ID AS ID
	                 ,  A.ITEM_ID ||'('|| B.ITEM_NAME||')' AS TEXT
	                 ,  B.ITEM_TYPE
	                 ,  B.UNIT
	                 ,  B.SPECIFICATION
	                 ,  B.IN_LOCATION_ID
	                 , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(B.DIVISION_CD, B.COMPANY_CD, B.IN_LOCATION_ID) FROM DUAL) AS IN_LOCATION_NAME
	                 ,  B.FREE_OFFER_FLAG
	                 ,  NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}, 'FREE_OFFER_FLAG', B.FREE_OFFER_FLAG)
					   	    FROM DUAL), 'N') AS FREE_OFFER_FLAG_NAME
	            FROM    MOM_PRODUCT_CLASS_REL A
	                 ,  MOM_ITEM_DEFINITION B
	            WHERE   A.DIVISION_CD = B.DIVISION_CD
	            AND     A.ITEM_ID = B.ITEM_ID
	            AND     A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	            AND     A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	            AND     NVL(A.USE_YN, 'Y') = 'Y'
	            AND     NVL(B.USE_YN, 'Y') = 'Y'
	            AND     'Y' = NVL(MOM_COMMON_PKG.FN_GET_CODE_VALUES(A.DIVISION_CD, A.COMPANY_CD, 'MATERIAL_MASTER_SETUP', 'VENDOR_ITEM_USE_FLAG'), 'N')
	            <if test="key != null and key != ''">
	            AND    B.ITEM_ID = #{key, jdbcType=VARCHAR}
	            </if>
	            )
	    ORDER BY 1
    </select>
    
    <select id="get_comItemInPrice_list" resultType="camelMap" parameterType="java.util.HashMap">
    	SELECT  UNIT_PRICE
		  FROM  MOM_ITEM_IN_PRICE_V
		 WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND  COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND  VENDOR_CD = #{vendorCd, jdbcType=VARCHAR} 
		   AND  ITEM_ID = #{itemId, jdbcType=VARCHAR}
		   AND  MARKET_CD = #{marketCd, jdbcType=VARCHAR}
		   AND  CURRENCY_CD = #{currencyCd, jdbcType=VARCHAR}
		   AND  NVL(USE_YN, 'Y') = 'Y'
		   AND  TO_DATE(#{stateTime, jdbcType=VARCHAR}, 'YYYY-MM-DD') BETWEEN START_DATE AND END_DATE
    </select>
    
    <select id="get_comItemOutPrice_list" resultType="camelMap" parameterType="java.util.HashMap">
    	SELECT  UNIT_PRICE
		  FROM  MOM_ITEM_OUT_PRICE_V
		 WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND  COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND  VENDOR_CD = #{vendorCd, jdbcType=VARCHAR} 
		   AND  ITEM_ID = #{itemId, jdbcType=VARCHAR}
		   AND  MARKET_CD = #{marketCd, jdbcType=VARCHAR}
		   AND  CURRENCY_CD = #{currencyCd, jdbcType=VARCHAR}
		   AND  NVL(USE_YN, 'Y') = 'Y'
		   AND  TO_DATE(#{stateTime, jdbcType=VARCHAR}, 'YYYY-MM-DD') BETWEEN START_DATE AND END_DATE
    </select>
    
    <select id="get_comExchangeRate_list" resultType="camelMap" parameterType="java.util.HashMap">
        SELECT  UNIT_PRICE AS EXCHANGE_RATE
	      FROM  MOM_EXCHANGE_RATE
	     WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND  COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	       AND  CURRENCY_CD = #{currencyCd, jdbcType=VARCHAR}
	       AND  TO_DATE(#{stateTime, jdbcType=VARCHAR}, 'YYYY-MM-DD') BETWEEN START_DATE AND END_DATE
	</select>
	
	<select id="get_comFreeInputFlag_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.*
		  FROM (SELECT DISTINCT A.FACILITY_CD AS ID
		              , A.FACILITY_CD||'('||NVL(A.FACILITY_NAME, A.FACILITY_CD)||')' AS TEXT
		              , A.FACILITY_NAME AS NAME
		              , NVL((SELECT 'Y'
		                       FROM MOM_CODE
		                      WHERE CODE_CLASS_ID = 'FREE_LOCATION'
		                        AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		                        AND NVL(USE_YN, 'Y') = 'Y'
		                        AND CODE_ID = A.FACILITY_CD), 'N') AS FREE_INPUT_FLAG
		  	       FROM MOM_FACILITY A
			      WHERE 1 = 1
			        AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			        AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			        AND NVL(A.USE_YN, 'Y') = 'Y'
			        AND A.FACILITY_CLASS_CD NOT IN ('COMPANY', 'PLANT')
			      ORDER BY FACILITY_NAME) A
		<if test='flag == "N"'>
		 WHERE NVL(A.FREE_INPUT_FLAG, 'N') = 'N'
		</if>
		<if test='flag == "Y"'>
		 WHERE NVL(A.FREE_INPUT_FLAG, 'N') = 'Y'
		</if>
	</select>
	
	<select id="get_comEndPeriod_list" resultType="camelMap" parameterType="java.util.HashMap">
<!-- 		SELECT  NVL(TO_CHAR(MAX(LAST_DAY(TO_DATE(YEAR_MONTH, 'YYYY-MM')))+1, 'YYYY-MM-DD'),'N') AS END_PERIOD -->
<!--           FROM  MOM_ITEM_LAST_END -->
<!--          WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} -->
<!-- 		   AND  COMPANY_CD = #{companyCd, jdbcType=VARCHAR} -->
<!--            AND  BUY_SALE_FLAG = #{buySaleFlag, jdbcType=VARCHAR} -->
<!--            AND  END_FLAG = 'Y' -->

		SELECT TO_CHAR(MAX(A.END_PERIOD), 'YYYY-MM-DD') AS END_PERIOD
          FROM (
                SELECT CTRL_DATE AS END_PERIOD
                  FROM MOM_ITEM_STOCK_CTRL
                 WHERE 1=1
                   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                   AND DEPT_CD = ( SELECT MOM_COMMON_PKG.FN_GET_MENU_PARAM_1LEV(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR},  #{menuId, jdbcType=VARCHAR}) 
                                     FROM DUAL)
                UNION ALL
                SELECT TO_DATE('2000-01-01','yyyy-mm-dd') AS  END_PERIOD
                  FROM DUAL
               ) A
		        

    </select>
    
	<select id="get_file_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			   FILE_ID
			 , OLD_FILE_NAME
			 , NEW_FILE_NAME
			 , FILE_PATH
			 , FILE_SIZE
			 , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		FROM   MOM_FILE
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	    AND    ENTITY_NAME = #{entityName, jdbcType=VARCHAR}
	    AND    ENTITY_ID   = #{entityId, jdbcType=VARCHAR}
	    <if test='download == "Y"'>
	    AND    OLD_FILE_NAME = #{fileName, jdbcType=VARCHAR}
	    </if>
	</select>
	
	<insert id="create_file" parameterType="java.util.HashMap">
		INSERT INTO MOM_FILE (
			DIVISION_CD,
		    COMPANY_CD,
		    FILE_ID,
		    ENTITY_NAME,
		    ENTITY_ID,
		    FILE_CATEGORY,
		    FILE_PATH,
		    NEW_FILE_NAME,
		    OLD_FILE_NAME,
		    FILE_SIZE,
		    DOWN_COUNT,
		    DEFAULT_FLAG,
		    USE_YN,
		    DESCRIPTION,
		    REASON_CODE,
		    CREATE_DATE,
		    CREATE_BY,
		    UPDATE_DATE,
		    UPDATE_BY
		)
		VALUES (
		 	#{divisionCd, jdbcType=VARCHAR},
		 	#{companyCd, jdbcType=VARCHAR},
		 	#{fileId, jdbcType=VARCHAR},
		 	#{entityName, jdbcType=VARCHAR},
		 	#{entityId, jdbcType=VARCHAR},
		 	'0',
		 	#{filePath, jdbcType=VARCHAR},
		 	#{newFileName, jdbcType=VARCHAR},
		 	#{oldFileName, jdbcType=VARCHAR},
		 	#{fileSize, jdbcType=INTEGER},
		 	0,
		 	'0',
		 	'Y',
		 	#{description, jdbcType=VARCHAR},
		 	'0',
		 	MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
		 	#{createBy, jdbcType=VARCHAR},
		 	MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
		 	#{updateBy, jdbcType=VARCHAR}
		)
	</insert>
	
	<delete id="remove_file" parameterType="java.util.HashMap">
		DELETE FROM MOM_FILE
		WHERE
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		    AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		    AND FILE_ID     = #{fileId, jdbcType=VARCHAR}
	</delete>
	
	<update id="modify_file" parameterType="java.util.HashMap">
		UPDATE MOM_FILE 
		SET
			FILE_PATH       = #{filePath, jdbcType=VARCHAR},
		    NEW_FILE_NAME   = #{newFileName, jdbcType=VARCHAR},
		    OLD_FILE_NAME   = #{oldFileName, jdbcType=VARCHAR},
		    FILE_SIZE       = #{fileSize, jdbcType=INTEGER},
		    DOWN_COUNT      = 0,
		    DESCRIPTION     = #{description, jdbcType=VARCHAR},
		    UPDATE_DATE     = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
		    UPDATE_BY       = #{updateBy, jdbcType=VARCHAR}
		WHERE
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd,  jdbcType=VARCHAR}
			AND FILE_ID     = #{fileId,     jdbcType=VARCHAR}
	</update>

    <delete id="remove_delItemStockExTemp" parameterType="java.util.HashMap">
		DELETE FROM MOM_ITEM_STOCK_EX_TMP
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND IN_OUT_FLAG = #{inOutFlag, jdbcType=VARCHAR}
	</delete>
	
	<insert id="create_insItemStockExTemp" parameterType="java.util.HashMap">
		INSERT INTO MOM_ITEM_STOCK_EX_TMP
		(
			DIVISION_CD
		  , COMPANY_CD
		  , ITEM_ID
		  , VENDOR_CD
		  , LOCATION_CD
		  , QTY
		  , UNIT_PRICE
		  , CURRENCY_CD
		  , MARKET_CD
		  , STATE_TIME
		  , EXCHANGE_RATE
		  , INPUT_GROUP_ID
		  , ORDER_SEQ
		  , COST_FLAG
		  , IN_OUT_FLAG
		  , EXCEPTION_CD
		  , DESCRIPTION
		  , CREATE_DATE
		  , CREATE_BY
		)
		VALUES
		(
		   #{divisionCd, jdbcType=VARCHAR}
         , #{companyCd, jdbcType=VARCHAR}
         , #{itemId, jdbcType=VARCHAR}
         , #{vendorCd, jdbcType=VARCHAR}
         , #{locationInCd, jdbcType=VARCHAR}
         , #{qty, jdbcType=NUMERIC}
         , #{unitPrice, jdbcType=NUMERIC}
         , #{currencyCd, jdbcType=VARCHAR}
         , #{marketCd, jdbcType=VARCHAR}
         , TO_DATE(#{stateTime, jdbcType=VARCHAR}, 'YYYY-MM-DD')
         , #{exchangeRate, jdbcType=NUMERIC}
         , ''
         , #{orderSeq, jdbcType=NUMERIC}
         , #{costFlag, jdbcType=VARCHAR}
         , #{inOutFlag, jdbcType=VARCHAR}
         , #{inItemExcetionFlag, jdbcType=VARCHAR}
         , #{description, jdbcType=VARCHAR}
         , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
         , #{createBy, jdbcType=VARCHAR}
		)
	</insert>
	
	<update id="modify_insItemStockExTemp" parameterType="java.util.HashMap">
		UPDATE MOM_ITEM_STOCK_EX_TMP
		SET 
			QTY 			= #{qty, jdbcType=NUMERIC}
		WHERE 
			DIVISION_CD 	= #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD 	= #{companyCd, jdbcType=VARCHAR}
			AND ITEM_ID 	= #{itemId, jdbcType=VARCHAR}
			AND VENDOR_CD 	= #{vendorCd, jdbcType=VARCHAR}
			AND LOCATION_CD = #{locationInCd, jdbcType=VARCHAR}
	</update>
	
	<insert id="create_itemStockInException" statementType="CALLABLE">
	{
		CALL P_ITEM_STOCK_IN_EXCEPTION ( 
			 #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
		)
	}
	</insert>
	
	<!-- 자재,제품 반품 취소  -->
	<delete id="remove_returnHistTemp" parameterType="java.util.HashMap">
        DELETE FROM MOM_ITEM_RETURN_TEMP
         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND ITEM_RTN_TYPE = #{itemRtnType, jdbcType=VARCHAR}
           AND TNX_TYPE = #{tnxType, jdbcType=VARCHAR}
    </delete>
    
    <insert id="create_returnHistTemp" parameterType="java.util.HashMap">
        INSERT INTO MOM_ITEM_RETURN_TEMP
				    ( DIVISION_CD         
				    , COMPANY_CD          
				    , ITEM_RTN_TYPE
				    , ITEM_ID
					, LOCATION_CD
					, RETURN_QTY
					, MARKET_CODE
					, CURRENCY_CODE
					, UNIT_PRICE
					, EXCHANGE_RATE
					, RETURN_CATEGORY
					, RETURN_TYPE
					, VENDOR_CD
					, RETURN_DATE
					, DESCRIPTION
					, CREATE_DATE
					, CREATE_BY
					, TNX_TYPE
					, FROM_STOCK_INOUT_ID
					, TO_STOCK_INOUT_ID      
			        )
		VALUES
		          ( #{divisionCd, jdbcType=VARCHAR}
		          , #{companyCd, jdbcType=VARCHAR}
		          , #{itemRtnType, jdbcType=VARCHAR}
		          , #{itemId, jdbcType=VARCHAR}
		          , #{fromLocationCd, jdbcType=VARCHAR}
		          , #{qty, jdbcType=VARCHAR}
		          , #{marketCd, jdbcType=VARCHAR}
		          , #{currencyCd, jdbcType=VARCHAR}
		          , #{unitPrice, jdbcType=NUMERIC}
		          , #{exchangeRate, jdbcType=NUMERIC}
		          , #{ioCategory, jdbcType=VARCHAR}
		          , #{returnType, jdbcType=VARCHAR}
		          , #{toVendorCd, jdbcType=VARCHAR}
		          , TO_DATE(#{ioTime, jdbcType=VARCHAR}, 'YYYY-MM-DD')
		          , #{description, jdbcType=VARCHAR}
		          , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
		          , #{createBy, jdbcType=VARCHAR}
		          , #{tnxType, jdbcType=VARCHAR}
		          , #{fromStockInoutId, jdbcType=VARCHAR}
		          , #{toStockInoutId, jdbcType=VARCHAR}
		          )

    </insert>
	
	<resultMap id="excelPrintFormMap" type="HashMap">
      <result property="excelFileName" column="excel_file_name"/>
      <result property="excelFile" column="excel_file" jdbcType="CLOB" javaType="java.lang.String"/>
      <result property="description" column="description"/>
    </resultMap>
	
    <select id="get_comExcelPrintFormCall_list" resultMap="excelPrintFormMap" parameterType="java.util.HashMap">
        SELECT A.EXCEL_ID
             , A.EXCEL_FILE_NAME
             , A.EXCEL_FILE
             , A.DESCRIPTION
             , A.GROUP_COLUMN
             , A.LIST_ALLCOUNT
             , B.REPORT_EXCEL_PATH AS EXCEL_PATH
             , A.USE_YN
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'USE_FLAG', A.USE_YN) FROM DUAL) AS USE_YN_NAME
             , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(A.DIVISION_CD, A.COMPANY_CD, A.UPDATE_BY) FROM DUAL) AS UPDATE_BY_NAME
             , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
          FROM MOM_EXCEL A
             , MOM_PARAMETER B
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.DIVISION_CD = B.DIVISION_CD
           AND A.COMPANY_CD = B.COMPANY_CD
		  <if test="excelId != null and excelId != ''">
		   AND A.EXCEL_ID LIKE UPPER ('%' || #{excelId, jdbcType=VARCHAR} || '%')
		  </if>
		  <if test="excelFileName != null and excelFileName != ''">
		   AND A.EXCEL_FILE_NAME LIKE UPPER ('%' || #{excelFileName, jdbcType=VARCHAR} || '%')
		  </if>
		 ORDER BY A.EXCEL_ID
    </select>
    
    <insert id="create_excelPrintForm" parameterType="java.util.HashMap">
        INSERT INTO MOM_EXCEL
        (   DIVISION_CD
          , COMPANY_CD
          , EXCEL_ID
          , EXCEL_FILE_NAME
          , EXCEL_FILE
          , GROUP_COLUMN
          , LIST_ALLCOUNT
          , EXCEL_PATH
          , USE_YN
          , DESCRIPTION
          , CREATE_DATE
          , CREATE_BY
          , UPDATE_DATE
          , UPDATE_BY
        )
        VALUES
        (  #{divisionCd, jdbcType=VARCHAR}
         , #{companyCd, jdbcType=VARCHAR}
         , #{excelId, jdbcType=VARCHAR}
         , #{excelFileName, jdbcType=VARCHAR}
         , #{excelFile, jdbcType=VARCHAR}
         , #{groupColumn, jdbcType=VARCHAR}
         , #{listAllcount, jdbcType=INTEGER}
         , #{excelPath, jdbcType=VARCHAR}
         , #{useYn, jdbcType=VARCHAR}
         , #{description, jdbcType=VARCHAR}
         , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
         , #{createBy, jdbcType=VARCHAR}
         , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
         , #{createBy, jdbcType=VARCHAR}
        )
    </insert>
    
    <update id="modify_excelPrintForm" parameterType="java.util.HashMap">
       UPDATE MOM_EXCEL 
          SET EXCEL_FILE_NAME = #{excelFileName, jdbcType=VARCHAR}
        <if test="excelFile != null and excelFile != ''">
            , EXCEL_FILE      = #{excelFile, jdbcType=VARCHAR}
        </if>
            , GROUP_COLUMN    = #{groupColumn, jdbcType=VARCHAR}
            , LIST_ALLCOUNT   = #{listAllcount, jdbcType=INTEGER}
            , EXCEL_PATH      = #{excelPath, jdbcType=VARCHAR}
            , USE_YN          = #{useYn, jdbcType=VARCHAR}
            , DESCRIPTION     = #{description, jdbcType=VARCHAR}
            , UPDATE_DATE     = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
            , UPDATE_BY       = #{updateBy, jdbcType=VARCHAR}
        WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
          AND COMPANY_CD  = #{companyCd,  jdbcType=VARCHAR}
          AND EXCEL_ID    = #{excelId, jdbcType=VARCHAR}
    </update>
    
    <delete id="remove_excelPrintForm" parameterType="java.util.HashMap">
    	DELETE 
    	  FROM MOM_EXCEL
    	 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
    	   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
    	   AND EXCEL_ID = #{excelId, jdbcType=VARCHAR}
    </delete>

    <select id="get_comParameter_list" resultType="camelMap" parameterType="java.util.HashMap">
    	SELECT *
    	  FROM MOM_PARAMETER
    	 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
    	   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
    </select>
    
    <insert id="create_commonHistInsert" statementType="CALLABLE">
    {
        CALL P_COMMON_HIST_INSERT ( 
             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
           , #{tableId, mode=IN, jdbcType=VARCHAR}
           , #{cudFlag, mode=IN, jdbcType=VARCHAR}
           , #{createBy, mode=IN, jdbcType=VARCHAR}
           , #{colName1, mode=IN, jdbcType=VARCHAR}
           , #{colValue1, mode=IN, jdbcType=VARCHAR}
           , #{colName2, mode=IN, jdbcType=VARCHAR}
           , #{colValue2, mode=IN, jdbcType=VARCHAR}
           , #{colName3, mode=IN, jdbcType=VARCHAR}
           , #{colValue3, mode=IN, jdbcType=VARCHAR}
           , #{colName4, mode=IN, jdbcType=VARCHAR}
           , #{colValue4, mode=IN, jdbcType=VARCHAR}
           , #{colName5, mode=IN, jdbcType=VARCHAR}
           , #{colValue5, mode=IN, jdbcType=VARCHAR}
           , #{colName6, mode=IN, jdbcType=VARCHAR}
           , #{colValue6, mode=IN, jdbcType=VARCHAR}
           , #{colName7, mode=IN, jdbcType=VARCHAR}
           , #{colValue7, mode=IN, jdbcType=VARCHAR}
           , #{colName8, mode=IN, jdbcType=VARCHAR}
           , #{colValue8, mode=IN, jdbcType=VARCHAR}
        )
    }
    </insert>
    
    <select id="get_siteList_list" resultType="camelMap" parameterType="java.util.HashMap">
        SELECT A.DIVISION_CD
             , A.COMPANY_CD
             , B.CURRENCY_CD
          FROM MOM_SITE A
             , MOM_PARAMETER B
         WHERE A.DIVISION_CD = B.DIVISION_CD
           AND A.COMPANY_CD = B.COMPANY_CD
        <if test="divisionCd != null and divisionCd != ''">
           AND A.DIVISION_CD = #{divisionCd, mode=IN, jdbcType=VARCHAR}
        </if>
         ORDER BY DIVISION_CD   
    </select>    
    
    <select id="get_curItemStock_list" resultType="camelMap" parameterType="java.util.HashMap">
        SELECT CURRENT_QTY
          FROM MOM_ITEM_STOCK
         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
           AND LOCATION_CD = #{locationCd, jdbcType=VARCHAR}  
    </select>
    
    <select id="get_organizationCode_list" resultType="camelMap" parameterType="java.util.HashMap">
    	SELECT DISTINCT ORGANIZATION_CODE AS CODE
    	  FROM MOM_VENDOR_MAPPING
    	 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
    	   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
    </select>
    
    <select id="get_selectedOrganizationCode_list" resultType="camelMap" parameterType="java.util.HashMap">
    	SELECT DISTINCT ORGANIZATION_CODE AS CODE
    	  FROM MOM_VENDOR_MAPPING
    	 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
    	   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
    	   AND ORGANIZATION_CODE = #{organizationCd, jdbcType=VARCHAR}
    </select>
    
    <select id="get_scheduleGroupCode_list" resultType="camelMap" parameterType="java.util.HashMap">
   	    SELECT SCHEDULE_GROUP_CD AS CODE 
   	         , SCHEDULE_GROUP_CD || '(' || SCHEDULE_GROUP_NAME || ')' AS NAME
   	      FROM MOM_VENDOR_SCHEDULE_GROUP
         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
   	       AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND ORGANIZATION_CODE = #{organizationCode, jdbcType=VARCHAR}
         ORDER BY SCHEDULE_GROUP_CD
    </select>
    
    <delete id="remove_dataMultiDelTmp" parameterType="java.util.HashMap">
        DELETE FROM MOM_DATA_DEL_TMP
         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND MENU_ID = #{menuId, jdbcType=VARCHAR}
           AND TABLE_ID = #{tableId, jdbcType=VARCHAR}
    </delete>
    
    <insert id="create_dataMultiDelTmp" parameterType="java.util.HashMap">
        INSERT INTO MOM_DATA_DEL_TMP
	        ( DIVISION_CD  
			, COMPANY_CD   
			, MENU_ID      
			, TABLE_ID     
			, COL_ID1      
			, VALUE1       
			, COL_ID2      
			, VALUE2       
			, COL_ID3      
			, VALUE3       
			, COL_ID4      
			, VALUE4       
			, COL_ID5      
			, VALUE5       
			, COL_ID6      
			, VALUE6       
			, COL_ID7      
			, VALUE7       
			, COL_ID8      
			, VALUE8       
			, COL_ID9      
			, VALUE9       
			, COL_ID10     
			, VALUE10      
			, CREATE_DATE  
			, CREATE_BY    
	        )
        VALUES
	        (  #{divisionCd, jdbcType=VARCHAR}
	         , #{companyCd, jdbcType=VARCHAR}
	         , #{menuId, jdbcType=VARCHAR}
	         , #{tableId, jdbcType=VARCHAR}
	         , #{colId1, jdbcType=VARCHAR}
	         , #{value1, jdbcType=VARCHAR}
	         , #{colId2, jdbcType=VARCHAR}
	         , #{value2, jdbcType=VARCHAR}
	         , #{colId3, jdbcType=VARCHAR}
	         , #{value3, jdbcType=VARCHAR}
	         , #{colId4, jdbcType=VARCHAR}
	         , #{value4, jdbcType=VARCHAR}
	         , #{colId5, jdbcType=VARCHAR}
	         , #{value5, jdbcType=VARCHAR}
	         , #{colId6, jdbcType=VARCHAR}
	         , #{value6, jdbcType=VARCHAR}
	         , #{colId7, jdbcType=VARCHAR}
	         , #{value7, jdbcType=VARCHAR}
	         , #{colId8, jdbcType=VARCHAR}
	         , #{value8, jdbcType=VARCHAR}
	         , #{colId9, jdbcType=VARCHAR}
	         , #{value9, jdbcType=VARCHAR}
	         , #{colId10, jdbcType=VARCHAR}
	         , #{value10, jdbcType=VARCHAR}
	         , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
	         , #{createBy, jdbcType=VARCHAR}
	        )
    </insert>
    
    <insert id="create_commonMultiDelProc" statementType="CALLABLE">
    {
        CALL P_COMMON_MULTI_DEL ( 
             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
           , #{menuId, mode=IN, jdbcType=VARCHAR}
           , #{tableId, mode=IN, jdbcType=VARCHAR}
           , #{updateBy, mode=IN, jdbcType=VARCHAR}
        )
    }
    </insert>
    
    <select id="get_horizon_list" resultType="camelMap" parameterType="java.util.HashMap">
   	    SELECT DEMAND_HORIZON
   	    	 , PLAN_HORIZON
	      FROM TH_MST_PLAN
	     WHERE MASTER_ID = #{divisionCd, jdbcType=VARCHAR}
	       AND PLAN_ID = #{planId, jdbcType=VARCHAR}
    </select>
    
    <select id="get_ifDbInfo_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT T.DIVISION_CD
		     , T.COMPANY_CD
		     , T.TABLE_ID
		     , T.TRANS_TYPE
		     , T.DB_ID 
		     , T.QUERY_ID
		     , D.DB_TYPE 
		     , D.DB_HOST
		     , D.DB_PORT
		     , D.DB_NAME
		     , D.USER_ID AS USER_ID1
		     , D.PASSWORD
		     <!-- , 'jdbc:sqlserver:' ||  D.DB_HOST || ';databaseName=' || D.DB_NAME ||';user=' || D.USER_ID || ';password=' || D.PASSWORD AS CONN_URL -->
		  FROM MOM_IF_TABLE_MGT T, MOM_IF_DB_MGT D
		 WHERE T.DIVISION_CD = D.DIVISION_CD
		   AND T.COMPANY_CD = D.COMPANY_CD
		   AND T.DB_ID = D.DB_ID
		   AND T.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND T.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   <if test = "dbType != '' and dbType != null">
		   AND D.DB_TYPE = #{dbType, jdbcType=VARCHAR}
		   </if>
    </select>
    
    <insert id="create_ifDbInfo" statementType="CALLABLE" parameterType="java.util.HashMap">
   	{ 	
   		CALL 
   		DECLARE
			exist1 NUMBER := 0;
			exist2 NUMBER := 0;
   		BEGIN 
   			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
			SELECT
				CASE 
					WHEN COUNT(DB_ID) = 0 THEN 0
					ELSE 1 
				END  
				INTO 
					exist1
  			FROM 
  				MOM_IF_DB_MGT
 			WHERE 
 				DB_ID = #{dbId, jdbcType=VARCHAR}
 			;
			
			SELECT
				CASE 
					WHEN COUNT(TABLE_ID) = 0 THEN 0
					ELSE 1 
				END  
				INTO 
					exist2
  			FROM 
  				MOM_IF_TABLE_MGT
 			WHERE 
 				DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
 				AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
 				AND TABLE_ID = #{tableId, jdbcType=VARCHAR}
	   		;
   			
			IF exist1 > 0 THEN
				UPDATE 
					MOM_IF_DB_MGT
				SET
					DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
					, COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
					, DB_TYPE =  #{dbType, jdbcType=VARCHAR}
					, DB_HOST = #{dbHost, jdbcType=VARCHAR}
					, DB_PORT = #{dbPort, jdbcType=VARCHAR}
					, DB_NAME = #{dbName, jdbcType=VARCHAR}
					, USER_ID = #{userId1, jdbcType=VARCHAR}
					, PASSWORD = #{password, jdbcType=VARCHAR}
					, DESCRIPTION = #{description, jdbcType=VARCHAR}
					, UPDATE_DATE = SYSDATE
					, UPDATE_BY = #{userId, jdbcType=VARCHAR}
				WHERE
					DB_ID = #{dbId, jdbcType=VARCHAR}
				;
			ELSE
				INSERT INTO MOM_IF_DB_MGT (
					DB_ID
					, DIVISION_CD
					, COMPANY_CD
					, DB_TYPE
					, DB_HOST
					, DB_PORT
					, DB_NAME
					, USER_ID
					, PASSWORD
					<!-- , DESCRIPTION -->
					, CREATE_DATE
					, CREATE_BY
					, UPDATE_DATE
					, UPDATE_BY
				)
				VALUES (
					  #{dbId, jdbcType=VARCHAR}
					, #{divisionCd, jdbcType=VARCHAR}
					, #{companyCd, jdbcType=VARCHAR}
					, #{dbType, jdbcType=VARCHAR}
					, #{dbHost, jdbcType=VARCHAR}
					, #{dbPort, jdbcType=VARCHAR}
					, #{dbName, jdbcType=VARCHAR}
					, #{userId1, jdbcType=VARCHAR}
					, #{password, jdbcType=VARCHAR}
					<!-- , #{description, jdbcType=VARCHAR} -->
					, SYSDATE
					, #{userId, jdbcType=VARCHAR}
					, SYSDATE
					, #{userId, jdbcType=VARCHAR}
				);
			END IF;
	    	
			IF exist2 > 0 THEN
				UPDATE 
					MOM_IF_TABLE_MGT
				SET
					TRANS_TYPE =  #{transType, jdbcType=VARCHAR}
					, DB_ID = #{dbId, jdbcType=VARCHAR}
					, DESCRIPTION = #{description, jdbcType=VARCHAR}
					, UPDATE_DATE = SYSDATE
					, UPDATE_BY = #{userId, jdbcType=VARCHAR}
				WHERE
					DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
					AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
					AND TABLE_ID = #{tableId, jdbcType=VARCHAR}	
				;
			ELSE
				INSERT INTO MOM_IF_TABLE_MGT (
					DIVISION_CD
					, COMPANY_CD
					, TABLE_ID
					, TRANS_TYPE
					, DB_ID
					, QUERY_ID
					<!-- , DESCRIPTION -->
					, CREATE_DATE
					, CREATE_BY
					, UPDATE_DATE
					, UPDATE_BY
				)
				VALUES (
					  #{divisionCd, jdbcType=VARCHAR}
					, #{companyCd, jdbcType=VARCHAR}
					, #{tableId, jdbcType=VARCHAR}
					, #{transType, jdbcType=VARCHAR}
					, #{dbId, jdbcType=VARCHAR}
					, #{queryId, jdbcType=VARCHAR}
					<!-- , #{description, jdbcType=VARCHAR} -->
					, SYSDATE
					, #{userId, jdbcType=VARCHAR}
					, SYSDATE
					, #{userId, jdbcType=VARCHAR}
				);
	    	END IF;
			
	    	SELECT
				CASE 
					WHEN COUNT(TABLE_ID) = 0 THEN 'E'
					ELSE 'S' 
				END  
				INTO 
					#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
  			FROM 
  				MOM_IF_TABLE_MGT
 			WHERE 
 				DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
 				AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
 				AND TABLE_ID = #{tableId, jdbcType=VARCHAR}
	   		;		   
   		END
   	}
    </insert>
    
    <!-- <insert id="create_ifDBMgt" parameterType="java.util.HashMap">
    	INSERT INTO MOM_IF_DB_MGT (
    		DB_ID
    		, DIVISION_CD
    		, COMPANY_CD
    		, DB_TYPE
    		, DB_HOST
    		, DB_PORT
    		, DB_NAME
    		, USER_ID
    		, PASSWORD
    		, DESCRIPTION
    		, CREATE_DATE
    		, CREATE_BY
    		, UPDATE_DATE
    		, UPDATE_BY
    	)
    	VALUES (
    		  #{dbId, jdbcType=VARCHAR}
    		, #{divisionCd, jdbcType=VARCHAR}
    		, #{companyCd, jdbcType=VARCHAR}
    		, #{dbType, jdbcType=VARCHAR}
    		, #{dbHost, jdbcType=VARCHAR}
    		, #{dbPort, jdbcType=VARCHAR}
    		, #{dbName, jdbcType=VARCHAR}
    		, #{userId1, jdbcType=VARCHAR}
    		, #{password, jdbcType=VARCHAR}
    		, #{description, jdbcType=VARCHAR}
    		, SYSDATE
    		, #{userId, jdbcType=VARCHAR}
    		, SYSDATE
    		, #{userId, jdbcType=VARCHAR}
    	)
    </insert> -->   
    
    <update id="modify_ifDbInfo" statementType="CALLABLE" parameterType="java.util.HashMap">
    { 	
    	CALL 
   		DECLARE 
   		BEGIN 
   			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
   		END
   	}
    </update>
    
    <!-- <update id="modify_ifDBMgt" parameterType="java.util.HashMap"> 
    	UPDATE 
    		MOM_IF_DB_MGT
    	SET
    		DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
    		, COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
    		, DB_TYPE =  #{dbType, jdbcType=VARCHAR}
    		, DB_HOST = #{dbHost, jdbcType=VARCHAR}
    		, DB_PORT = #{dbPort, jdbcType=VARCHAR}
    		, DB_NAME = #{dbName, jdbcType=VARCHAR}
    		, USER_ID = #{userId1, jdbcType=VARCHAR}
    		, PASSWORD = #{password, jdbcType=VARCHAR}
    		, DESCRIPTION = #{description, jdbcType=VARCHAR}
    		, UPDATE_DATE = SYSDATE
    		, UPDATE_BY = #{userId, jdbcType=VARCHAR}
    	WHERE
    		DB_ID = #{dbId, jdbcType=VARCHAR}
    </update> -->
    
    <!-- <insert id="create_ifTableMgt" parameterType="java.util.HashMap">
    	INSERT INTO MOM_IF_TABLE_MGT (
    		DIVISION_CD
    		, COMPANY_CD
    		, TABLE_ID
    		, TRANS_TYPE
    		, DB_ID
    		, DESCRIPTION
    		, CREATE_DATE
    		, CREATE_BY
    		, UPDATE_DATE
    		, UPDATE_BY
    	)
    	VALUES (
    		  #{divisionCd, jdbcType=VARCHAR}
    		, #{companyCd, jdbcType=VARCHAR}
    		, #{tableId, jdbcType=VARCHAR}
    		, #{transType, jdbcType=VARCHAR}
    		, #{dbId, jdbcType=VARCHAR}
    		, #{description, jdbcType=VARCHAR}
    		, SYSDATE
    		, #{userId, jdbcType=VARCHAR}
    		, SYSDATE
    		, #{userId, jdbcType=VARCHAR}
    	)
    </insert> -->   
    
    <!-- <update id="modify_ifTableMgt" parameterType="java.util.HashMap"> 
    	UPDATE 
    		MOM_IF_TABLE_MGT
    	SET
    		TRANS_TYPE =  #{transType, jdbcType=VARCHAR}
    		, DB_ID = #{dbId, jdbcType=VARCHAR}
    		, DESCRIPTION = #{description, jdbcType=VARCHAR}
    		, UPDATE_DATE = SYSDATE
    		, UPDATE_BY = #{userId, jdbcType=VARCHAR}
    	WHERE
    		DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
    		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
    		AND TABLE_ID = #{tableId, jdbcType=VARCHAR}
    </update> -->
    
    <delete id="remove_ifDbInfo" parameterType="java.util.HashMap">
    	DELETE 
    		FROM MOM_IF_TABLE_MGT
	    WHERE
    		DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
    		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
    		AND TABLE_ID = #{tableId, jdbcType=VARCHAR}
    </delete>
    
    <insert id="create_ifItemDefinitionSend" parameterType="java.util.HashMap">
    {
        INSERT INTO IF_MOM_ITEM_DEFINITION_R
        ( DIVISION_CD              
		, COMPANY_CD               
		, ITEM_ID                  
		, ITEM_NAME                
		, ITEM_GROUP_CODE          
		, ITEM_TYPE                
		, SPECIFICATION            
		, VENDOR_CD                
		, DEPARTURE_VENDOR_CD      
		, UNIT_PRICE               
		, UNIT                     
		, PURCHASE_UNIT            
		, UNIT_QTY                 
		, CONVERSION_UNIT_QTY      
		, MOQ                      
		, MOM                      
		, SAFETY_STOCK_QTY         
		, SAFETY_STOCK_DAY         
		, SAFETY_STOCK_DAY_UOM     
		, PROD_MIN_LOT_SIZE        
		, PROD_MAX_LOT_SIZE        
		, PROD_INCREMENT_LOT_SIZE  
		, DEMAND_LOT_SIZE          
		, IS_PHANTOM               
		, ACTIVATION_FLAG          
		, IS_FINITE_FLAG           
		, FINITE_TERM              
		, FINITE_TERM_UOM          
		, IN_LOCATION_ID           
		, OUT_LOCATION_ID          
		, TEST_REPORT_FLAG         
		, IQC_FLAG                 
		, OQC_FLAG                 
		, PQC_FLAG                 
		, RP_ITEM_ID               
		, VENDOR_ITEM_ID           
		, ALT_ITEM_ID              
		, ITEM_CATEGORY            
		, PURCHASE_TYPE            
		, ITEM_USER_ID             
		, PACKING_SIZE_WIDTH       
		, PACKING_SIZE_HEIGHT      
		, MATERIAL_WEIGHT          
		, PALLET_WEIGHT            
		, UNIT_WEIGHT              
		, BOX_WEIGHT               
		, ITEM_GROUP_LARGE         
		, ITEM_GROUP_MEDIUM        
		, ITEM_GROUP_SMALL         
		, PRE_BUILD_TERM           
		, LEAD_TIME                
		, TRACKING_FLAG            
		, ORDER_METHOD             
		, ITEM_GRADE               
		, BAD_LEVEL                
		, STANDARD_OUT_QTY         
		, DEFECT_RATE              
		, BY_PRODUCT_ITEM_ID       
		, USE_YN                   
		, DESCRIPTION              
		, CREATE_DATE              
		, CREATE_BY                
		, UPDATE_DATE              
		, UPDATE_BY                
		, TID                      
		, ATTRIBUTE1               
		, ATTRIBUTE2               
		, ATTRIBUTE3               
		, ATTRIBUTE4               
		, ATTRIBUTE5               
		, ATTRIBUTE6               
		, ATTRIBUTE7               
		, ATTRIBUTE8               
		, ATTRIBUTE9               
		, ATTRIBUTE10              
		, ATTRIBUTE11              
		, ATTRIBUTE12              
		, ATTRIBUTE13              
		, ATTRIBUTE14              
		, ATTRIBUTE15              
		, FREE_OFFER_FLAG          
		, CONVERSION_UNIT          
		, TOOL                     
		, PRESS_LINE               
		, SALES_FREE_FLAG          
		, POP_MAKE_LOT_QTY         
		, POP_INPUT_TYPE           
		, POP_CT_QTY               
		, POP_GT_LABELID           
		, POP_CT_LABELID           
		, POP_PALLET_LABELID       
		, POP_EAN                  
		, POP_UPC                  
		, POP_DESTINATION          
		, POP_MADEBY               
		, POP_GANBAN_LABELID       
		, LABELDESC                
		, LABELSPEC                
		, TRANSFER_DATE            
		, TRANSFER_FLAG
		, CRUD_FLAG    )
		SELECT DIVISION_CD              
	         , COMPANY_CD               
	         , ITEM_ID                  
	         , ITEM_NAME                
	         , ITEM_GROUP_CODE          
	         , ITEM_TYPE                
	         , SPECIFICATION            
	         , VENDOR_CD                
	         , DEPARTURE_VENDOR_CD      
	         , UNIT_PRICE               
	         , UNIT                     
	         , PURCHASE_UNIT            
	         , UNIT_QTY                 
	         , CONVERSION_UNIT_QTY      
	         , MOQ                      
	         , MOM                      
	         , SAFETY_STOCK_QTY         
	         , SAFETY_STOCK_DAY         
	         , SAFETY_STOCK_DAY_UOM     
	         , PROD_MIN_LOT_SIZE        
	         , PROD_MAX_LOT_SIZE        
	         , PROD_INCREMENT_LOT_SIZE  
	         , DEMAND_LOT_SIZE          
	         , IS_PHANTOM               
	         , ACTIVATION_FLAG          
	         , IS_FINITE_FLAG           
	         , FINITE_TERM              
	         , FINITE_TERM_UOM          
	         , IN_LOCATION_ID           
	         , OUT_LOCATION_ID          
	         , TEST_REPORT_FLAG         
	         , IQC_FLAG                 
	         , OQC_FLAG                 
	         , PQC_FLAG                 
	         , RP_ITEM_ID               
	         , VENDOR_ITEM_ID           
	         , ALT_ITEM_ID              
	         , ITEM_CATEGORY            
	         , PURCHASE_TYPE            
	         , ITEM_USER_ID             
	         , PACKING_SIZE_WIDTH       
	         , PACKING_SIZE_HEIGHT      
	         , MATERIAL_WEIGHT          
	         , PALLET_WEIGHT            
	         , UNIT_WEIGHT              
	         , BOX_WEIGHT               
	         , ITEM_GROUP_LARGE         
	         , ITEM_GROUP_MEDIUM        
	         , ITEM_GROUP_SMALL         
	         , PRE_BUILD_TERM           
	         , LEAD_TIME                
	         , TRACKING_FLAG            
	         , ORDER_METHOD             
	         , ITEM_GRADE               
	         , BAD_LEVEL                
	         , STANDARD_OUT_QTY         
	         , DEFECT_RATE              
	         , BY_PRODUCT_ITEM_ID       
	         , USE_YN                   
	         , DESCRIPTION              
	         , CREATE_DATE              
	         , CREATE_BY                
	         , UPDATE_DATE              
	         , UPDATE_BY                
	         , TID                      
	         , ATTRIBUTE1               
	         , ATTRIBUTE2               
	         , ATTRIBUTE3               
	         , ATTRIBUTE4               
	         , ATTRIBUTE5               
	         , ATTRIBUTE6               
	         , ATTRIBUTE7               
	         , ATTRIBUTE8               
	         , ATTRIBUTE9               
	         , ATTRIBUTE10              
	         , ATTRIBUTE11              
	         , ATTRIBUTE12              
	         , ATTRIBUTE13              
	         , ATTRIBUTE14              
	         , ATTRIBUTE15              
	         , FREE_OFFER_FLAG          
	         , CONVERSION_UNIT          
	         , TOOL                     
	         , PRESS_LINE               
	         , SALES_FREE_FLAG          
	         , POP_MAKE_LOT_QTY         
	         , POP_INPUT_TYPE           
	         , POP_CT_QTY               
	         , POP_GT_LABELID           
	         , POP_CT_LABELID           
	         , POP_PALLET_LABELID       
	         , POP_EAN                  
	         , POP_UPC                  
	         , POP_DESTINATION          
	         , POP_MADEBY               
	         , POP_GANBAN_LABELID       
	         , LABELDESC                
	         , LABELSPEC                
	         , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})            
	         , 'N'  
	         , #{crudFlag, jdbcType=VARCHAR}
	     FROM MOM_ITEM_DEFINITION
	    WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	      AND COMPANYC_CD = #{companyCd, jdbcType=VARCHAR}
	      AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
    }
    </insert>
    
</mapper>