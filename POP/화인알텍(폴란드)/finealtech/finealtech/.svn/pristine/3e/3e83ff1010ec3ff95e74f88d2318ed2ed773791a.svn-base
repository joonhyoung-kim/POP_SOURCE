<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.shipping.productShippingStatus">
	<select id="get_productShippingStatus_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.* 
    	  FROM( SELECT A.IO_CATEGORY
    	   			 , A.IO_CATEGORY_NAME
    	  			 , A.CUSTOMER_PO_ID 
				     , A.SALES_ORDER_ID
				     , A.SALES_ITEM_ID            
				     , A.ITEM_ID
				     , A.ITEM_NAME
				     , A.ORDER_STATE
				     , A.ORDER_STATE_NAME
				     , A.ORDER_QTY                 
				     , A.SHIP_QTY                   
				     , A.CANCEL_QTY                
				     , A.INOUT_QTY
				     , A.INOUT_CANCEL_QTY
				     , (A.ORDER_QTY - A.SHIP_QTY - A.CANCEL_QTY) AS REMAINED_QTY
				     , A.CONVERSION_UNIT_QTY
				     , TO_CHAR(TRUNC(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(A.DIVISION_CD, A.COMPANY_CD)), 'YYYY-MM-DD') AS CONFIRM_DATE 
				     , A.FROM_LOCATION_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD
				                                                  , A.COMPANY_CD
				                                                  , A.FROM_LOCATION_CD)
				        FROM    DUAL ) AS  FROM_LOCATION_NAME
				     , A.TO_LOCATION_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD
				                                                  , A.COMPANY_CD
				                                                  , A.TO_LOCATION_CD)
				        FROM    DUAL ) AS  TO_LOCATION_NAME
				     , A.VENDOR_CD
				     , A.VENDOR_NAME
				     , A.DESTINATION_CD
				     , A.DESTINATION_NAME
				     , A.ITEM_STOCK_ID
				     , A.ITEM_STOCK_INOUT_ID   
				     , TO_CHAR(A.IO_TIME, 'YYYY-MM-DD') AS IO_TIME
				     , A.DUE_DATE
				     , A.MARKET_CD
				     , A.MARKET_NAME
				     , A.CURRENCY_CD             
				     , A.CURRENCY_NAME
				     , A.ITEM_OUTPUT_ID
				     , A.CREATE_BY
				     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
				                                              , A.COMPANY_CD
				                                              , A.CREATE_BY)
				        FROM   DUAL)                      AS CREATE_BY_NAME                                             
				     , A.CREATE_DATE
				     , A.INOUT_PRICE 
				     , A.UNIT_PRICE
		             , NVL(A.FOREIGN_TOTAL_PRICE, (A.INOUT_QTY * A.UNIT_PRICE)) AS FOREIGN_AMT    <!-- 외화금액(수량 * 단가)    -->
				     , A.ORDER_GUBUN
				     , A.ORDER_GUBUN_NAME
				     , A.DIVISION_CD
				     , A.COMPANY_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_CURRENT_STOCK( A.DIVISION_CD
				                                                  , A.COMPANY_CD
				                                                  , A.ITEM_ID
				                                                  , A.TO_LOCATION_CD)
				        FROM    DUAL )                    AS  CURRENT_QTY
				     ,  CASE WHEN A.CURRENCY_CD = A.DEFAULT_CURRENCY THEN
				            1 
				        ELSE
				            A.SHIP_EXCHANGE_RATE                      <!-- A.EXCHANGE_RATE       -->
				        END    AS EXCHANGE_RATE  
				     ,  A.PO_NO
				     ,  A.DEPARTURE_NUMBER
				     ,  A.DEPARTURE_CANCEL_QTY
				     ,  A.DEPARTURE_CANCEL_DATE    
				     ,  A.B2BI_CUSTOMER_FLAG
				     ,  A.ITEM_INPUT_ID 				  AS TRANSACTION_ID
				     ,  A.ITEM_GROUP_LARGE
				     ,  A.ITEM_GROUP_MEDIUM
				     ,  A.DESCRIPTION       
				     ,  A.CONVERSION_UNIT
				     ,  PD.PRINT_GROUP_ID
                     ,  TO_CHAR(PD.PRINT_DATE, 'YYYY-MM-DD') AS PRINT_DATE
                     ,  A.SPECIFICATION
				FROM   (SELECT I.IO_CATEGORY
							 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(I.DIVISION_CD, I.COMPANY_CD, 'IO_CATEGORY', I.IO_CATEGORY ) FROM DUAL) AS IO_CATEGORY_NAME 
							 , O.CUSTOMER_PO_ID 
				             , O.SALES_ORDER_ID
				             , O.SALES_ITEM_ID 
				             , O.ITEM_ID
				             , O.ITEM_NAME
				             , O.ORDER_QTY 
				             , NVL(O.SHIP_QTY, 0)         AS SHIP_QTY
				             , NVL(O.CANCEL_QTY, 0)       AS CANCEL_QTY
				             , I.QTY                      AS INOUT_QTY
				             , I.PREV_LOCATION_CD         AS FROM_LOCATION_CD
				             , I.LOCATION_CD              AS TO_LOCATION_CD
				             , O.VENDOR_CD
				             , O.VENDOR_NAME
				             , O.DESTINATION_CD
				             , O.DESTINATION_NAME
				             , I.ITEM_STOCK_ID
				             , I.ITEM_STOCK_INOUT_ID   
				             , I.IO_TIME
				             , DECODE(O.CURRENCY_CD, P.CURRENCY_CD, I.UNIT_PRICE, I.FOREIGN_UNIT_PRICE)  AS UNIT_PRICE
				             , O.MARKET_CD 
				             , O.MARKET_NAME
				             , O.CURRENCY_CD             
				             , O.CURRENCY_NAME
				             , I.ITEM_OUTPUT_ID
				             , I.CREATE_BY
				             , TO_CHAR(I.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
				             , I.INOUT_PRICE
				             , I.EXCHANGE_RATE           AS SHIP_EXCHANGE_RATE
				             , O.ORDER_STATE             AS ORDER_STATE
				             , O.ORDER_STATE_NAME        AS ORDER_STATE_NAME
				             , TO_CHAR(O.DUE_DATE, 'YYYY-MM-DD')     AS DUE_DATE
				             , O.ORDER_GUBUN
				             , O.ORDER_GUBUN_NAME
				             , O.DIVISION_CD
				             , O.COMPANY_CD
				             , P.CURRENCY_CD             AS DEFAULT_CURRENCY  
		<!-- 		             , (SELECT MOM_COMMON_PKG.FN_GET_SALES_PRICE( O.DIVISION_CD -->
		<!-- 		                                                        , O.COMPANY_CD -->
		<!-- 		                                                        , O.VENDOR_CD -->
		<!-- 		                                                        , O.ITEM_ID -->
		<!-- 		                                                        , O.MARKET_CD -->
		<!-- 		                                                        , O.CURRENCY_CD -->
		<!-- 		                                                        , TRUNC(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(O.DIVISION_CD, O.COMPANY_CD)))   -->
		<!-- 		                 FROM   DUAL )            AS UNIT_PRICE -->
		<!-- 		             , (SELECT MOM_COMMON_PKG.FN_GET_CURRENT_EXCHANGE_RATE( O.DIVISION_CD -->
		<!-- 		                                                                  , O.COMPANY_CD -->
		<!-- 		                                                                  , O.CURRENCY_CD -->
		<!-- 		                                                                  , TRUNC(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(O.DIVISION_CD, O.COMPANY_CD)))   -->
		<!-- 		                  FROM   DUAL )            AS EXCHANGE_RATE -->
				             , O.CUSTOMER_PO_NO          AS PO_NO
				             , I.ITEM_DEPARTURE_ID  AS DEPARTURE_NUMBER
				             , DC.DEPARTURE_CANCEL_QTY
				             , DC.DEPARTURE_CANCEL_DATE 
				             , (SELECT MOM_COMMON_PKG.FN_GET_B2BI_CUSTOMER_FLAG( O.DIVISION_CD
				                                                               , O.COMPANY_CD
				                                                               , O.VENDOR_CD)
				                  FROM   DUAL ) AS B2BI_CUSTOMER_FLAG   
				             , I.ITEM_INPUT_ID
				             , I.FOREIGN_TOTAL_PRICE
			                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.DIVISION_CD, MI.COMPANY_CD, 'ITEM_GROUP_LARGE', MI.ITEM_GROUP_LARGE) FROM DUAL) AS ITEM_GROUP_LARGE
			                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.DIVISION_CD, MI.COMPANY_CD, 'ITEM_GROUP_MEDIUM', MI.ITEM_GROUP_MEDIUM) FROM DUAL) AS ITEM_GROUP_MEDIUM        
				             , I.DESCRIPTION
				             , I.CONVERSION_UNIT_QTY
				             , MI.CONVERSION_UNIT
				             , (SELECT SUM(QTY) FROM MOM_ITEM_STOCK_INOUT 
				                 WHERE DIVISION_CD = I.DIVISION_CD 
				                   AND COMPANY_CD = I.COMPANY_CD 
				                   AND IO_TYPE = I.IO_TYPE 
				                   AND PREV_STOCK_INOUT_ID = I.ITEM_STOCK_INOUT_ID) AS INOUT_CANCEL_QTY
				             , MI.SPECIFICATION
				           FROM   MOM_SALES_ORDER_V O
				                , MOM_ITEM_STOCK_INOUT I
				                , MOM_PARAMETER P
				                , MOM_B2BI_DEPARTURE_CANCEL_V DC
				                , MOM_ITEM_DEFINITION MI
				           WHERE  O.DIVISION_CD    = I.DIVISION_CD
					       AND    O.COMPANY_CD     = I.COMPANY_CD
					       AND    O.SALES_ORDER_ID = I.ITEM_ORDER_ID
					       AND    O.DIVISION_CD    = P.DIVISION_CD
					       AND    O.COMPANY_CD     = P.COMPANY_CD
					       AND    I.DIVISION_CD    = DC.DIVISION_CD(+)
					       AND    I.PO_NO 		   = DC.PO_NO(+)
					       AND	  I.ITEM_INPUT_ID  = DC.TRANSACTION_ID(+)
					       AND    I.DIVISION_CD    = MI.DIVISION_CD(+)
					       AND    I.COMPANY_CD     = MI.COMPANY_CD(+)
					       AND    I.ITEM_ID        = MI.ITEM_ID(+)
				           AND    I.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
				           AND    I.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
				           AND    I.IO_TYPE = 'I'
				           AND    I.IO_CATEGORY IN ('S001','S002')
		        UNION ALL 
                       SELECT I.IO_CATEGORY
                        , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(I.DIVISION_CD, I.COMPANY_CD, 'IO_CATEGORY', I.IO_CATEGORY ) FROM DUAL) AS IO_CATEGORY_NAME 
                         ,O.CUSTOMER_PO_ID 
                         , O.SALES_ORDER_ID
                         , O.SALES_ITEM_ID 
                         , O.ITEM_ID
                         , O.ITEM_NAME
                         , O.ORDER_QTY 
                         , NVL(O.SHIP_QTY, 0)         AS SHIP_QTY
                         , NVL(O.CANCEL_QTY, 0)       AS CANCEL_QTY
                         , I.QTY                      AS INOUT_QTY
                         , I.PREV_LOCATION_CD         AS FROM_LOCATION_CD
                         , I.LOCATION_CD              AS TO_LOCATION_CD
                         , O.VENDOR_CD
                         , O.VENDOR_NAME
                         , O.DESTINATION_CD
                         , O.DESTINATION_NAME
                         , I.ITEM_STOCK_ID
                         , I.ITEM_STOCK_INOUT_ID   
                         , I.IO_TIME
                         , DECODE(O.CURRENCY_CD, P.CURRENCY_CD, I.UNIT_PRICE, I.FOREIGN_UNIT_PRICE)  AS UNIT_PRICE
                         , O.MARKET_CD 
                         , O.MARKET_NAME
                         , O.CURRENCY_CD             
                         , O.CURRENCY_NAME
                         , I.ITEM_OUTPUT_ID
                         , I.CREATE_BY
                         , TO_CHAR(I.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
                         , I.INOUT_PRICE
                         , I.EXCHANGE_RATE           AS SHIP_EXCHANGE_RATE
                         , O.ORDER_STATE             AS ORDER_STATE
                         , O.ORDER_STATE_NAME        AS ORDER_STATE_NAME
                         , TO_CHAR(O.DUE_DATE, 'YYYY-MM-DD')     AS DUE_DATE
                         , O.ORDER_GUBUN
                         , O.ORDER_GUBUN_NAME
                         , O.DIVISION_CD
                         , O.COMPANY_CD
                         , P.CURRENCY_CD             AS DEFAULT_CURRENCY  
                         , O.CUSTOMER_PO_NO          AS PO_NO
                         , I.ITEM_DEPARTURE_ID  AS DEPARTURE_NUMBER
                         , 0   AS DEPARTURE_CANCEL_QTY
                         , NULL   AS DEPARTURE_CANCEL_DATE 
                         , <!-- (SELECT MOM_COMMON_PKG.FN_GET_B2BI_CUSTOMER_FLAG( O.DIVISION_CD
                                                                           , O.COMPANY_CD
                                                                           , O.VENDOR_CD)
                              FROM   DUAL ) --> 'N' AS B2BI_CUSTOMER_FLAG   
                         , I.ITEM_INPUT_ID
                         , I.FOREIGN_TOTAL_PRICE
                          , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(I.DIVISION_CD, I.COMPANY_CD, 'ITEM_GROUP_LARGE', (SELECT ITEM_GROUP_LARGE
                                                                                                                        FROM MOM_ITEM_DEFINITION
                                                                                                                       WHERE DIVISION_CD = I.DIVISION_CD
                                                                                                                         AND COMPANY_CD = I.COMPANY_CD
                                                                                                                         AND ITEM_ID = I.ITEM_ID)) FROM DUAL ) AS ITEM_GROUP_LARGE
                          , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(I.DIVISION_CD, I.COMPANY_CD, 'ITEM_GROUP_MEDIUM', (SELECT ITEM_GROUP_MEDIUM
                                                                                                                         FROM MOM_ITEM_DEFINITION
                                                                                                                        WHERE DIVISION_CD = I.DIVISION_CD
                                                                                                                          AND COMPANY_CD = I.COMPANY_CD
                                                                                                                          AND ITEM_ID = I.ITEM_ID)) FROM DUAL ) AS ITEM_GROUP_MEDIUM        
                         , I.DESCRIPTION
                         , I.CONVERSION_UNIT_QTY
                         , MI.CONVERSION_UNIT
                         , 0 AS INOUT_CANCEL_QTY
                         , MI.SPECIFICATION
                       FROM   MOM_SALES_ORDER_V O
                            , MOM_ITEM_STOCK_INOUT I
                            , MOM_PARAMETER P
                            , MOM_ITEM_DEFINITION MI
                       WHERE  O.DIVISION_CD    = I.DIVISION_CD
                       AND    O.COMPANY_CD     = I.COMPANY_CD
                       AND    O.SALES_ORDER_ID = I.ITEM_ORDER_ID
                       AND    O.DIVISION_CD    = P.DIVISION_CD
                       AND    O.COMPANY_CD     = P.COMPANY_CD
                       AND    I.DIVISION_CD    = MI.DIVISION_CD(+)
                       AND    I.COMPANY_CD     = MI.COMPANY_CD(+)
                       AND    I.ITEM_ID        = MI.ITEM_ID(+)
                       AND    I.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                       AND    I.IO_TYPE = 'O'
                       AND    I.IO_CATEGORY = 'PRTN001'
                       AND    NOT EXISTS (SELECT '*'
                                           FROM MOM_ITEM_STOCK_INOUT IC
                                          WHERE IC.DIVISION_CD    = I.DIVISION_CD
                                            AND IC.COMPANY_CD     = I.COMPANY_CD
                                            AND IC.PREV_STOCK_INOUT_ID = I.ITEM_STOCK_INOUT_ID
                                            AND IC.IO_TYPE = I.IO_TYPE
                                            AND IC.IO_CATEGORY = 'PRTNC001'
                                            )
<!--                        AND    NVL(O.ORDER_STATE, 'N') IN ('N', 'F', 'T')   -->
				         ) A
				    , MOM_PRINT_DOC PD
			   WHERE 1=1
				 AND A.DIVISION_CD = PD.DIVISION_CD(+)
                 AND A.COMPANY_CD = PD.COMPANY_CD(+)
                 AND A.ITEM_STOCK_INOUT_ID = PD.ITEM_STOCK_INOUT_ID(+)
			    <if test= "fromDate != '' and fromDate != null and toDate != '' and toDate != null">
		         AND TO_DATE(A.IO_TIME) BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
		        </if>
				      ) A
		 WHERE 1 = 1
	      <if test= "customerName != '' and customerName != null">  
		   AND A.VENDOR_CD = #{customerName, jdbcType=VARCHAR}
		  </if> 
		  <if test= "locationName != '' and locationName != null"> 
		   AND A.TO_LOCATION_CD = #{locationName, jdbcType=VARCHAR}
		  </if>
		  <if test= "itemName != '' and itemName != null"> 
		   AND ( UPPER(A.ITEM_ID) LIKE UPPER('%' || #{itemName, jdbcType=VARCHAR} || '%')
		    OR   UPPER(A.ITEM_NAME) LIKE UPPER('%' || #{itemName, jdbcType=VARCHAR} || '%') )
		  </if>
		  <if test= "customerPoId != '' and customerPoId != null"> 
		   AND UPPER(A.CUSTOMER_PO_ID) LIKE UPPER('%' || #{customerPoId, jdbcType=VARCHAR} || '%')
		  </if>
		  <if test= "orderState != '' and orderState != null"> 
		   AND A.ORDER_STATE = #{orderState, jdbcType=VARCHAR}
		  </if>
		  <if test= "destinationName != '' and destinationName != null"> 
		   AND A.DESTINATION_CD = #{destinationName, jdbcType=VARCHAR}
		  </if>
		  <if test= "orderGubun != '' and orderGubun != null"> 
		   AND A.ORDER_GUBUN = #{orderGubun, jdbcType=VARCHAR}
		  </if>
		  <if test= "currencyName != '' and currencyName != null"> 
		   AND A.CURRENCY_CD = #{currencyName, jdbcType=VARCHAR}
		  </if>   
		  <if test= "marketName != '' and marketName != null"> 
		   AND A.MARKET_CD = #{marketName, jdbcType=VARCHAR}
		  </if>   
		    <if test ="cancelFlag != null and cancelFlag != ''">
			  <choose>
			    <when test='cancelFlag.equals("N")'>
				 AND (A.DEPARTURE_CANCEL_QTY = 0 
				  OR  A.DEPARTURE_CANCEL_QTY IS NULL)
				</when>
				<otherwise>
				 AND A.DEPARTURE_CANCEL_QTY <![CDATA[>]]> 0
				</otherwise>
			  </choose>
			</if>
	     <if test= "createByName != '' and createByName != null"> 
		  AND UPPER(A.CREATE_BY_NAME) LIKE UPPER ('%' || #{createByName, jdbcType=VARCHAR} || '%')
		 </if> 
		 ORDER BY A.DUE_DATE, A.CUSTOMER_PO_ID, A.SALES_ORDER_ID
	</select>
	
	<select id="get_productShippingExcelPrint_list" resultType="camelMap" parameterType="java.util.HashMap">
		WITH TEMP1 AS 
			 (SELECT TO_CHAR (A.IO_TIME, 'YYYY-MM-DD') AS 납품일자
	               , NVL(MV.BUSINESS_NO, '-') AS 공급자등록번호
	               , NVL(V.BUSINESS_NO, '-') AS 받는자등록번호
	               , NVL(MV.VENDOR_NAME, '-') AS 공급자상호명
	               , NVL(V.VENDOR_NAME, '-') AS 받는자상호명
	               , NVL(MV.CEO_NAME, '-') AS 공급자대표명
	               , NVL(V.CEO_NAME, '-') AS 받는자대표명
	               , NVL(MV.ADDRESS, '-') AS 공급자주소
	               , NVL(V.ADDRESS, '-') AS 받는자주소
	               , NVL(MV.BUSINESS_STATUS, '-') AS 공급자업태
	               , NVL(V.BUSINESS_STATUS, '-') AS 받는자업태
	               , NVL(MV.BUSINESS_TYPE, '-') AS 공급자업종
	               , NVL(V.BUSINESS_TYPE, '-') AS 받는자업종
	               , A.ITEM_ID AS PLIST_ITEM_ID
	               , A.ITEM_NAME AS PLIST_ITEM_NAME
	               , A.SPECIFICATION AS PLIST_SPECIFICATION
	               , A.INOUT_QTY AS PLIST_QTY
	               , TO_CHAR(A.UNIT_PRICE) AS PLIST_UNIT_PRICE
	               , TO_CHAR(A.INOUT_PRICE) AS PLIST_PRICE
	               , A.DESCRIPTION AS PLIST_DESCRIPTION
	               , MPD.PRINT_GROUP_ID AS 그룹번호
	               , A.DIVISION_CD
	               , A.COMPANY_CD
	               , A.ITEM_STOCK_INOUT_ID
	               , A.SALES_ORDER_ID
	               , A.CUSTOMER_PO_ID
	               , A.DUE_DATE
              FROM (SELECT I.IO_CATEGORY
                         , I.ITEM_STOCK_INOUT_ID
                         , O.CUSTOMER_PO_ID
                         , O.SALES_ORDER_ID
                         , O.ITEM_ID
                         , O.ITEM_NAME
                         , I.QTY AS INOUT_QTY
                         , I.INOUT_PRICE
                         , O.VENDOR_CD
                         , O.VENDOR_NAME
                         , I.IO_TIME
                         , DECODE (O.CURRENCY_CD
                                 , P.CURRENCY_CD, I.UNIT_PRICE
                                 , I.FOREIGN_UNIT_PRICE) AS UNIT_PRICE
                         , TO_CHAR (O.DUE_DATE, 'YYYY-MM-DD') AS DUE_DATE
                         , O.DIVISION_CD
                         , O.COMPANY_CD
                         , DC.DEPARTURE_CANCEL_QTY
                         , DC.DEPARTURE_CANCEL_DATE
                         , I.DESCRIPTION
                         , MI.ITEM_TYPE
                         , I.UPDATE_BY
                         , (SELECT TU.DEPT_CD
                              FROM TU_USER TU
                             WHERE TU.DIVISION_CD = I.DIVISION_CD
                               AND TU.COMPANY_CD = I.COMPANY_CD
                               AND TU.EMP_NO = I.UPDATE_BY) AS DEPT_CD
                         , MI.SPECIFICATION
                    FROM MOM_SALES_ORDER_V O
                       , MOM_ITEM_STOCK_INOUT I
                       , MOM_PARAMETER P
                       , MOM_B2BI_DEPARTURE_CANCEL_V DC
                       , MOM_ITEM_DEFINITION MI
                   WHERE O.DIVISION_CD = I.DIVISION_CD
                     AND O.COMPANY_CD = I.COMPANY_CD
                     AND O.SALES_ORDER_ID = I.ITEM_ORDER_ID
                     AND O.DIVISION_CD = P.DIVISION_CD
                     AND O.COMPANY_CD = P.COMPANY_CD
                     AND I.DIVISION_CD = DC.DIVISION_CD(+)
                     AND I.PO_NO = DC.PO_NO(+)
                     AND I.ITEM_INPUT_ID = DC.TRANSACTION_ID(+)
                     AND I.DIVISION_CD = MI.DIVISION_CD(+)
                     AND I.COMPANY_CD = MI.COMPANY_CD(+)
                     AND I.ITEM_ID = MI.ITEM_ID(+)
                     AND I.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                     AND I.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                     AND I.IO_TYPE = 'I'
                     AND I.IO_CATEGORY IN ('S001', 'S002')
                     AND NOT EXISTS
                                (SELECT '*'
                                   FROM MOM_ITEM_STOCK_INOUT IC
                                  WHERE IC.DIVISION_CD = I.DIVISION_CD
                                       AND IC.COMPANY_CD = I.COMPANY_CD
                                       AND IC.PREV_STOCK_INOUT_ID = I.ITEM_STOCK_INOUT_ID
                                       AND IC.IO_TYPE = 'I'
                                       AND IC.IO_CATEGORY = 'SC001')
                  UNION ALL
                  SELECT I.IO_CATEGORY
                        , I.ITEM_STOCK_INOUT_ID
                        , O.CUSTOMER_PO_ID
                        , O.SALES_ORDER_ID
                        , O.ITEM_ID
                        , O.ITEM_NAME
                        , I.QTY AS INOUT_QTY
                        , I.INOUT_PRICE
                        , O.VENDOR_CD
                        , O.VENDOR_NAME
                        , I.IO_TIME
                        , DECODE (O.CURRENCY_CD
                                , P.CURRENCY_CD, I.UNIT_PRICE
                                , I.FOREIGN_UNIT_PRICE)
                             AS UNIT_PRICE
                        , TO_CHAR (O.DUE_DATE, 'YYYY-MM-DD') AS DUE_DATE
                        , O.DIVISION_CD
                        , O.COMPANY_CD
                        , 0 AS DEPARTURE_CANCEL_QTY
                        , NULL AS DEPARTURE_CANCEL_DATE
                        , I.DESCRIPTION
                        , MI.ITEM_TYPE
                        , I.UPDATE_BY
                        , (SELECT TU.DEPT_CD
                             FROM TU_USER TU
                            WHERE     TU.DIVISION_CD = I.DIVISION_CD
                                  AND TU.COMPANY_CD = I.COMPANY_CD
                                  AND TU.EMP_NO = I.UPDATE_BY)
                             AS DEPT_CD
                        , MI.SPECIFICATION     
                    FROM MOM_SALES_ORDER_V O
                       , MOM_ITEM_STOCK_INOUT I
                       , MOM_PARAMETER P
                       , MOM_ITEM_DEFINITION MI
                   WHERE O.DIVISION_CD = I.DIVISION_CD
                     AND O.COMPANY_CD = I.COMPANY_CD
                     AND O.SALES_ORDER_ID = I.ITEM_ORDER_ID
                     AND O.DIVISION_CD = P.DIVISION_CD
                     AND O.COMPANY_CD = P.COMPANY_CD
                     AND I.DIVISION_CD = MI.DIVISION_CD(+)
                     AND I.COMPANY_CD = MI.COMPANY_CD(+)
                     AND I.ITEM_ID = MI.ITEM_ID(+)
                     AND I.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                     AND I.IO_TYPE = 'O'
                     AND I.IO_CATEGORY = 'PRTN001'
                     AND NOT EXISTS
                                (SELECT '*'
                                   FROM MOM_ITEM_STOCK_INOUT IC
                                  WHERE IC.DIVISION_CD = I.DIVISION_CD
                                    AND IC.COMPANY_CD = I.COMPANY_CD
                                    AND IC.PREV_STOCK_INOUT_ID = I.ITEM_STOCK_INOUT_ID
                                    AND IC.IO_TYPE = I.IO_TYPE
                                    AND IC.IO_CATEGORY = 'PRTNC001')
                     AND NVL (O.ORDER_STATE, 'N') IN ('N', 'F', 'T')
                        ) A
                , MOM_PRINT_DOC MPD
                , MOM_VENDOR MV
                , MOM_VENDOR V
            WHERE A.DIVISION_CD = MPD.DIVISION_CD
              AND A.COMPANY_CD = MPD.COMPANY_CD
              AND A.ITEM_STOCK_INOUT_ID = MPD.ITEM_STOCK_INOUT_ID
              AND A.DIVISION_CD = MV.VENDOR_CD
              AND A.COMPANY_CD = MV.COMPANY_CD
              AND A.DIVISION_CD = V.DIVISION_CD
              AND A.COMPANY_CD = V.COMPANY_CD
              AND A.VENDOR_CD = V.VENDOR_CD
              AND A.ITEM_STOCK_INOUT_ID IN(${itemStockInoutIds})
			)
		SELECT A.*
		     , B.CNT CNT
		     , CASE
		          WHEN MOD (PLIST_CELLROW, C.LIST_ALLCOUNT) = 1
		          THEN
		              (CEIL (PLIST_CELLROW / C.LIST_ALLCOUNT)) || '/' || (CEIL (B.CNT / C.LIST_ALLCOUNT))
		          ELSE
		             ''
		       END AS PLIST_PAGING
		  FROM (SELECT A.*, ROW_NUMBER() OVER(PARTITION BY B.PRINT_GROUP_ID ORDER BY A.DUE_DATE, A.CUSTOMER_PO_ID, A.SALES_ORDER_ID) AS PLIST_CELLROW
		          FROM TEMP1 A
		             , MOM_PRINT_DOC B
		         WHERE A.DIVISION_CD = B.DIVISION_CD
		           AND A.COMPANY_CD = B.COMPANY_CD
		           AND A.ITEM_STOCK_INOUT_ID = B.ITEM_STOCK_INOUT_ID) A
		     , (SELECT COUNT (*) CNT FROM TEMP1) B
		     , (SELECT LIST_ALLCOUNT
		          FROM MOM_EXCEL
		         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	               AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	               AND EXCEL_ID = #{excelId, jdbcType=VARCHAR}) C
	</select>
	
	<select id="get_productShippingHist_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT MIS.ITEM_STOCK_INOUT_ID
		     , MO.CUSTOMER_PO_ID
		     , MO.ITEM_ID
		     , MO.ITEM_NAME
		     , MIS.LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( MIS.DIVISION_CD , MIS.COMPANY_CD , MIS.LOCATION_CD)
		          FROM DUAL ) AS LOCATION_NAME
		     , MIS.PREV_STOCK_INOUT_ID
		     , MIS.IO_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( MIS.DIVISION_CD , MIS.COMPANY_CD , 'IO_TYPE' , MIS.LOCATION_CD)
		          FROM DUAL ) AS IO_TYPE_NAME
		     , MIS.IO_TIME
		     , MIS.IO_CATEGORY
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( MIS.DIVISION_CD , MIS.COMPANY_CD , 'IO_CATEGORY' , MIS.LOCATION_CD)
		          FROM DUAL ) AS IO_CATEGORY_NAME
		     , MO.ORDER_QTY
		     , MIS.QTY
		     , MIS.UNIT
		     , DECODE(MIS.CURRENCY_CD, MP.CURRENCY_CD , MIS.UNIT_PRICE, MIS.FOREIGN_UNIT_PRICE) AS UNIT_PRICE
		     , DECODE(MIS.CURRENCY_CD, MP.CURRENCY_CD , MIS.INOUT_PRICE, MIS.FOREIGN_TOTAL_PRICE) AS INOUT_PRICE
		     , MO.VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( MIS.DIVISION_CD , MIS.COMPANY_CD , MO.VENDOR_CD)
		          FROM DUAL ) AS VENDOR_NAME
		     , MO.SALES_ORDER_ID
		     , MO.CURRENCY_CD
		     , MO.CURRENCY_NAME
		     , MO.MARKET_CD
		     , MO.MARKET_NAME
		     , MO.EXCHANGE_RATE
		     , MIS.CREATE_BY
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( MIS.DIVISION_CD , MIS.COMPANY_CD , MIS.CREATE_BY)
		          FROM DUAL ) AS CREATE_BY_NAME
		     , TO_CHAR(MIS.CREATE_DATE, 'yyyy-mm-dd hh24:mi:ss') AS CREATE_DATE
		     , MIS.DESCRIPTION
		  FROM MOM_SALES_ORDER_V MO
		     , MOM_ITEM_STOCK_INOUT MIS
		     , MOM_PARAMETER MP
		 WHERE MO.DIVISION_CD = MIS.DIVISION_CD
		   AND MO.COMPANY_CD = MIS.COMPANY_CD
		   AND MO.SALES_ORDER_ID = MIS.ITEM_ORDER_ID
		   AND MO.DIVISION_CD = MP.DIVISION_CD
		   AND MO.COMPANY_CD = MP.COMPANY_CD
		   AND MO.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND MO.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		   AND MO.SALES_ORDER_ID = #{salesOrderId, jdbcType=VARCHAR}
		 ORDER BY MIS.CREATE_DATE DESC , MIS.ITEM_STOCK_INOUT_ID DESC 
	</select>
	
	<insert id="create_productShippingCancel" statementType="CALLABLE">
	{
        CALL P_CANCEL_SHIP_RESULT(
        	#{p_err_code , mode=OUT, jdbcType=VARCHAR}
           ,#{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           ,#{divisionCd, mode=IN, jdbcType=VARCHAR}
           ,#{companyCd, mode=IN, jdbcType=VARCHAR}
           ,#{itemStockInoutId, mode=IN, jdbcType=VARCHAR}
           ,#{ioTime, mode=IN, jdbcType=VARCHAR}
           ,#{orderType, mode=IN, jdbcType=VARCHAR}
           ,#{updateBy, mode=IN, jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<delete id="remove_productShippingStatusPrintTemp" parameterType="java.util.HashMap">
		DELETE FROM MOM_PRINT_DOC_TMP
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND MENU_ID = #{menuId, jdbcType=VARCHAR}
	</delete>
	
	<insert id="create_productShippingStatusPrintTemp" parameterType="java.util.HashMap">
		INSERT INTO MOM_PRINT_DOC_TMP
		(
			DIVISION_CD,
			COMPANY_CD,
			ITEM_STOCK_INOUT_ID,
			PRINT_GROUP_ID,
			PRINT_ID,
			SEQ,
			MENU_ID,
			PRINT_DATE,
			DESCRIPTION,
			CREATE_DATE,
			CREATE_BY
		)
		VALUES
		(
			#{divisionCd, jdbcType=VARCHAR},
			#{companyCd, jdbcType=VARCHAR},
			#{itemStockInoutId, jdbcType=VARCHAR},
			#{printGroupId, jdbcType=VARCHAR},
			#{printId, jdbcType=VARCHAR},
			#{seq, jdbcType=NUMERIC},
			#{menuId, jdbcType=VARCHAR},
			TO_CHAR(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}), 'YYYY-MM-DD'),
			#{description, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{createBy, jdbcType=VARCHAR}
		)
	</insert>
	
	<insert id="create_productShippingStatusPrint" statementType="CALLABLE">
		CALL P_COMMON_PRINT_DOC (
        	#{p_err_code, mode=OUT, jdbcType=VARCHAR}
          , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
          , #{divisionCd, mode=IN, jdbcType=VARCHAR}
          , #{companyCd, mode=IN, jdbcType=VARCHAR}
          , #{menuId, mode=IN, jdbcType=VARCHAR}
          , #{createBy, mode=IN, jdbcType=VARCHAR}
        )
    </insert>
    
</mapper>