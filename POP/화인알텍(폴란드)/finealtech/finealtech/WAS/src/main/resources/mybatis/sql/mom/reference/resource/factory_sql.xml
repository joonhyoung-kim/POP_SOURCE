<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.resource.factory"> 
	<select id="get_factory_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.*
		     , LPAD('　┖', 4 * (LEVEL - 1)) || ' ' || A.FACILITY_NAME FACILITY_NAME2 
		     , LEVEL
		FROM   (
		SELECT A.DIVISION_CD
		     , A.COMPANY_CD
		     , A.FACILITY_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD  
		                                              , 'FACILITY_TYPE'
		                                              , A.FACILITY_TYPE)
		        FROM DUAL)  AS FACILITY_TYPE_NAME 
		     , A.FACILITY_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD
		                                                  , A.COMPANY_CD  
		                                                  , A.FACILITY_CD)
		        FROM DUAL) AS FACILITY_NAME
		     , A.PARENT_FACILITY_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD
		                                                  , A.COMPANY_CD  
		                                                  , A.PARENT_FACILITY_CD)
		        FROM DUAL) AS PARENT_FACILITY_NAME          
		     , A.FACILITY_CLASS_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD  
		                                              , 'FACILITY_CLASS_ID'
		                                              , A.FACILITY_CLASS_CD)
		        FROM DUAL)         AS FACILITY_CLASS_NAME
		     , A.FACILITY_SEQ
		     , A.INVENTORY_USE_FLAG
         	 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD,
             	                                       A.COMPANY_CD,
                                                       'USE_FLAG',
                                                       A.INVENTORY_USE_FLAG)
            	  FROM DUAL) AS INVENTORY_USE_FLAG_NM
		     , A.STOCK_USE_FLAG
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD  
		                                              , 'USE_FLAG'
		                                              , A.STOCK_USE_FLAG)
		        FROM DUAL)         AS STOCK_USE_FLAG_NM
		     , A.VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME( A.DIVISION_CD
		                                                , A.COMPANY_CD  
		                                                , A.VENDOR_CD)
		         FROM DUAL) AS VENDOR_NAME 
		     , A.USE_YN
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD  
		                                              , 'USE_FLAG'
		                                              , A.USE_YN)
		        FROM DUAL) AS USE_YN_NAME 
		      , A.DESCRIPTION
		      , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		      , A.CREATE_BY
		      , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
		                                               , A.COMPANY_CD  
		                                               , A.CREATE_BY)
		         FROM DUAL) AS CREATE_USER_NAME          
		      , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE          
		      , A.UPDATE_BY
		      , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
		                                               , A.COMPANY_CD  
		                                               , A.UPDATE_BY)
		         FROM DUAL) AS UPDATE_USER_NAME 
		      , A.MATERIAL_STOCK_FLAG
		      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                               , A.COMPANY_CD  
		                                               , 'USE_FLAG'
		                                               , A.MATERIAL_STOCK_FLAG)
		           FROM DUAL)         AS MATERIAL_STOCK_FLAG_NM
		      , A.FREE_OFFER_FLAG
		      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                               , A.COMPANY_CD  
		                                               , 'FREE_OFFER'
		                                               , A.FREE_OFFER_FLAG)
		           FROM DUAL)         AS FREE_OFFER_FLAG_NAME
		      , A.SCRAP_LOCATION_FLAG
		      , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                               , A.COMPANY_CD  
                                                       , 'Y_N'
		                                               , A.SCRAP_LOCATION_FLAG)
		         FROM DUAL) AS SCRAP_LOCATION_FLAG_NAME 
		FROM    MOM_FACILITY A
		WHERE   A.DIVISION_CD  = #{divisionCd, jdbcType=VARCHAR}
		AND     A.COMPANY_CD   = #{companyCd, jdbcType=VARCHAR}
		AND     A.PARENT_FACILITY_CD IS NOT NULL
	  
	  ) A
	  WHERE 1 = 1
	  <if test="facilityName != null and facilityName != '' ">
		AND		A.FACILITY_CD LIKE UPPER('%' || #{facilityName, jdbcType=VARCHAR} || '%')
		 OR		A.FACILITY_NAME LIKE UPPER('%' || #{facilityName, jdbcType=VARCHAR} || '%')
	  </if>
	  <if test="facilityClassName != null and facilityClassName != '' ">
		AND		A.FACILITY_CLASS_CD = #{facilityClassName, jdbcType=VARCHAR}
	  </if>
	    <if test="inFacilityType != null and inFacilityType != '' ">
	 	AND 	A.FACILITY_TYPE = #{inFacilityType, jdbcType=VARCHAR}
	  </if>
		START WITH A.PARENT_FACILITY_CD = '-'
		CONNECT BY PRIOR FACILITY_CD = PARENT_FACILITY_CD
		ORDER SIBLINGS BY FACILITY_SEQ
	</select>
	
	<select id="get_factory" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT *
		  FROM MOM_FACILITY
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND FACILITY_CD = #{facilityCd, jdbcType=VARCHAR}
	</select>
	
	<insert id="create_factory" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
		INSERT INTO MOM_FACILITY( 
		    DIVISION_CD
		  , COMPANY_CD
		  , FACILITY_CD
		  , PARENT_FACILITY_CD
		  , FACILITY_LEVEL
	  	  , FACILITY_SEQ
	      , FACILITY_NAME
	      , FACILITY_CLASS_CD
	      , FACILITY_TYPE
	      , USE_YN
	      , DESCRIPTION
	      , VENDOR_CD
	      , STOCK_USE_FLAG
	      , INVENTORY_USE_FLAG
	      , MATERIAL_STOCK_FLAG
	      , FREE_OFFER_FLAG
	      , SCRAP_LOCATION_FLAG
	      , CREATE_DATE
	      , CREATE_BY
	      , UPDATE_DATE
	      , UPDATE_BY 
		)
		 VALUES (#{divisionCd, jdbcType=VARCHAR}
			   , #{companyCd, jdbcType=VARCHAR}
			   , UPPER(TRIM(#{facilityCd, jdbcType=VARCHAR}))
			   , UPPER(TRIM(#{parentFacilityCd, jdbcType=VARCHAR}))
			   , #{facilityLevel, jdbcType=INTEGER}
			   , #{facilitySeq, jdbcType=INTEGER}
			   , #{facilityName, jdbcType=VARCHAR}
			   , UPPER(TRIM(#{facilityClassCd, jdbcType=VARCHAR}))
			   , #{facilityType, jdbcType=VARCHAR}
			   , NVL(#{useYn, jdbcType=VARCHAR}, 'Y')
			   , #{description, jdbcType=VARCHAR}
			   , UPPER(TRIM(#{vendorCd, jdbcType=VARCHAR}))
			   , NVL(#{stockUseFlag, jdbcType=VARCHAR}, 'N')
			   , NVL(#{inventoryUseFlag, jdbcType=VARCHAR} , 'N')
			   , NVL(#{materialStockFlag, jdbcType=VARCHAR}, 'N')
			   , #{freeOfferFlag, jdbcType=VARCHAR}
			   , #{scrapLocationFlag, jdbcType=VARCHAR}
			   , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			   , #{createBy, jdbcType=VARCHAR}
			   , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			   , #{updateBy, jdbcType=VARCHAR})
			  ;
			   
		INSERT INTO MOM_FACILITY_HIST (
			  LAST_EVENT_SEQ
			, DIVISION_CD
			, COMPANY_CD
			, FACILITY_CD
			, PARENT_FACILITY_CD
			, FACILITY_LEVEL
			, PRIORITY
			, FACILITY_SEQ
			, FACILITY_NAME
			, FACILITY_CLASS_CD
			, FACILITY_TYPE
			, USE_YN
			, DESCRIPTION
			, VENDOR_CD
			, STOCK_USE_FLAG
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
			, TID
			, INVENTORY_USE_FLAG
			, MATERIAL_STOCK_FLAG
			, FREE_OFFER_FLAG
			, SCRAP_LOCATION_FLAG
		)
		SELECT S_ORDER_SEQ.NEXTVAL
			   , DIVISION_CD
			   , COMPANY_CD
			   , FACILITY_CD
			   , PARENT_FACILITY_CD
			   , FACILITY_LEVEL
			   , PRIORITY
			   , FACILITY_SEQ
			   , FACILITY_NAME
			   , FACILITY_CLASS_CD
			   , FACILITY_TYPE
			   , USE_YN
			   , DESCRIPTION
			   , VENDOR_CD
			   , STOCK_USE_FLAG
			   , CREATE_DATE
			   , CREATE_BY
			   , UPDATE_DATE
			   , UPDATE_BY
			   , TID
			   , INVENTORY_USE_FLAG
			   , MATERIAL_STOCK_FLAG
			   , FREE_OFFER_FLAG
			   , SCRAP_LOCATION_FLAG
		  FROM MOM_FACILITY
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		   AND FACILITY_CD = UPPER(TRIM(#{facilityCd, jdbcType=VARCHAR}))
		 ;
		 
		SELECT
			CASE 
				WHEN COUNT(FACILITY_CD) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_FACILITY
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND FACILITY_CD = UPPER(TRIM(#{facilityCd, jdbcType=VARCHAR}))
		;
      END
    }
	</insert>
	
	<update id="modify_factory" statementType="CALLABLE" parameterType="java.util.HashMap">
		{ CALL
		  DECLARE
		  BEGIN
		  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
		  	
			UPDATE MOM_FACILITY
			SET    FACILITY_CLASS_CD   = UPPER(TRIM(#{facilityClassCd, jdbcType=VARCHAR}))
			     , PARENT_FACILITY_CD  = UPPER(TRIM(#{parentFacilityCd, jdbcType=VARCHAR}))
			     , FACILITY_NAME       = #{facilityName, jdbcType=VARCHAR}
			     , FACILITY_TYPE       = #{facilityType, jdbcType=VARCHAR}
			     , FACILITY_SEQ        = #{facilitySeq, jdbcType=INTEGER}    
			     , VENDOR_CD           = UPPER(TRIM(#{vendorCd, jdbcType=VARCHAR}))
			     , STOCK_USE_FLAG      = NVL(#{stockUseFlag, jdbcType=VARCHAR}, 'N')
			     , INVENTORY_USE_FLAG  = NVL(#{inventoryUseFlag, jdbcType=VARCHAR} , 'N')
			     , MATERIAL_STOCK_FLAG = NVL(#{materialStockFlag, jdbcType=VARCHAR}, 'N')
			     , FREE_OFFER_FLAG     = #{freeOfferFlag, jdbcType=VARCHAR}
			     , UPDATE_DATE         = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			     , UPDATE_BY           = #{updateBy, jdbcType=VARCHAR}  
			     , USE_YN              = NVL(#{useYn, jdbcType=VARCHAR}, 'Y')
			     , DESCRIPTION		   = #{description, jdbcType=VARCHAR} 
			     , SCRAP_LOCATION_FLAG = #{scrapLocationFlag, jdbcType=VARCHAR}
			 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			   AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			   AND FACILITY_CD = UPPER(TRIM(#{facilityCd, jdbcType=VARCHAR}))
			;
			
			INSERT INTO MOM_FACILITY_HIST
					( LAST_EVENT_SEQ
					, DIVISION_CD          
					, COMPANY_CD           
					, FACILITY_CD          
					, PARENT_FACILITY_CD   
					, FACILITY_LEVEL       
					, PRIORITY             
					, FACILITY_SEQ         
					, FACILITY_NAME        
					, FACILITY_CLASS_CD    
					, FACILITY_TYPE        
					, USE_YN               
					, DESCRIPTION          
					, VENDOR_CD            
					, STOCK_USE_FLAG       
					, CREATE_DATE          
					, CREATE_BY            
					, UPDATE_DATE          
					, UPDATE_BY            
					, TID                  
					, INVENTORY_USE_FLAG   
					, MATERIAL_STOCK_FLAG  
					, FREE_OFFER_FLAG
					, SCRAP_LOCATION_FLAG
					)
			SELECT S_ORDER_SEQ.NEXTVAL
			     , A.DIVISION_CD          
			 	 , A.COMPANY_CD           
			 	 , A.FACILITY_CD          
			 	 , A.PARENT_FACILITY_CD   
			 	 , A.FACILITY_LEVEL       
				 , A.PRIORITY             
				 , A.FACILITY_SEQ         
				 , A.FACILITY_NAME        
				 , A.FACILITY_CLASS_CD    
				 , A.FACILITY_TYPE        
				 , A.USE_YN               
				 , A.DESCRIPTION          
				 , A.VENDOR_CD            
				 , A.STOCK_USE_FLAG       
				 , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})            
				 , A.UPDATE_BY       
				 , A.UPDATE_DATE          
				 , A.UPDATE_BY            
				 , A.TID                  
				 , A.INVENTORY_USE_FLAG   
				 , A.MATERIAL_STOCK_FLAG  
				 , A.FREE_OFFER_FLAG 
				 , A.SCRAP_LOCATION_FLAG
			  FROM MOM_FACILITY A 
			 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
               AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
               AND FACILITY_CD = UPPER(TRIM(#{facilityCd, jdbcType=VARCHAR}))
            ;
			
		SELECT
			CASE 
				WHEN COUNT(FACILITY_CD) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_FACILITY
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND FACILITY_CD = UPPER(TRIM(#{facilityCd, jdbcType=VARCHAR}))
		;
		END
		}
	</update>
	
	<delete id="remove_factory" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
	  	  UPDATE MOM_FACILITY
	  	     SET DESCRIPTION = 'Delete Data'
	  	       , UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
	  	       , UPDATE_BY = #{userId, jdbcType=VARCHAR}
	  	   WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
             AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
             AND FACILITY_CD = UPPER(#{facilityCd, jdbcType=VARCHAR})
          ;
          
		  INSERT INTO MOM_FACILITY_HIST
				( LAST_EVENT_SEQ
				, DIVISION_CD          
				, COMPANY_CD           
				, FACILITY_CD          
				, PARENT_FACILITY_CD   
				, FACILITY_LEVEL       
				, PRIORITY             
				, FACILITY_SEQ         
				, FACILITY_NAME        
				, FACILITY_CLASS_CD    
				, FACILITY_TYPE        
				, USE_YN               
				, DESCRIPTION          
				, VENDOR_CD            
				, STOCK_USE_FLAG       
				, CREATE_DATE          
				, CREATE_BY            
				, UPDATE_DATE          
				, UPDATE_BY            
				, TID                  
				, INVENTORY_USE_FLAG   
				, MATERIAL_STOCK_FLAG  
				, FREE_OFFER_FLAG
				, SCRAP_LOCATION_FLAG
				)
		SELECT S_ORDER_SEQ.NEXTVAL
		     , DIVISION_CD          
		 	 , COMPANY_CD           
		 	 , FACILITY_CD          
		 	 , PARENT_FACILITY_CD   
		 	 , FACILITY_LEVEL       
			 , PRIORITY             
			 , FACILITY_SEQ         
			 , FACILITY_NAME        
			 , FACILITY_CLASS_CD    
			 , FACILITY_TYPE        
			 , USE_YN               
			 , DESCRIPTION          
			 , VENDOR_CD            
			 , STOCK_USE_FLAG       
			 , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})          
			 , UPDATE_BY            
			 , UPDATE_DATE          
			 , UPDATE_BY            
			 , TID                  
			 , INVENTORY_USE_FLAG   
			 , MATERIAL_STOCK_FLAG  
			 , FREE_OFFER_FLAG 
			 , SCRAP_LOCATION_FLAG
		  FROM MOM_FACILITY 
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
           AND FACILITY_CD = UPPER(#{facilityCd, jdbcType=VARCHAR})
	     ;
            
		DELETE 
		FROM   MOM_FACILITY
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND  COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND  FACILITY_CD = UPPER(#{facilityCd, jdbcType=VARCHAR})
		;
		
		SELECT
			CASE 
				WHEN COUNT(FACILITY_CD) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_FACILITY
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND FACILITY_CD = UPPER(#{facilityCd, jdbcType=VARCHAR})
		;
	  END
	}
	</delete>
</mapper>