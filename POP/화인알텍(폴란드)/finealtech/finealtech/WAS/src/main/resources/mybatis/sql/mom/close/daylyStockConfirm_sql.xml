<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.close.daylyStockConfirm">
	<select id="get_daylyStockConfirmMstr_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.FACILITY_TYPE
		       , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'FACILITY_TYPE', A.FACILITY_TYPE) FROM DUAL) AS FACILITY_TYPE_NAME
		       , A.LOCATION_CD
		       , A.LOCATION_NAME
		       , A.INOUT_PRICE
		       , A.CONFIRM_FLAG
		FROM (SELECT B.DIVISION_CD
		            , B.COMPANY_CD
		            , B.FACILITY_TYPE
		            , B.FACILITY_CD AS LOCATION_CD
		            , B.FACILITY_NAME AS LOCATION_NAME
		            , NVL(TRUNC(SUM(A.STOCK_AMOUNT)), 0) INOUT_PRICE
		            , DECODE (A.IO_TIME, NULL, 'N', 'Y') AS CONFIRM_FLAG
		         FROM (SELECT * FROM MOM_ITEM_STOCK_CONFIRM WHERE IO_TIME = TO_DATE(#{confirmDate, jdbcType=VARCHAR}, 'yyyy-mm-dd')) A
		            , MOM_FACILITY B
		        WHERE B.DIVISION_CD = A.DIVISION_CD(+)
		          AND B.COMPANY_CD = A.COMPANY_CD(+)
		          AND B.FACILITY_CD = A.LOCATION_CD(+)
		          AND B.FACILITY_TYPE IN (SELECT CODE_ID FROM MOM_CODE 
                                           WHERE DIVISION_CD = B.DIVISION_CD 
                                             AND COMPANY_CD = B.COMPANY_CD 
                                             AND CODE_CLASS_ID = 'FACILITY_TYPE' 
                                             AND ATTRIBUTE11 = 'Y' 
                                             AND NVL(USE_YN, 'Y') = 'Y') 
		          AND B.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		          AND B.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		          AND NVL(B.USE_YN, 'Y') = 'Y'
		        GROUP BY B.DIVISION_CD, B.COMPANY_CD, A.IO_TIME, B.FACILITY_CD, B.FACILITY_TYPE, B.FACILITY_NAME ) A
		WHERE 1=1
		<if test = "facilityType != '' and facilityType != null">
          AND A.FACILITY_TYPE IN (${facilityType})
        </if>
        <if test = "locationCd != '' and locationCd != null">
          AND A.LOCATION_CD = #{locationCd, jdbcType=VARCHAR}
        </if>
		ORDER BY A.FACILITY_TYPE, LOCATION_NAME
	</select>
	
	<select id="get_daylyStockConfirmDtl_list" resultType="camelMap" parameterType="java.util.HashMap">
	WITH CD_ATTR18 AS
	  ( SELECT CODE_ID FROM MOM_CODE 
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} 
	       AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	       AND CODE_CLASS_ID = 'IO_CATEGORY' 
	       AND ATTRIBUTE18 = 'Y' 
	       AND USE_YN = 'Y')
	  , CD_ATTR19 AS
	  ( SELECT CODE_ID FROM MOM_CODE 
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	       AND CODE_CLASS_ID = 'IO_CATEGORY' 
	       AND ATTRIBUTE19 = 'Y' 
	       AND USE_YN = 'Y')
<!-- 	  , CD_ATTR20 AS -->
<!-- 	  ( SELECT CODE_ID FROM MOM_CODE  -->
<!-- 	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} -->
<!-- 	       AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR} -->
<!-- 	       AND CODE_CLASS_ID = 'IO_CATEGORY'  -->
<!-- 	       AND ATTRIBUTE20 = 'Y'  -->
<!-- 	       AND USE_YN = 'Y') -->
		SELECT A.LOCATION_CD
		     , A.LOCATION_NAME
		     , A.IO_CATEGORY
		     , A.IO_CATEGORY_NAME
		     , A.ITEM_ID
		     , A.ITEM_NAME
		     , A.SPECIFICATION
		     , A.STOCK_QTY
		     , A.STOCK_AMOUNT
		     , NVL(TRUNC(A.ST_PRICE, 4), 0) AS ST_PRICE
		     , A.IN_SUM_QTY
             , (A.IN_SUM_QTY * NVL(TRUNC (A.ST_PRICE), 0)) AS IN_SUM_AMOUNT
             , A.OUT_SUM_QTY
             , (A.OUT_SUM_QTY * NVL(TRUNC (A.ST_PRICE), 0)) AS OUT_SUM_AMOUNT
             , A.CURRENT_QTY
             , (A.CURRENT_QTY * NVL(TRUNC (A.ST_PRICE), 0)) AS CURRENT_AMOUNT
		FROM (SELECT MIS.LOCATION_CD
		           , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(MIS.DIVISION_CD, MIS.COMPANY_CD, MIS.LOCATION_CD) FROM DUAL) LOCATION_NAME
		           , MIS.IO_CATEGORY
		           , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MIS.DIVISION_CD, MIS.COMPANY_CD, 'IO_CATEGORY', MIS.IO_CATEGORY) FROM DUAL) IO_CATEGORY_NAME
		           , MIS.ITEM_ID
		           , MID.ITEM_NAME
		           , MID.SPECIFICATION
		           , NVL(MIS.STOCK_QTY,0) STOCK_QTY
		           , NVL(MIS.STOCK_AMOUNT,0) STOCK_AMOUNT
		           , MIS.IN_SUM_QTY
		           , (SELECT MOM_COMMON_PKG.FN_GET_STANDARD_PRICE( MIS.DIVISION_CD
		                                                         , MIS.COMPANY_CD
		                                                         , MIS.ITEM_ID
		                                                         , TO_DATE(#{confirmDate, jdbcType=VARCHAR}, 'yyyy-mm-dd')
		                                                         ) FROM DUAL) AS ST_PRICE
		           , MIS.OUT_SUM_QTY
		           , (NVL (MIS.STOCK_QTY, 0) + NVL (MIS.IN_SUM_QTY, 0) - NVL (MIS.OUT_SUM_QTY, 0)) CURRENT_QTY
		        FROM (  SELECT Z.LOCATION_CD
                               , Z.ITEM_ID
                               , Z.IO_CATEGORY
                               , SUM (Z.IN_SUM_QTY) IN_SUM_QTY
                               , SUM (Z.OUT_SUM_QTY) OUT_SUM_QTY
                               , Z.DIVISION_CD
                               , Z.COMPANY_CD
                               , SUM(Z.STOCK_QTY) STOCK_QTY
                               , SUM(Z.STOCK_AMOUNT) STOCK_AMOUNT
                            FROM (  SELECT A.LOCATION_CD
                                         , A.ITEM_ID
                                         , A.IO_CATEGORY
                                         , SUM (DECODE (A.IO_TYPE, 'I', A.QTY, 0)) IN_SUM_QTY
                                         , SUM (DECODE (A.IO_TYPE, 'O', A.QTY, 0)) OUT_SUM_QTY
                                         , A.DIVISION_CD
                                         , A.COMPANY_CD
                                         , 0 AS STOCK_QTY
                                         , 0 AS STOCK_AMOUNT
                                      FROM ( SELECT LOCATION_CD
	                                              , ITEM_ID
	                                              , DIVISION_CD
	                                              , COMPANY_CD
	                                              , IO_TIME
	                                              , IO_CATEGORY
	                                              , CASE WHEN IO_CATEGORY IN (SELECT CODE_ID FROM CD_ATTR18) AND IO_TYPE = 'O' THEN 'I'
	                                                     WHEN IO_CATEGORY IN (SELECT CODE_ID FROM CD_ATTR19) AND IO_TYPE = 'O' THEN 'I'
	                                                     WHEN IO_CATEGORY IN (SELECT CODE_ID FROM CD_ATTR19) AND IO_TYPE = 'I' THEN 'O'
<!-- 	                                                     WHEN IO_CATEGORY IN (SELECT CODE_ID FROM CD_ATTR20) AND IO_TYPE = 'O' AND QTY <![CDATA[ < ]]> 0 THEN 'I' -->
	                                                     ELSE IO_TYPE
	                                                 END AS IO_TYPE 
	                                              , CASE WHEN IO_CATEGORY IN (SELECT CODE_ID FROM CD_ATTR18) AND IO_TYPE = 'O' THEN QTY * (-1)
	                                                     WHEN IO_CATEGORY IN (SELECT CODE_ID FROM CD_ATTR19) AND IO_TYPE = 'O' THEN QTY * (-1)
	                                                     WHEN IO_CATEGORY IN (SELECT CODE_ID FROM CD_ATTR19) AND IO_TYPE = 'I' THEN QTY * (-1)
<!-- 	                                                     WHEN IO_CATEGORY IN (SELECT CODE_ID FROM CD_ATTR20) AND IO_TYPE = 'O' AND QTY <![CDATA[ < ]]> 0 THEN QTY * (-1) -->
	                                                     ELSE QTY
	                                                 END AS QTY 
	                                           FROM MOM_ITEM_STOCK_INOUT)  A
                                     WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                       AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                       AND TRUNC(A.IO_TIME) = TO_DATE(#{confirmDate, jdbcType=VARCHAR}, 'yyyy-mm-dd')
                                  GROUP BY A.DIVISION_CD, A.COMPANY_CD, A.LOCATION_CD, A.ITEM_ID, A.IO_CATEGORY
                                  UNION ALL
                                  SELECT B.LOCATION_CD
                                       , B.ITEM_ID
                                       , B.IO_CATEGORY
                                       , 0 IN_SUM_QTY
                                       , 0 OUT_SUM_QTY
                                       , B.DIVISION_CD
                                       , B.COMPANY_CD
                                       , B.STOCK_QTY
                                       , B.STOCK_AMOUNT
                                    FROM MOM_ITEM_STOCK_CONFIRM B
                                   WHERE B.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                     AND B.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                     AND B.ITEM_ID != '-'
                                     AND B.IO_TIME = (SELECT MAX(APPLY_DATE) 
			                                            FROM MOM_SHIFT_SCHEDULE
			                                           WHERE APPLY_DATE <![CDATA[ < ]]> TO_DATE(#{confirmDate, jdbcType=VARCHAR}, 'yyyy-mm-dd')
			                                             AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			                                             AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR})
                                 ) Z
                           WHERE 1=1
                        GROUP BY Z.DIVISION_CD, Z.COMPANY_CD, Z.LOCATION_CD, Z.ITEM_ID, Z.IO_CATEGORY) MIS
		            	   , MOM_ITEM_DEFINITION MID
		        WHERE MIS.DIVISION_CD = MID.DIVISION_CD(+)
		          AND MIS.COMPANY_CD = MID.COMPANY_CD(+)
		          AND MIS.ITEM_ID = MID.ITEM_ID(+) ) A
		WHERE 1 = 1	
		  AND A.LOCATION_CD IN ${locationCd}	
		ORDER BY A.LOCATION_CD, A.ITEM_ID, A.IO_CATEGORY
	</select>
	
	<insert id="create_daylyStockConfirm" statementType="CALLABLE">
	{	
		CALL P_STOCK_DAYLY_CONFIRM 
		( 
		    	#{p_err_code, mode=OUT, jdbcType=VARCHAR}
           	  , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           	  , #{divisionCd, mode=IN, jdbcType=VARCHAR}
          	  , #{companyCd, mode=IN, jdbcType=VARCHAR}
              , TO_DATE(#{confirmDate, mode=IN, jdbcType=VARCHAR}, 'yyyy-mm-dd')
              , #{cudFlag, mode=IN, jdbcType=VARCHAR}
              , #{selectFlag, mode=IN, jdbcType=VARCHAR}
              , #{createBy, mode=IN, jdbcType=VARCHAR}
         )   
	}
	</insert>
	
	<insert id="create_daylyStockConfirmCancel" statementType="CALLABLE">
	{	
		CALL P_STOCK_DAYLY_CONFIRM_C 
		( 
		    	#{p_err_code, mode=OUT, jdbcType=VARCHAR}
           	  , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           	  , #{divisionCd, mode=IN, jdbcType=VARCHAR}
          	  , #{companyCd, mode=IN, jdbcType=VARCHAR}
              , TO_DATE(#{confirmDate, mode=IN, jdbcType=VARCHAR}, 'yyyy-mm-dd')
              , #{cudFlag, mode=IN, jdbcType=VARCHAR}
              , #{selectFlag, mode=IN, jdbcType=VARCHAR}
              , #{createBy, mode=IN, jdbcType=VARCHAR}
         )   
	}
	</insert>
	
	
	<delete id="remove_stockDaylyConfirmTmp" statementType="CALLABLE" parameterType="java.util.HashMap">
        DELETE FROM MOM_STOCK_DAYLY_CONFIRM_TMP
         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND CUD_FLAG = #{cudFlag, jdbcType=VARCHAR}
    </delete>
    
    <insert id="create_stockDaylyConfirmTmp" statementType="CALLABLE" parameterType="java.util.HashMap">
        INSERT INTO MOM_STOCK_DAYLY_CONFIRM_TMP
                    ( DIVISION_CD 
                    , COMPANY_CD  
                    , IO_TIME   
                    , LOCATION_CD
                    , CUD_FLAG     
                    , CREATE_DATE 
                    , CREATE_BY   
                    )
        VALUES      ( #{divisionCd, jdbcType=VARCHAR}
                    , #{companyCd, jdbcType=VARCHAR}
                    , TO_DATE(#{confirmDate, mode=IN, jdbcType=VARCHAR}, 'yyyy-mm-dd')
                    , #{locationCd, jdbcType=VARCHAR}
                    , #{cudFlag, jdbcType=VARCHAR}
                    , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
                    , #{createBy, jdbcType=VARCHAR}
                    )
    </insert>
	
</mapper>