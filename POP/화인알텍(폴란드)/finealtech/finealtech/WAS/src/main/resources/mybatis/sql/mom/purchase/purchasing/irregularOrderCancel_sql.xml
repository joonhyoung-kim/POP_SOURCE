<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.purchase.purchasing.irregularOrderCancel">
	<select id="get_irregularOrderCancel_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT MR.DIVISION_CD
		     , MR.COMPANY_CD
		     , MR.ORDER_GROUP_ID 
		     , MR.ORDER_SEQ 
		     , MR.MATERIAL_ORDER_ID
		     , MR.VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME(MR.DIVISION_CD
		                                                ,MR.COMPANY_CD
		                                                ,MR.VENDOR_CD) 
		        FROM  DUAL)                              AS VENDOR_NAME  
		     , NVL(MR.DEPARTURE_VENDOR_CD, MR.VENDOR_CD) AS DEPARTURE_VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME(MR.DIVISION_CD
		                                                ,MR.COMPANY_CD
		                                                ,NVL(MR.DEPARTURE_VENDOR_CD, MR.VENDOR_CD) )
		        FROM  DUAL)     AS DEPARTURE_VENDOR_NAME           
		     , MR.ITEM_ID 
		     , MID.ITEM_NAME
		     , TO_CHAR(MR.ORDER_DATE , 'YYYY-MM-DD')    AS ORDER_DATE
		     , TO_CHAR(MR.DELIVERY_DATE , 'YYYY-MM-DD') AS DEPARTURE_DATE
		     , TO_CHAR(MR.CREATE_DATE  , 'YYYY-MM-DD')   AS CREATE_DATE 
		     , MR.CREATE_BY
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MR.DIVISION_CD
		                                              ,MR.COMPANY_CD
		                                              ,MR.CREATE_BY) 
		        FROM  DUAL)                            AS CREATE_BY_NAME  
		     , TO_CHAR(MR.UPDATE_DATE   , 'YYYY-MM-DD') AS UPDATE_DATE        
		     , MR.UPDATE_BY 
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MR.DIVISION_CD
		                                              ,MR.COMPANY_CD
		                                              ,MR.UPDATE_BY) 
		        FROM  DUAL)                            AS UPDATE_BY_NAME                                                      
		     , NVL(MR.ORDER_QTY , 0)                   AS ORDER_QTY
		     , NVL(MR.CLOSED_QTY, 0)                 AS RESULT_QTY  
		     , NVL(MR.DEPARTURE_QTY, 0)              AS DEPARTURE_QTY
		     , NVL(MR.CANCEL_QTY, 0)            AS CANCEL_QTY
		     , (MR.ORDER_QTY - NVL(MR.CANCEL_QTY, 0) - GREATEST(NVL(MR.DEPARTURE_QTY,0), NVL(MR.CLOSED_QTY,0))) AS REMAINED_QTY
		     , (MR.ORDER_QTY - NVL(MR.CANCEL_QTY, 0) - GREATEST(NVL(MR.DEPARTURE_QTY,0), NVL(MR.CLOSED_QTY,0))) AS COMPARE_REMAIN_QTY
		     , MID.UNIT
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( MR.DIVISION_CD
				                                              , MR.COMPANY_CD
				                                              , 'ITEM_UNIT'
				                                              , MID.UNIT )
				        FROM DUAL)                            AS UNIT_NAME 
		     , MR.ORDER_STATE                             
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MR.DIVISION_CD
		                                              ,MR.COMPANY_CD
		                                              ,'MATERIAL_ORDER_STATE'
		                                              ,MR.ORDER_STATE )
		        FROM DUAL)                            AS ORDER_STATE_NAME    
		     , MID.ITEM_USER_ID
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MR.DIVISION_CD
		                                              ,MR.COMPANY_CD
		                                              ,MID.ITEM_USER_ID) 
		        FROM  DUAL)                            AS ITEM_USER_NAME
		     , MR.DESCRIPTION
		     , MID.SPECIFICATION
		     , MR.MARKET_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MR.DIVISION_CD
		                                              ,MR.COMPANY_CD
		                                              ,'MARKET_CODE'
		                                              ,MR.MARKET_CD )
		        FROM DUAL)                            AS MARKET_NAME       
		     , MR.CURRENCY_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MR.DIVISION_CD
		                                              ,MR.COMPANY_CD
		                                              ,'CURRENCY_CODE'
		                                              ,MR.CURRENCY_CD )
		        FROM DUAL)                            AS CURRENCY_NAME
		     , MR.ORDER_FLAG
	         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (MR.DIVISION_CD
	                                                  , MR.COMPANY_CD
	                                                  , 'ORDER_FLAG'
	                                                  , MR.ORDER_FLAG)
	              FROM DUAL)						  AS ORDER_FLAG_NAME
	         , MR.WORK_ORDER_ID
	         , MR.TRANSACTION_SEQ
		FROM   MOM_MATERIAL_ORDER MR
		     , MOM_ITEM_DEFINITION MID
		WHERE  1 = 1 
		AND    MR.DIVISION_CD = MID.DIVISION_CD
		AND    MR.COMPANY_CD   = MID.COMPANY_CD
		AND    MR.ITEM_ID = MID.ITEM_ID
		AND    MR.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		<if test="fromDate != null and fromDate != ''">
		AND    MR.ORDER_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}  , 'yyyy-mm-dd') 
		                       AND     TO_DATE(#{toDate, jdbcType=VARCHAR}  , 'yyyy-mm-dd') 
		</if>
		<if test="vendorName != null and vendorName != '' ">
		AND    MR.VENDOR_CD = #{vendorName, jdbcType=VARCHAR}  
		</if>
		 <if test="itemName != null and itemName != '' ">
		AND    (UPPER(MR.ITEM_ID) LIKE UPPER('%' || #{itemName, jdbcType=VARCHAR} || '%')
			OR UPPER(MID.ITEM_NAME) LIKE UPPER('%' || #{itemName, jdbcType=VARCHAR} || '%'))
		</if>
		<if test="orderState != null and orderState != '' ">
		AND    MR.ORDER_STATE = #{orderState, jdbcType=VARCHAR}  
		</if>
		<if test="orderNumber != null and orderNumber != '' ">
		AND    MR.MATERIAL_ORDER_ID = #{orderNumber, jdbcType=VARCHAR}  
		</if>
		<if test="departureVendorName != null and departureVendorName != '' ">
		AND    MR.DEPARTURE_VENDOR_CD = #{departureVendorName, jdbcType=VARCHAR}  
		</if>
		<if test="orderType != null and orderType != ''">
		AND    MR.ORDER_FLAG = #{orderType, jdbcType=VARCHAR}
		</if>
		ORDER BY MR.ORDER_GROUP_ID, MR.TRANSACTION_SEQ
	</select>

	<insert id="create_cancelMaterialOrderProc" statementType="CALLABLE">
		{
	        CALL SP_MOM_MATERIAL_PKG.P_CANCEL_MATERIAL_ORDER (
	             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
	           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
	           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
	           , #{companyCd, mode=IN, jdbcType=VARCHAR}
	           , #{menuId, mode=IN, jdbcType=VARCHAR}
	           , #{tableId, mode=IN, jdbcType=VARCHAR}
	           , #{createBy, mode=IN, jdbcType=VARCHAR}
	        )
	    }
	</insert>
	
	<select id="get_comState_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.CODE_ID AS CODE
		     , A.CODE_NAME AS NAME
		  FROM MOM_CODE A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.CODE_CLASS_ID = #{codeClassId, jdbcType=VARCHAR} 
		   AND NVL(A.USE_YN, 'Y') = 'Y'
		   AND NVL(A.ATTRIBUTE3, 'N') = 'Y'
	</select>
	
	<update id="modify_comOrderState" parameterType="java.util.HashMap">
		UPDATE MOM_MATERIAL_ORDER
	       SET ORDER_STATE = #{orderState, jdbcType=VARCHAR}
	    	 , UPDATE_BY = #{userId, jdbcType=VARCHAR}
	    	 , UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
	    	 , TID = SUBSTR(TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF'),0,17) || SUBSTR(SYS_GUID(),0,17)
	    	 , CANCEL_QTY = NVL(CANCEL_QTY, 0) + #{cancelQty, jdbcType=VARCHAR}
	     WHERE MATERIAL_ORDER_ID = #{materialOrderId, jdbcType=VARCHAR}
	       AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	</update>

    <select id="get_orderExcelPrint_list" resultType="camelMap" parameterType="java.util.HashMap">
        WITH TEMP1 AS(
	        SELECT A.ORDER_GROUP_ID     AS 그룹번호
	             , A.ORDER_GROUP_ID     AS 그룹번호_BAR128
	             , A.ORDER_GROUP_ID     AS 그룹번호_BARQR
	             , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD') AS 생성일
	             , A.VENDOR_CD          AS 업체코드
<!-- 	             , B.VENDOR_NAME        AS 업체명 -->
				 , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME (A.DIVISION_CD, A.COMPANY_CD, A.VENDOR_CD)
                      FROM DUAL) AS 업체명
	             , NVL(B.MANAGER_NAME, '-') AS 업체담당자
	             , NVL(B.TEL_NO, '-')   AS 업체TEL
	             , NVL(B.FAX_NO, '-')   AS 업체FAX
	             , NVL(D.VENDOR_NAME, '-')  AS 납품처명
	             , NVL(D.CEO_NAME, '-')     AS 납품처대표
	             , NVL(D.BUSINESS_NO, '-')  AS 납품처등록번호
	             , NVL(D.TEL_NO, '-')       AS 납품처TEL
	             , NVL(D.FAX_NO, '-')       AS 납품처FAX
	             , NVL(D.ADDRESS, '-')      AS 납품처주소
	             , A.MATERIAL_ORDER_ID  AS PLIST_ORDER_ID
	             , A.ITEM_ID            AS PLIST_ITEM_ID
	             , C.ITEM_NAME          AS PLIST_ITEM_NAME
	             , C.SPECIFICATION      AS PLIST_SPECIFICATION
	             , A.MARKET_CD         AS PLIST_MARKET
	             , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(A.DIVISION_CD, A.COMPANY_CD, A.LOCATION_CD) FROM DUAL ) AS PLIST_LOCATION_NAME
	             , NVL (TO_CHAR(A.ORDER_QTY), 0) AS PLIST_QTY
	             , C.UNIT               AS PLIST_UNIT
	             , TO_CHAR(A.ORDER_DATE, 'MM/DD') AS PLIST_ORDER_DATE
	             , A.DESCRIPTION        AS PLIST_DESCRIPTION
	             , A.TRANSACTION_SEQ
	             , A.DIVISION_CD
                 , A.COMPANY_CD
                 , A.ORDER_GROUP_ID
	          FROM MOM_MATERIAL_ORDER A
	             , MOM_VENDOR B
	             , MOM_ITEM_DEFINITION C
	             , (SELECT *
	                  FROM MOM_VENDOR
	                 WHERE VENDOR_CD = #{divisionCd, jdbcType=VARCHAR}
	                   AND ROWNUM = 1) D
	         WHERE 1 = 1
	           AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	           AND A.DIVISION_CD = B.DIVISION_CD(+)
	           AND A.COMPANY_CD = B.COMPANY_CD(+)
	           AND A.DIVISION_CD = C.DIVISION_CD(+)
	           AND A.COMPANY_CD = C.COMPANY_CD(+)
	           AND A.DIVISION_CD = D.DIVISION_CD(+)
	           AND A.COMPANY_CD = D.COMPANY_CD(+)
	           AND A.VENDOR_CD = B.VENDOR_CD(+)
	           AND A.ITEM_ID = C.ITEM_ID(+)
	        <if test="orderGroupIds != null and orderGroupIds != ''">
	           AND A.ORDER_GROUP_ID IN (${orderGroupIds})
	        </if>
	           AND A.ORDER_STATE != 'CANCEL'
	          )
	         SELECT A.*
<!-- 			      , B.CNT CNT -->
			      , CASE
			          WHEN MOD (PLIST_CELLROW, C.LIST_ALLCOUNT) = 1
			          THEN
			              (CEIL (PLIST_CELLROW / C.LIST_ALLCOUNT)) || '/' || (CEIL (GROUP_COUNT / C.LIST_ALLCOUNT))
			          ELSE
			             ''
			        END AS PLIST_PAGING
			   FROM (SELECT A.*, ROW_NUMBER() OVER(PARTITION BY A.ORDER_GROUP_ID ORDER BY A.ORDER_GROUP_ID, A.TRANSACTION_SEQ) PLIST_CELLROW
			              , COUNT(*) OVER(PARTITION BY A.ORDER_GROUP_ID) AS GROUP_COUNT 
			           FROM TEMP1 A
			              , MOM_MATERIAL_ORDER B
			          WHERE A.DIVISION_CD = B.DIVISION_CD
			            AND A.COMPANY_CD = B.COMPANY_CD
			            AND A.PLIST_ORDER_ID = B.MATERIAL_ORDER_ID) A
<!-- 			      , (SELECT COUNT (*) CNT FROM TEMP1) B -->
			      , (SELECT LIST_ALLCOUNT
			           FROM MOM_EXCEL
			          WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			            AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			            AND EXCEL_ID = #{excelId, jdbcType=VARCHAR}) C
    </select>
    
    <select id="get_orderExcelPrintCount_list" resultType="camelMap" parameterType="java.util.HashMap">
    	SELECT COUNT(*) AS ROW_COUNT
    	  FROM MOM_MATERIAL_ORDER
    	 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
    	   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
    	   AND ORDER_GROUP_ID IN(${orderGroupIds})
    	   AND ORDER_STATE != 'CANCEL'
    </select>
	
</mapper>