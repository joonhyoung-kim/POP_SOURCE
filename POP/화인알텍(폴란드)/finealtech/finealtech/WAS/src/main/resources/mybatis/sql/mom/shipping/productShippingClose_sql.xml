<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.shipping.productShippingClose">
	<select id="get_productShippingClose_list" resultType="camelMap" parameterType="java.util.HashMap">
<!-- 		SELECT A.* -->
<!-- 		     , NVL(MI.CONVERSION_UNIT_QTY, 1) AS ITEM_CONVERSION_UNIT_QTY -->
<!-- 		     , A.SHIP_CONFIRM_QTY * NVL(MI.CONVERSION_UNIT_QTY, 1) AS CONVERSION_UNIT_QTY -->
<!-- 		     , MI.CONVERSION_UNIT -->
<!-- 		  FROM ( -->
				SELECT A.CUSTOMER_PO_ID 
				     , A.SALES_ORDER_ID
				     , A.SALES_ITEM_ID             
				     , A.ITEM_ID
				     , A.ITEM_NAME
				     , A.ORDER_QTY                 
				     , A.SHIP_QTY                   
				     , A.CANCEL_QTY                 
				     , A.CONFIRMED_QTY              
				     , DECODE(A.B2BI_CUSTOMER_FLAG, 'N', (A.QTY - A.CONFIRMED_QTY), A.RECEIVING_QUANTITY)  AS SHIP_CONFIRM_QTY
				     , CASE WHEN A.CURRENCY_CD = A.DEFAULT_CURRENCY THEN
				           (A.QTY * NVL(A.UNIT_PRICE, 0))
				       ELSE
				           (A.QTY * NVL(A.UNIT_PRICE, 0) * A.EXCHANGE_RATE) 
				       END   AS SHIP_AMT
				     , TO_CHAR(TRUNC(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(A.DIVISION_CD, A.COMPANY_CD)), 'YYYY-MM-DD') AS CONFIRM_DATE 
				     , A.LOCATION_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD
				                                                  , A.COMPANY_CD
				                                                  , A.LOCATION_CD)
				        FROM    DUAL ) AS  LOCATION_NAME
				     , A.VENDOR_CD
				     , A.VENDOR_NAME
				     , A.DESTINATION_CD
				     , A.DESTINATION_NAME
				     , A.ITEM_STOCK_ID
				     , A.ITEM_STOCK_INOUT_ID   
				     , TO_CHAR(A.IO_TIME, 'YYYY-MM-DD') AS IO_TIME
				     , A.MARKET_CD
				     , A.MARKET_NAME
				     , A.CURRENCY_CD             
				     , A.CURRENCY_NAME
				     , A.ITEM_OUTPUT_ID
				     , A.CREATE_BY
				     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
				                                              , A.COMPANY_CD
				                                              , A.CREATE_BY)
				        FROM   DUAL)                      AS CREATE_BY_NAME                                             
				     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
				     , A.UNIT_PRICE
				     , A.INOUT_PRICE   
				     , A.DIVISION_CD
				     , A.COMPANY_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_CURRENT_STOCK( A.DIVISION_CD
				                                                  , A.COMPANY_CD
				                                                  , A.ITEM_ID
				                                                  , A.LOCATION_CD)
				        FROM    DUAL )                    AS  CURRENT_QTY
				     , CASE WHEN A.CURRENCY_CD = A.DEFAULT_CURRENCY THEN
				           1 
				       ELSE
				           A.EXCHANGE_RATE   
				       END    AS EXCHANGE_RATE  
				     , A.SHIP_EXCHANGE_RATE  
				     , A.ITEM_DEPARTURE_ID
				     , A.PO_NO
				     , A.B2BI_CUSTOMER_FLAG      
				     , A.BUSINESSID    
				     , A.DESCRIPTION      
				     , NVL(A.CONVERSION_UNIT_QTY, 1) AS ITEM_CONVERSION_UNIT_QTY
                     , DECODE(A.B2BI_CUSTOMER_FLAG, 'N', (A.QTY - A.CONFIRMED_QTY), A.RECEIVING_QUANTITY) * NVL(A.CONVERSION_UNIT_QTY, 1) AS CONVERSION_UNIT_QTY
                     , A.CONVERSION_UNIT                                             
				FROM   (SELECT O.CUSTOMER_PO_ID 
				             , O.SALES_ORDER_ID
				             , O.SALES_ITEM_ID
				             , O.ITEM_ID
				             , O.ITEM_NAME
				             , O.ORDER_QTY 
				             , NVL(O.SHIP_QTY, 0)    AS SHIP_QTY
				             , NVL(O.CANCEL_QTY, 0)  AS CANCEL_QTY
				             , I.QTY
				             , I.LOCATION_CD
				             , O.VENDOR_CD
				             , O.VENDOR_NAME
				             , O.DESTINATION_CD
				             , O.DESTINATION_NAME
				             , I.ITEM_STOCK_ID
				             , I.ITEM_STOCK_INOUT_ID   
				             , I.IO_TIME
				             , O.MARKET_CD
				             , O.MARKET_NAME
				             , O.CURRENCY_CD              
				             , O.CURRENCY_NAME
				             , I.ITEM_OUTPUT_ID
				             , I.CREATE_BY 
				             , I.CREATE_DATE
				             , I.INOUT_PRICE
				             , I.EXCHANGE_RATE       AS SHIP_EXCHANGE_RATE
				             , O.DIVISION_CD
				             , O.COMPANY_CD
				             , (SELECT MOM_COMMON_PKG.FN_GET_SO_CONFIRMED_QTY( O.DIVISION_CD
				                                                             , O.COMPANY_CD
				                                                             , O.SALES_ORDER_ID)
				                FROM   DUAL )             AS CONFIRMED_QTY
				             , P.CURRENCY_CD         AS DEFAULT_CURRENCY  
				             , (SELECT MOM_COMMON_PKG.FN_GET_SALES_PRICE( O.DIVISION_CD
				                                                        , O.COMPANY_CD
				                                                        , O.VENDOR_CD
				                                                        , O.ITEM_ID
				                                                        , O.MARKET_CD
				                                                        , O.CURRENCY_CD
				                                                        , TRUNC(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(O.DIVISION_CD, O.COMPANY_CD)))  
				                FROM   DUAL ) AS UNIT_PRICE
				             , (SELECT MOM_COMMON_PKG.FN_GET_CURRENT_EXCHANGE_RATE( O.DIVISION_CD
				                                                                  , O.COMPANY_CD
				                                                                  , O.CURRENCY_CD
				                                                                  , TRUNC(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(O.DIVISION_CD, O.COMPANY_CD)))  
				                FROM   DUAL )      AS EXCHANGE_RATE  
				             , I.ITEM_DEPARTURE_ID
				             , O.CUSTOMER_PO_NO   AS PO_NO
				             , (SELECT MOM_COMMON_PKG.FN_GET_B2BI_CUSTOMER_FLAG( O.DIVISION_CD
				                                                               , O.COMPANY_CD
				                                                               , O.VENDOR_CD)
				                FROM   DUAL ) AS B2BI_CUSTOMER_FLAG      
				             , R.BUSINESSID
				             , R.RECEVING_STATS  
				             , R.RECEIVING_QUANTITY 
				             , I.DESCRIPTION      
				             , MID.CONVERSION_UNIT  
                        	 , MID.CONVERSION_UNIT_QTY       
				        FROM   MOM_SALES_ORDER_V O
				        	 , MOM_ITEM_DEFINITION  MID
				             , MOM_ITEM_STOCK_INOUT I
				             , MOM_PARAMETER P
				             , MOM_B2BI_RECEIVING_V R
				        WHERE  O.DIVISION_CD       = MID.DIVISION_CD
	                    AND    O.COMPANY_CD        = MID.COMPANY_CD
	                    AND    O.ITEM_ID    = MID.ITEM_ID
	                    AND    O.DIVISION_CD       = I.DIVISION_CD(+)
				        AND    O.COMPANY_CD        = I.COMPANY_CD(+)
				        AND    O.SALES_ORDER_ID    = I.ITEM_ORDER_ID(+)
				        AND    O.DIVISION_CD       = P.DIVISION_CD
				        AND    O.COMPANY_CD        = P.COMPANY_CD
				        AND    I.DIVISION_CD       = R.DIVISION_CD(+)
				        AND    I.PO_NO             = R.PURCHASE_ORDER_NO(+)
				        AND    I.ITEM_DEPARTURE_ID = R.DEPARTURE_NUMBER(+)
				        AND    I.QTY               = R.RECEIVING_QUANTITY(+)
				        AND    I.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
				       <if test="LocationName != null and LocationName != ''">
				        AND I.LOCATION_CD = #{LocationName, jdbcType=VARCHAR}
				       </if>
				        AND    I.IO_TYPE = 'I'
				        AND    I.IO_CATEGORY IN ('S001', 'S002')
				        AND    NVL(R.RECEVING_STATS, 'RECEVING') <![CDATA[<>]]> 'CANCEL'
				       <if test="fromDate != null and fromDate != ''">
				        AND    I.IO_TIME BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
				       </if>
				       <if test="customerName != null and customerName != ''">
				        AND O.VENDOR_CD = #{customerName, jdbcType=VARCHAR}
				       </if>
				       <if test="destinationName != null and destinationName != ''">
				        AND O.DESTINATION_CD = #{destinationName, jdbcType=VARCHAR}
				       </if>
				       <if test="itemName != null and itemName != ''">
				        AND (UPPER(O.ITEM_ID) LIKE UPPER('%' || #{itemName, jdbcType=VARCHAR} || '%') 
				         OR UPPER(O.ITEM_NAME) LIKE UPPER('%' || #{itemName, jdbcType=VARCHAR} || '%'))
				       </if>
				       <if test="marketName != null and marketName != ''">
				        AND O.MARKET_CD = #{marketName, jdbcType=VARCHAR}
				       </if>
				       <if test="currencyName != null and currencyName != ''">
				        AND O.CURRENCY_CD = #{currencyName, jdbcType=VARCHAR}
				       </if>
				       <if test="createByName != null and createByName != ''">
				        AND UPPER(I.CREATE_BY) LIKE UPPER('%' || #{createByName, jdbcType=VARCHAR} || '%')
				       </if>
				       <if test="customerPoId != null and customerPoId != ''">
				        AND UPPER(O.CUSTOMER_PO_ID) LIKE UPPER('%' || #{customerPoId, jdbcType=VARCHAR} || '%')
				       </if>
<!-- 				        AND NOT EXISTS (SELECT '*' -->
<!-- 			                              FROM   MOM_ITEM_STOCK_INOUT IC -->
<!-- 			                             WHERE   IC.DIVISION_CD    = I.DIVISION_CD -->
<!-- 			                               AND   IC.COMPANY_CD     = I.COMPANY_CD -->
<!-- 			                               AND   IC.PREV_STOCK_INOUT_ID = I.ITEM_STOCK_INOUT_ID -->
<!-- 			                               AND   ((IC.IO_TYPE = 'I' AND IC.IO_CATEGORY = 'SC001')  -->
<!-- 			                                OR   (IC.IO_TYPE = 'O'  AND IC.IO_CATEGORY IN ('S003', 'S004')))) -->
						AND   NOT EXISTS (SELECT '*'
	                                        FROM MOM_ITEM_STOCK_INOUT MIC
	                                       WHERE MIC.DIVISION_CD = I.DIVISION_CD
	                                         AND MIC.COMPANY_CD = I.COMPANY_CD
	                                         AND MIC.PREV_STOCK_INOUT_ID = I.ITEM_STOCK_INOUT_ID
	                                         AND MIC.IO_TYPE = I.IO_TYPE)
	                    AND not EXISTS (select '*'
		                                from   mom_item_stock_inout io
		                                where  io.division_cd   = I.DIVISION_CD 
		                                and    io.company_cd    = I.COMPANY_CD
		                                and    io.io_type       = 'O'
		                                and    io.io_category   IN ('S003', 'S004')
		                                and    io.prev_stock_inout_id = i.ITEM_STOCK_INOUT_ID
		                                and    not exists ( select '*'
		                                                    from   mom_item_stock_inout b
		                                                    where  B.division_cd = io.DIVISION_CD 
		                                                    and    B.company_cd  = io.COMPANY_CD
		                                                    and    b.io_type     = io.io_type
		                                                    and    b.prev_stock_inout_id = io.item_stock_inout_id))
				        AND NVL(O.ORDER_STATE, 'N') IN ('N', 'F')  
				       <if test ="closeFlag != null and closeFlag != ''">
							<choose>
								<when test='closeFlag.equals("N")'>
								 AND (R.RECEIVING_QUANTITY = 0
				                  OR  R.RECEIVING_QUANTITY IS NULL)
								</when>
								<otherwise>
								 AND R.RECEIVING_QUANTITY <![CDATA[>]]> 0
								</otherwise>
							</choose>
					   </if>                  
				      ) A         
					WHERE 1=1
<!-- 				) A -->
<!-- 			   , (SELECT *  -->
<!-- 			        FROM MOM_ITEM_DEFINITION  -->
<!-- 			       WHERE DIVISION_CD =  #{divisionCd, jdbcType=VARCHAR} -->
<!-- 			         AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR} ) MI -->
<!-- 			WHERE A.ITEM_ID = MI.ITEM_ID(+) -->
			ORDER BY A.VENDOR_NAME, A.DESTINATION_NAME, A.IO_TIME, A.CUSTOMER_PO_ID, A.SALES_ORDER_ID, A.ITEM_ID
	</select>
			
	<select id="get_destination_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT DISTINCT A.DESTINATION_CD CODE
	              	  , A.DESTINATION_CD || '(' || B.VENDOR_NAME || ')' NAME
	  	FROM MOM_PRODUCT_CLASS_REL A
	       , MOM_VENDOR B
	 	WHERE A.DIVISION_CD = B.DIVISION_CD
	   	AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	   	AND NVL(A.USE_YN, 'Y') = 'Y'
	   	AND NVL(B.USE_YN, 'Y') = 'Y'
		ORDER BY A.DESTINATION_CD
	</select>
	
	<delete id="remove_productShippingCloseTemp" parameterType="java.util.HashMap">
		DELETE FROM MOM_SHIP_RESULT_TEMP
		 WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
  		   AND  COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
  		   AND  ORDER_TYPE = #{orderType, jdbcType=VARCHAR}
	</delete>
	
	<insert id="create_productShippingCloseTemp" parameterType="java.util.HashMap">
		INSERT INTO MOM_SHIP_RESULT_TEMP(
			DIVISION_CD,
			COMPANY_CD,
			ORDER_TYPE,
			SALES_ORDER_ID,
			ITEM_ID,
			CUSTOMER_PO_ID,
			CUSTOMER_ID,
			DESTINATION,
			IO_TIME,
			QTY,
			FROM_LOCATION_CD,
			TO_LOCATION_CD,
			UNIT_PRICE,
			MARKET_CD,
			CURRENCY_CD,
			SHIP_IN_FLAG,
			ITEM_STOCK_INOUT_ID,
			PO_NO, 
			DEPARTURE_NUMBER, 
			B2BI_CUSTOMER_FLAG,
			BUSINESSID,
			CREATE_BY,
			CREATE_DATE,
			CONVERSION_UNIT_QTY,
			DESCRIPTION
			)
			VALUES(
			#{divisionCd, jdbcType=VARCHAR},
			#{companyCd, jdbcType=VARCHAR},
			#{orderType, jdbcType=VARCHAR},
			#{salesOrderId, jdbcType=VARCHAR},
			#{itemId, jdbcType=VARCHAR},
			#{customerPoId, jdbcType=VARCHAR},
			#{vendorCd, jdbcType=VARCHAR},
			#{destinationCd, jdbcType=VARCHAR},
			TO_DATE(#{confirmDate, jdbcType=VARCHAR}, 'YYYY-MM-DD'),
			#{shipConfirmQty, jdbcType=INTEGER},
			#{fromLocationCd, jdbcType=VARCHAR},
			#{locationCd, jdbcType=VARCHAR},
			#{unitPrice, jdbcType=INTEGER},
			#{marketCd, jdbcType=VARCHAR},
			#{currencyCd, jdbcType=VARCHAR},
			#{shipInFlag, jdbcType=VARCHAR},
			#{itemStockInoutId, jdbcType=VARCHAR},
			#{poNo, jdbcType=VARCHAR},
			#{itemDepartureId, jdbcType=VARCHAR},
			#{b2biCustomerFlag, jdbcType=VARCHAR},
			#{businessid, jdbcType=VARCHAR},
			#{createBy, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{conversionUnitQty, jdbcType=INTEGER},
			#{description, jdbcType=VARCHAR}
		)
	</insert>
	
	<update id="modify_productShippingCloseTemp" parameterType="java.util.HashMap">
		UPDATE MOM_SHIP_RESULT_TEMP
		SET QTY = #{shipConfirmQty, jdbcType=INTEGER}
		  , CONVERSION_UNIT_QTY = #{conversionUnitQty, jdbcType=INTEGER}
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	    AND COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
	   	AND ORDER_TYPE = #{orderType, jdbcType=VARCHAR}
	   	AND 0 = 1
	</update>
	
	<insert id="create_productShippingClose" statementType="CALLABLE">
	{
        CALL P_CREATE_SHIP_RESULT (
        	#{p_err_code, mode=OUT, jdbcType=VARCHAR}
           ,#{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           ,#{divisionCd, mode=IN, jdbcType=VARCHAR}
           ,#{companyCd, mode=IN, jdbcType=VARCHAR}
           ,#{orderType, mode=IN, jdbcType=VARCHAR}
        )
    }
    </insert>
    
</mapper>