<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.pop.popResult">
	<!-- ################################################################################ -->
	
	<select id="get_test_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    'AAA' AS AAA
		FROM DUAL
	</select>
	
	<select id="get_labelDesign_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.METHOD_ID        
		    , A.METHOD_DESC      
		    , A.METHOD_FIELD
		    , A.METHOD_FIELD_DESC
		  FROM MOM_POP_LABELDESIGN A
		ORDER BY A.METHOD_DESC
	</select>
	
	<select id="get_dynamicFacility_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.FACILITY_CD AS CODE 
		     , A.FACILITY_CD||'('||A.FACILITY_NAME ||')' AS NAME
		  FROM MOM_FACILITY A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NVL(A.USE_YN, 'Y') = 'Y'
		  <if test = "stockType != null and stockType != ''">
		   AND A.FACILITY_TYPE IN (SELECT CODE_ID 
                                   FROM   MOM_CODE
                                   WHERE  CODE_CLASS_ID = 'FACILITY_TYPE'
                                   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                   <if test = "stockType =='WO'">
                                   AND    NVL(ATTRIBUTE9, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='MAT'">
                                   AND    NVL(ATTRIBUTE8, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='SO'">
                                   AND    NVL(ATTRIBUTE10, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='MRTN'">
                                   AND    NVL(ATTRIBUTE12, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='SRTN'">
                                   AND    NVL(ATTRIBUTE5, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='CLOSE'">
                                   AND    NVL(ATTRIBUTE11, 'N')  = 'Y'
                                   </if>
<!--                                    <if test = 'stockType =="PO"'> -->
<!--                                    AND    NVL(ATTRIBUTE5, 'N')  = 'Y' -->
<!--                                    </if> -->
                                   AND    NVL(USE_YN, 'Y') = 'Y')
		  </if>
		  <if test = "returnType != null and returnType != ''">
		   AND A.FACILITY_TYPE IN (SELECT CODE_ID 
                                   FROM   MOM_CODE
                                   WHERE  CODE_CLASS_ID = 'FACILITY_TYPE'
                                   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                   <if test = "returnType =='MTP'">
                                   AND    NVL(ATTRIBUTE6, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTW' and locationType == 'FROM'">
                                   AND    NVL(ATTRIBUTE14, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTW' and locationType == 'TO_M'">
                                   AND    NVL(ATTRIBUTE1, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTW' and locationType == 'TO_P'">
                                   AND    NVL(ATTRIBUTE3, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTO' and locationType == 'FROM'">
                                   AND    NVL(ATTRIBUTE15, 'N')  = 'Y'
                                   </if>
                                   <if test = "returnType =='MTO' and locationType == 'TO'">
                                   AND    NVL(ATTRIBUTE4, 'N')  = 'Y'
                                   </if>
                                   <if test = 'returnType =="P" and locationType == "TO"'>
                                   AND    NVL(ATTRIBUTE5, 'N')  = 'Y'
                                   </if>
                                   <if test = 'returnType =="P" and locationType == "FROM"'>
                                   AND    NVL(ATTRIBUTE7, 'N')  = 'Y'
                                   </if>
                                   AND    NVL(USE_YN, 'Y') = 'Y')
		  </if>
		  <if test = "facilityClassCd != '' and facilityClassCd != null">
		   AND A.FACILITY_CLASS_CD = #{facilityClassCd, jdbcType=VARCHAR}
		  </if>
		 ORDER BY A.FACILITY_SEQ, FACILITY_NAME
	</select>
	
	<select id="get_toFacility_list2" resultType="camelMap" parameterType="java.util.HashMap">
        SELECT A.FACILITY_CD AS CODE 
             , A.FACILITY_CD||'('||A.FACILITY_NAME ||')' AS NAME
          FROM MOM_FACILITY A
         WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND NVL(A.USE_YN, 'Y') = 'Y'
          <if test = "stockType != null and stockType != ''">
           AND A.FACILITY_TYPE IN (SELECT CODE_ID 
                                   FROM   MOM_CODE
                                   WHERE  CODE_CLASS_ID = 'FACILITY_TYPE'
                                   AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                   <if test = "stockType =='MAT'">
                                   AND    NVL(ATTRIBUTE16, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='WO'">
                                   AND    NVL(ATTRIBUTE17, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='SO'">
                                   AND    NVL(ATTRIBUTE18, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='MRTN'">
                                   AND    NVL(ATTRIBUTE13, 'N')  = 'Y'
                                   </if>
                                   <if test = "stockType =='SRTN'">
                                   AND    NVL(ATTRIBUTE13, 'N')  = 'Y'
                                   </if>
                                   AND    NVL(USE_YN, 'Y') = 'Y')
          </if>
          <if test = "facilityClassCd != '' and facilityClassCd != null">
           AND A.FACILITY_CLASS_CD = #{facilityClassCd, jdbcType=VARCHAR}
          </if>
         ORDER BY A.FACILITY_SEQ, FACILITY_NAME
    </select>
    
	<select id="get_label_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.LABEL_ID   
		    , A.LABEL_DESC 
		    , A.PRINT_ID   
		    , A.LABELSTATUS
		    , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		    , A.CREATE_BY  
		    , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		    , A.UPDATE_BY 
		  FROM MOM_POP_LABELLIST A 
		 ORDER BY A.LABEL_DESC
	</select>
	
	<select id="get_zpl_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.NAME || ' : ' || REPLACE(A.IP, 'TCP^', '') AS NAME
             , A.IP
		  FROM (SELECT 'GT    ' AS NAME
		              , GTPRINT AS IP
		           FROM MOM_POP_BCRPORT
		          WHERE MACADDRESS = #{MACADRESS, jdbcType=VARCHAR}
		         UNION
		         SELECT 'CT    ' AS NAME
		              , CTPRINT AS IP
		           FROM MOM_POP_BCRPORT
		          WHERE MACADDRESS =  #{MACADRESS, jdbcType=VARCHAR}
		         UNION
		         SELECT 'PALLET' AS NAME
		              , PALLETPRINT AS IP
		           FROM MOM_POP_BCRPORT
		          WHERE MACADDRESS =  #{MACADRESS, jdbcType=VARCHAR}
		         UNION
		         SELECT 'GANBAN' AS NAME
		              , GANBANPRINT AS IP
		           FROM MOM_POP_BCRPORT
		          WHERE MACADDRESS =  #{MACADRESS, jdbcType=VARCHAR} ) A
		 WHERE A.IP != 'NONE'
	</select>
	
	<select id="get_mold_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT '' AS MOLD_ID
		     , 0 AS SEQ
		  FROM DUAL
		 UNION
		SELECT ITEM_ID AS MOLD_ID
             , 1 AS SEQ
          FROM MOM_WORK_ORDER A
		  LEFT OUTER JOIN MOM_BOM B
		    ON A.DIVISION_CD   = B.DIVISION_CD
		   AND A.COMPANY_CD    = B.COMPANY_CD
		   AND A.ITEM_ID       = B.PARENT_ITEM_ID
         WHERE A.DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		   AND B.USE_YN        = 'Y'
		 UNION
		SELECT B.CHILD_ITEM_ID AS MOLD_ID
		     , B.BOM_SEQ + 1 AS SEQ
		  FROM MOM_WORK_ORDER A
		  LEFT OUTER JOIN MOM_BOM B
		    ON A.DIVISION_CD   = B.DIVISION_CD
		   AND A.COMPANY_CD    = B.COMPANY_CD
		   AND A.ITEM_ID       = B.PARENT_ITEM_ID
		 WHERE A.DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		   AND B.USE_YN        = 'Y'
		 ORDER BY SEQ
	</select>
	
	<select id="get_label" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.LABEL_ID   
		    , A.LABEL_DESC 
		    , A.PRINT_ID   
		    , A.LABELSTATUS
		    , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		    , A.CREATE_BY  
		    , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		    , A.UPDATE_BY 
		  FROM MOM_POP_LABELLIST A 
		 WHERE LABEL_ID = #{LABEL_ID, jdbcType=VARCHAR}
		 AND   PRINT_ID = #{PRINT_ID, jdbcType=VARCHAR}
	</select>
	
	<select id="get_bcrport" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
            A.MACADDRESS 
            , A.PCNAME     
            , A.IP         
            , A.GTPRINT    
            , A.CTPRINT    
            , A.PALLETPRINT
            , A.SLEEP      
            , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
            , A.CREATE_BY  
            , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
            , A.UPDATE_BY
            , A.PUSHBUTTON1
            , A.PUSHBUTTON2
            , A.USEMANAGEMENT
            , A.LABELYN
            , A.LOGINREMEMBER
            , A.LINEREMEMBER
            , A.GANBANPRINT
            , A.PRINT_ID
            , A.INPUTTYPE
            , B.PRINT_DPI_MM
          FROM MOM_POP_BCRPORT A,
               MOM_POP_PRINTINFO B
		 WHERE A.PRINT_ID = B.PRINT_ID
		 AND   A.MACADDRESS = #{MACADDRESS, jdbcType=VARCHAR}
	</select>
	
	<select id="get_printInfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.PRINT_ID, 
		    A.PRINT_DESC, 
		    A.PRINT_DPI_MM 
		  FROM MOM_POP_PRINTINFO A
		ORDER BY A.PRINT_DESC
	</select>
	
	<select id="get_popline_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.RESOURCE_CD
		    , A.RESOURCE_NAME
		    , A.RESOURCE_NAME || '(' || A.RESOURCE_CD || ')' AS NAME
		    , COUNT(B.EQUIPMENT_CD) AS EQUIPMENT_NUM
		 FROM MOM_RESOURCE A
		 LEFT OUTER JOIN MOM_EQUIPMENT B
		   ON A.DIVISION_CD = B.DIVISION_CD
		  AND A.COMPANY_CD = B.COMPANY_CD
		  AND A.RESOURCE_CD = B.RESOURCE_CD
		  AND B.USE_YN = 'Y'
		WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.OUTSOURCING_FLAG != 'Y'
		AND   A.USE_YN = 'Y'
		GROUP BY A.RESOURCE_CD, A.RESOURCE_NAME
		ORDER BY A.RESOURCE_NAME
	</select>
	
	<select id="get_labelObject_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.LABEL_ID 
		    , A.PRINT_ID
		    , A.LABEL_SEQ 
		    , A.METHOD_ID 
		    , TO_CHAR(A.X_POSITION_MM)        AS X_POSITION_MM
		    , TO_CHAR(A.Y_POSITION_MM)        AS  Y_POSITION_MM
		    , TO_CHAR(A.X_POSITION_PIX)       AS  X_POSITION_PIX
		    , TO_CHAR(A.Y_POSITION_PIX)       AS  Y_POSITION_PIX
		    , TO_CHAR(A.LINE_THICKNESS)       AS  LINE_THICKNESS
		    , TO_CHAR(A.WIDTH_AREA_MM)        AS  WIDTH_AREA_MM
		    , TO_CHAR(A.HEIGHT_AREA_MM)       AS HEIGHT_AREA_MM  
		    , TO_CHAR(A.WIDTH_AREA_PIX)       AS  WIDTH_AREA_PIX
		    , TO_CHAR(A.HEIGHT_AREA_PIX)      AS  HEIGHT_AREA_PIX
		    , TO_CHAR(A.BARCODE_MODULE_WIDTH) AS  BARCODE_MODULE_WIDTH
		    , TO_CHAR(A.BARCODE_RATIO)        AS  BARCODE_RATIO
		    , A.LANDSCAPE 
		    , TO_CHAR(A.BARCODE_HEIGHT_MM)    AS BARCODE_HEIGHT_MM
		    , TO_CHAR(A.BARCODE_HEIGHT_PIX)   AS BARCODE_HEIGHT_PIX
		    , A.BARCODE_TEXT_UNDER_YN
		    , A.BARCODE_2D_SIZE
		    , A.LABEL_VALUE
		    , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		    , A.CREATE_BY
		    , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE 
		    , A.UPDATE_BY
		FROM MOM_POP_LABELOBJECT A
		WHERE A.LABEL_ID = #{LABEL_ID, jdbcType=VARCHAR}
		ORDER BY A.LABEL_SEQ
	</select>
	
	<!-- 자재불출 라인 조회  2019.06.17 조아람 조회-->
	<select id="get_materialGILine_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT FACILITY_CD
     		 , FACILITY_NAME 
		  FROM MOM_FACILITY
		 WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND FACILITY_CLASS_CD = 'AREA'
		   AND FACILITY_TYPE  IN ('FAC300')
		   AND USE_YN = 'Y'
		   AND STOCK_USE_FLAG = 'Y'
		 ORDER BY PARENT_FACILITY_CD, FACILITY_SEQ
	</select>
	
	<!-- ganban 목록 조회 -->
	<select id="get_ganban_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT GANBAN_ID
		     , ITEM_ID
		     , ITEM_NAME
		     , QTY
		     , USE_YN
		FROM (
				SELECT A.GANBAN_ID
				     , A.ITEM_ID
				     , B.ITEM_NAME
				     , A.QTY
				     , A.USE_YN
				     , (SELECT COUNT(1) FROM TU_GANBAN WHERE PARENT_GANBAN_ID = A.GANBAN_ID) AS CHILD_CNT
				     , CASE WHEN A.GANBAN_TYPE = 'BUTTON'
				            THEN (SELECT COUNT(1)
				                    FROM MOM_WORK_ORDER_RESULT
				                   WHERE STATE = 'C'
				                     AND PREV_WORK_ORDER_RESULT_ID IN (SELECT WORK_ORDER_RESULT_ID 
                                                                         FROM MOM_WORK_ORDER_RESULT
                                                                        WHERE CT = A.GANBAN_ID))
                            ELSE 0
                        END AS CANCEL_CHK
				  FROM TU_GANBAN A
				  LEFT OUTER JOIN MOM_ITEM_DEFINITION B
				    ON A.DIVISION_CD        = B.DIVISION_CD
				   AND A.COMPANY_CD         = B.COMPANY_CD
				   AND A.ITEM_ID            = B.ITEM_ID
				 WHERE 1=1
				   AND A.DIVISION_CD                        = #{DIVISION_CD, jdbcType=VARCHAR}
				   AND A.COMPANY_CD                         = #{COMPANY_CD,  jdbcType=VARCHAR}
				   AND TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD') = #{NOWDATE, jdbcType=VARCHAR}
				<if test="LOCATION_CD != null and LOCATION_CD != ''">
		           AND A.LOCATION_CD                        = #{LOCATION_CD, jdbcType=VARCHAR}
		        </if>
		        <if test="USE_YN != null and USE_YN != ''">
		           AND A.USE_YN                             = #{USE_YN, jdbcType=VARCHAR}
		        </if>
		        ) ROWDT
		WHERE ROWDT.CHILD_CNT = 0
		  AND ROWDT.CANCEL_CHK = 0
	</select>
	
	<!-- 작지상태 변경시 간판 실적수량과 간판 스캔수량 확인 -->
	<select id="get_ChkWorkOrderState" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT NVL(SUM(QTY), 0) AS NONCTQTY
          FROM MOM_POP_LABEL_SNMAKE
         WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
           AND COMPANY_CD = #{COMPANY_CD,  jdbcType=VARCHAR}
           AND WORK_ORDER_ID = #{P_WORK_ORDER_ID,  jdbcType=VARCHAR}
           AND USE_YN = 'Y'
           AND INS_USE_YN = 'Y'
           AND LABELTYPE = 'SN'
           AND RST_GANBAN_ID = 'NODATA'
	</select>
	
	<!-- 작업지시서 목록 조회 -->
	<select id="get_popwo_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.RESOURCE_CD
		    , A.WORK_ORDER_ID
		    , A.PRODUCT_ORDER_ID
		    , TO_CHAR(A.PLAN_DATE, 'YYYY-MM-DD') AS PLANDATE
		    , TO_CHAR(A.START_TIME, 'YY-MM-DD HH24:MI') AS START_TIME
		    , TO_CHAR(A.END_TIME, 'YY-MM-DD HH24:MI') AS END_TIME
		    , A.ITEM_ID
		    , B.ITEM_NAME
		    , A.CONFIRM_QTY
		    , NVL (A.CONFIRM_QTY, 0) - NVL (A.GOOD_QTY, 0) - NVL (A.CANCEL_QTY, '0') AS REMAIN_QTY 
		    , NVL (A.GOOD_QTY, '0') AS QTY
		    , NVL (A.BAD_QTY, '0') AS BAD_QTY
		    , NVL (A.CANCEL_QTY, '0') AS CANCEL_QTY
		    , A.PRODUCT_ORDER_TYPE AS WO_TYPE
		    , C.CODE_NAME AS WOTYPENAME
		    , A.WO_STATE
		    , D.CODE_NAME AS WOSTATENAME
		    , NVL(B.POP_MAKE_LOT_QTY, A.CONFIRM_QTY) AS POP_MAKE_LOT_QTY
		    , B.POP_INPUT_TYPE
		    , NVL(B.POP_CT_QTY, A.CONFIRM_QTY) AS POP_CT_QTY
		    , B.POP_GT_LABELID     
            , B.POP_CT_LABELID     
            , B.POP_PALLET_LABELID
            , B.POP_GANBAN_LABELID  
            , B.POP_EAN             AS EAN
            , B.POP_UPC             AS UPC
            , B.POP_DESTINATION     AS DESTINATION
            , B.POP_MADEBY          AS MADEBY
            , ''                    AS SN
            , ''                    AS CT
            , ''                    AS PALLETID
            , B.SPECIFICATION
		FROM MOM_WORK_ORDER A,
		     MOM_ITEM_DEFINITION B,
		     (SELECT 
		        CC.CODE_ID
		        , CC.CODE_NAME
		      FROM MOM_CODE CC
		      WHERE CC.DIVISION_CD    = #{DIVISION_CD, jdbcType=VARCHAR}
		      AND   CC.COMPANY_CD     = #{COMPANY_CD, jdbcType=VARCHAR}
		      AND   CC.CODE_CLASS_ID  = 'PRODUCT_ORDER_TYPE'
		      ) C,
		      (SELECT 
		        DD.CODE_ID
		        , DD.CODE_NAME
		      FROM MOM_CODE DD
		      WHERE DD.DIVISION_CD    = #{DIVISION_CD, jdbcType=VARCHAR}
		      AND   DD.COMPANY_CD     = #{COMPANY_CD, jdbcType=VARCHAR}
		      AND   DD.CODE_CLASS_ID  = 'WORK_ORDER_STATE'
		      ) D
		WHERE 1=1
		AND   A.ITEM_ID = B.ITEM_ID 
		AND   A.PRODUCT_ORDER_TYPE = C.CODE_ID
		AND   A.WO_STATE           = D.CODE_ID
		AND   B.DIVISION_CD        = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   B.COMPANY_CD         = #{COMPANY_CD,  jdbcType=VARCHAR}
		<if test="RESOURCE_CD != null and RESOURCE_CD != ''">
			AND   A.RESOURCE_CD        = #{RESOURCE_CD, jdbcType=VARCHAR}
		</if>
		<if test="EQUIPMENT_CD != null and EQUIPMENT_CD != ''">
        	AND A.EQUIPMENT_CD = #{EQUIPMENT_CD, jdbcType=VARCHAR}
        </if>
		<if test="WORK_ORDER_ID != null and WORK_ORDER_ID != ''">
        	AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
        </if>
        <if test="TODAYFLAG != null and TODAYFLAG != ''">
        	<choose>
	        <when test='TODAYFLAG.equals("TODAY")'>
	        	<![CDATA[AND   A.PLAN_DATE = TO_DATE(#{NOWDATE, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24MISS')]]>
    	    </when>
    	    <when test='TODAYFLAG.equals("YESTERDAY")'>
    	    	<![CDATA[AND   A.PLAN_DATE < TO_DATE(#{NOWDATE, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24MISS') + 1]]>
    	    </when>
    	    </choose>
        </if>
        <if test="WO_STATE != null and WO_STATE != ''">
        	<choose>
	        <when test='WO_STATE.equals("ALL")'>
	        	AND   A.WO_STATE IN ('A', 'R', 'H')
    	    </when>
    	    <when test='WO_STATE.equals("R")'>
    	    	AND   A.WO_STATE = 'R'
    	    </when>
    	    </choose>
        </if>
        <if test="TODAYFLAG != null and TODAYFLAG != ''">
        	<choose>
	        <when test='TODAYFLAG.equals("TODAY")'>
	        	ORDER BY A.PLAN_DATE, A.PRIORITY
    	    </when>
    	    <when test='TODAYFLAG.equals("YESTERDAY")'>
    	    	ORDER BY A.PLAN_DATE DESC, A.PRIORITY
    	    </when>
    	    </choose>
        </if>
	</select>
	
	<!-- 작업지시서 항목 조회 -->
	<select id="get_popwo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
		    A.RESOURCE_CD
		    , A.WORK_ORDER_ID
		    , A.PRODUCT_ORDER_ID
		    , TO_CHAR(A.PLAN_START_TIME, 'YYYY-MM-DD HH24:MI:SS') AS PLANDATE
		    , TO_CHAR(A.START_TIME, 'YY-MM-DD HH24:MI') AS START_TIME
		    , TO_CHAR(A.END_TIME, 'YY-MM-DD HH24:MI') AS END_TIME
		    , A.ITEM_ID
		    , B.ITEM_NAME
		    , A.CONFIRM_QTY
		    , NVL (A.CONFIRM_QTY, 0) - NVL (A.GOOD_QTY, 0) - NVL (A.CANCEL_QTY, '0') AS REMAIN_QTY 
		    , NVL (A.GOOD_QTY, '0') AS QTY
		    , NVL (A.BAD_QTY, '0') AS BAD_QTY
		    , NVL (A.CANCEL_QTY, '0') AS CANCEL_QTY
		    , A.PRODUCT_ORDER_TYPE AS WO_TYPE
		    , C.CODE_NAME AS WOTYPENAME
		    , A.WO_STATE
		    , D.CODE_NAME AS WOSTATENAME
		    , NVL(B.POP_MAKE_LOT_QTY, A.CONFIRM_QTY) AS POP_MAKE_LOT_QTY
		    , B.POP_INPUT_TYPE
		    , NVL(B.POP_CT_QTY, A.CONFIRM_QTY) AS POP_CT_QTY
		    , B.POP_GT_LABELID
            , TO_CHAR(SYSDATE, 'YYYY.MM.DD') AS PRINTDATE
            , TO_CHAR(SYSDATE, 'HH24MISS') AS PRINTTIME
            , B.POP_CT_LABELID     
            , B.POP_PALLET_LABELID
            , B.POP_GANBAN_LABELID  
            , B.POP_EAN             AS EAN
            , B.POP_UPC             AS UPC
            , B.POP_DESTINATION     AS DESTINATION
            , B.POP_MADEBY          AS MADEBY
            , ''                    AS SN
            , ''                    AS CT
            , ''                    AS PALLETID
            , TO_CHAR(A.PLAN_DATE, 'YYYY-MM-DD') AS PLAN_DATE 
            , TO_CHAR(A.PLAN_DATE, 'MM') || '월 ' || TO_CHAR(A.PLAN_DATE, 'DD') || '일 총 생산현황(양품기준)'  AS TODAYTEXT
            , (
		        SELECT 
		            SUM(AA.PLAN_QTY) 
		        FROM MOM_WORK_ORDER AA 
		        WHERE AA.PLAN_DATE BETWEEN TO_DATE(TO_CHAR(A.PLAN_DATE, 'YYYYMMDD') || '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(TO_CHAR(A.PLAN_DATE, 'YYYYMMDD') || '235959', 'YYYYMMDDHH24MISS') 
		        AND AA.RESOURCE_CD        = A.RESOURCE_CD
		      ) AS TODAYPLAN
		    , (
		        SELECT 
		            SUM(AA.GOOD_QTY) 
		        FROM MOM_WORK_ORDER AA 
		        WHERE AA.PLAN_DATE BETWEEN TO_DATE(TO_CHAR(A.PLAN_DATE, 'YYYYMMDD') || '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(TO_CHAR(A.PLAN_DATE, 'YYYYMMDD') || '235959', 'YYYYMMDDHH24MISS') 
		        AND AA.RESOURCE_CD        = A.RESOURCE_CD
		      ) AS TODAYGOODQTY
		      , (SELECT MAX(NVL(AA.CT, 'NODATA')) FROM MOM_WORK_ORDER_RESULT AA WHERE AA.DIVISION_CD = A.DIVISION_CD AND AA.COMPANY_CD = A.COMPANY_CD AND AA.WORK_ORDER_ID = A.WORK_ORDER_ID) AS AAA
		      , FN_GET_POP_BOXNUMBER(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, (SELECT NVL(MAX(AA.CT), 'NODATA') FROM MOM_WORK_ORDER_RESULT AA WHERE AA.DIVISION_CD = A.DIVISION_CD AND AA.COMPANY_CD = A.COMPANY_CD AND AA.WORK_ORDER_ID = A.WORK_ORDER_ID AND AA.CT != 'NODATA'), NVL(B.POP_CT_QTY, A.CONFIRM_QTY), 'BOXNUMBER') AS NOWBOXCOUNT
              , FN_GET_POP_BOXNUMBER(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, '', NVL(B.POP_CT_QTY, A.CONFIRM_QTY), 'ALLBOXNUMBER') AS ALLBOXCOUNT
              , B.SPECIFICATION
              , B.LABELDESC
              , B.LABELSPEC
              , ''         AS SHORTSN
              , ''         AS LONGSN
              , NVL((SELECT LABEL_TYPE FROM MOM_POP_LABELLIST WHERE LABEL_ID = B.POP_CT_LABELID), 'NONE') AS LABELTYPE
              , E.GOOD_LOCATION_CD
		FROM MOM_WORK_ORDER A,
		     MOM_ITEM_DEFINITION B,
		     (SELECT 
		        CC.CODE_ID
		        , CC.CODE_NAME
		      FROM MOM_CODE CC
		      WHERE CC.DIVISION_CD    = #{DIVISION_CD, jdbcType=VARCHAR}
		      AND   CC.COMPANY_CD     = #{COMPANY_CD, jdbcType=VARCHAR}
		      AND   CC.CODE_CLASS_ID  = 'PRODUCT_ORDER_TYPE'
		      ) C,
		      (SELECT 
		        DD.CODE_ID
		        , DD.CODE_NAME
		      FROM MOM_CODE DD
		      WHERE DD.DIVISION_CD    = #{DIVISION_CD, jdbcType=VARCHAR}
		      AND   DD.COMPANY_CD     = #{COMPANY_CD, jdbcType=VARCHAR}
		      AND   DD.CODE_CLASS_ID  = 'WORK_ORDER_STATE'
		      ) D,
		      MOM_RESOURCE E
		WHERE 1=1
		AND   A.ITEM_ID = B.ITEM_ID 
		AND   A.PRODUCT_ORDER_TYPE = C.CODE_ID
		AND   A.WO_STATE           = D.CODE_ID
		AND	  A.DIVISION_CD 	   = E.DIVISION_CD
        AND   A.COMPANY_CD	 	   = E.COMPANY_CD
        AND   A.RESOURCE_CD 	   = E.RESOURCE_CD
		AND   B.DIVISION_CD        = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   B.COMPANY_CD         = #{COMPANY_CD,  jdbcType=VARCHAR}
		AND   A.RESOURCE_CD        = #{RESOURCE_CD, jdbcType=VARCHAR}
		<if test="WORK_ORDER_ID != null and WORK_ORDER_ID != ''">
        	AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
        </if>
	</select>
	
	<select id="get_longshortsn" resultType="camelMap" parameterType="java.util.HashMap">
                 SELECT 
                     FN_GET_POP_SHORTLONG('SHORTSN', #{DIVISION_CD, jdbcType=VARCHAR}, #{COMPANY_CD, jdbcType=VARCHAR}, #{ITEM_ID, jdbcType=VARCHAR}, #{PRODUCT_ORDER_ID, jdbcType=VARCHAR})  AS SHORTSN
                     , FN_GET_POP_SHORTLONG('LONGSN', #{DIVISION_CD, jdbcType=VARCHAR}, #{COMPANY_CD, jdbcType=VARCHAR}, #{ITEM_ID, jdbcType=VARCHAR}, #{PRODUCT_ORDER_ID, jdbcType=VARCHAR})  AS LONGSN
                  FROM DUAL
	</select>

    <select id="get_longshortsn2" resultType="camelMap" parameterType="java.util.HashMap">
                 SELECT 
                     FN_GET_POP_SHORTLONG2(#{DIVISION_CD, jdbcType=VARCHAR}, #{COMPANY_CD, jdbcType=VARCHAR}, #{ITEM_ID, jdbcType=VARCHAR}, #{PRODUCT_ORDER_ID, jdbcType=VARCHAR})  AS LONGSHORTSN
                  FROM DUAL
	</select>

	<!-- SN생성 -->
	<select id="get_snmake" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			SNMAKE(#{SNTYPE, jdbcType=VARCHAR}, #{P_WORK_ORDER_ID, jdbcType=VARCHAR}, #{P_CREATE_BY, jdbcType=VARCHAR})
			AS SERIALNUMBER
			, TO_CHAR(SYSDATE, 'HH24MISS') AS PRINTTIME
		FROM DUAL
	</select>
	
	<!-- SN 리스트 -->
	<select id="get_popgt_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.WORK_ORDER_RESULT_ID,
		    A.CT,
		    A.GOOD_QTY,
		    A.BAD_QTY
		FROM MOM_WORK_ORDER_RESULT A
		WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		AND   A.CT = 'NODATA'
		AND   A.BADCODE = 'NODATA'
		AND   A.STATE NOT IN ('C')
		ORDER BY A.CREATE_DATE DESC
	</select>
	
	<!-- CT 리스트 -->
	<select id="get_popct_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.CT,
		    SUM(A.GOOD_QTY) AS CTCOUNT
		FROM MOM_WORK_ORDER_RESULT A
		WHERE A.DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		AND   A.CT != 'NODATA'
		GROUP BY A.DIVISION_CD, A.COMPANY_CD, A.CT
		ORDER BY CT DESC
	</select>
	
	<!-- CT의 SN 리스트 -->
	<select id="get_popctingt_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.WORK_ORDER_RESULT_ID,
		    A.CT,
		    A.GOOD_QTY,
		    A.BAD_QTY
		FROM MOM_WORK_ORDER_RESULT A
		WHERE A.DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		AND   A.CT            = #{CT, jdbcType=VARCHAR}
		ORDER BY A.CREATE_DATE
	</select>
	
	<!-- 불량 리스트 -->
	<select id="get_popbadprod_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.WORK_ORDER_RESULT_ID,
		       A.CT,
		    A.GOOD_QTY,
		    A.BAD_QTY
		FROM MOM_WORK_ORDER_RESULT A
		WHERE A.DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		AND   A.BADCODE != 'NODATA'
		ORDER BY A.CREATE_DATE DESC
	</select>
	
	<!-- 라벨인쇄용 정보 Load -->
	<select id="get_labelsninfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
			A.PRODUCT_ORDER_ID           AS PO
            , D.ITEM_ID                  AS ITEMID
            , D.ITEM_NAME                AS ITEMNAME
            , SUBSTR(D.SPECIFICATION, 1, 20) AS SPEC
            , D.ITEM_GROUP_CODE          AS MODELSPEC
            , C.PLAN_QTY                 AS PLANQTY
            , A.GOOD_QTY                 AS GOODQTY                
            , A.BAD_QTY                  AS BADQTY
            <if test = "CT != '' and CT != null">
            , FN_GET_POP_BOXNUMBER(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, A.CT, D.POP_CT_QTY, 'CTBOXNUMBER') - 1 AS CTQTY
            , FN_GET_POP_BOXNUMBER(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, A.CT, D.POP_CT_QTY, 'BOXNUMBER') AS NOWBOXNUMBER
            , FN_GET_POP_BOXNUMBER(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, A.CT, D.POP_CT_QTY, 'ALLBOXNUMBER') AS ALLBOXNUMBER
            </if>
            , D.POP_CT_QTY               AS STANDARDCTQTY
            , TO_CHAR(A.CREATE_DATE, 'YYYY.MM.DD') AS PRINTDATE
            , A.WORK_ORDER_RESULT_ID     AS SN
            , A.CT  
            , A.PALLETID                 AS PALLETNUMBER
            , A.WORK_ORDER_ID            AS WO
            , A.RESOURCE_CD              AS LINEID
            , A.SLOC                     AS SLOCID
            , B.FACILITY_NAME            AS SLOCNAME
            , D.POP_EAN                  AS EAN
            , D.POP_UPC                  AS UPC
            , A.DESTINATION              AS DESTINATION
            , D.POP_MADEBY               AS MADEBY
            , D.POP_GT_LABELID     
            , D.POP_CT_LABELID     
            , D.POP_PALLET_LABELID 
            , D.POP_GANBAN_LABELID
            , D.LABELDESC
            , A.SHORTSN
            , A.LONGSN
	        , D.LABELSPEC
            , E.MODEL_SUFFIX AS MODEL1
            , E.MODEL_SUFFIX AS MODEL2
            , E.HSE_ITEM_ID AS LGBARCODE
            , E.HSE_ITEM_ID AS PARTNO
            , '' AS REPACKDATE
            , TO_CHAR(SYSDATE, 'WW') AS WEEKNUM
            , A.CREATE_BY
		FROM MOM_WORK_ORDER_RESULT A,
		     (
		        SELECT
		            DIVISION_CD
		            , COMPANY_CD
		            , FACILITY_CD
		            , FACILITY_NAME
		        FROM MOM_FACILITY
		        WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		        AND   COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		        AND   FACILITY_CLASS_CD = 'AREA'
		     ) B,
		     MOM_WORK_ORDER C,
		     MOM_ITEM_DEFINITION D,
             MOM_HSE_MODEL_MAPPING E
		WHERE A.DIVISION_CD   = B.DIVISION_CD
		AND   A.COMPANY_CD    = B.COMPANY_CD 
		AND   A.DIVISION_CD   = C.DIVISION_CD
		AND   A.COMPANY_CD    = C.COMPANY_CD
		AND   A.DIVISION_CD   = D.DIVISION_CD
		AND   A.COMPANY_CD    = D.COMPANY_CD
		AND   A.WORK_ORDER_ID = C.WORK_ORDER_ID
		AND   A.WORK_ORDER_ID = C.WORK_ORDER_ID
		AND   C.ITEM_ID       = D.ITEM_ID
		AND   A.SLOC          = B.FACILITY_CD
		AND   C.DIVISION_CD   = E.DIVISION_CD(+)
		AND   C.COMPANY_CD    = E.COMPANY_CD(+)
        AND   C.ITEM_ID       = E.ITEM_ID(+)
		<if test = "WORK_ORDER_RESULT_ID != '' and WORK_ORDER_RESULT_ID != null">
		 AND   A.WORK_ORDER_RESULT_ID = #{WORK_ORDER_RESULT_ID, jdbcType=VARCHAR}
		</if>
		<if test = "CT != '' and CT != null">
		 AND   A.CT = #{CT, jdbcType=VARCHAR}
		</if>
		<if test = "PALLETID != '' and PALLETID != null">
		 AND   A.PALLETID = #{PALLETID, jdbcType=VARCHAR}
		</if>
		ORDER BY A.WORK_ORDER_RESULT_ID, A.CT, A.WORK_ORDER_RESULT_ID
    </select>
    
    <!-- 라벨인쇄용 정보 Load -->
	<select id="get_labelsninfo2" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
			C.PRODUCT_ORDER_ID           AS PO
            , D.ITEM_ID                  AS ITEMID
            , D.ITEM_NAME                AS ITEMNAME
            , SUBSTR(D.SPECIFICATION, 1, 20) AS SPEC
            , D.ITEM_GROUP_CODE          AS MODELSPEC
            , C.PLAN_QTY                 AS PLANQTY
            , A.QTY                 AS GOODQTY                
            <if test = "CT != '' and CT != null">
            , FN_GET_POP_BOXNUMBER(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, A.GANBAN_ID, D.POP_CT_QTY, 'CTBOXNUMBER') - 1 AS CTQTY
            , FN_GET_POP_BOXNUMBER(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, A.GANBAN_ID, D.POP_CT_QTY, 'BOXNUMBER') AS NOWBOXNUMBER
            , FN_GET_POP_BOXNUMBER(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, A.GANBAN_ID, D.POP_CT_QTY, 'ALLBOXNUMBER') AS ALLBOXNUMBER
            </if>
            , D.POP_CT_QTY               AS STANDARDCTQTY
            , TO_CHAR(A.CREATE_DATE, 'YYYY.MM.DD') AS PRINTDATE
            , A.WORK_ORDER_RESULT_ID     AS SN
            , A.GANBAN_ID                AS CT 
            , A.WORK_ORDER_ID            AS WO
            , C.RESOURCE_CD              AS LINEID
            , D.POP_EAN                  AS EAN
            , D.POP_UPC                  AS UPC
            , D.POP_MADEBY               AS MADEBY
            , D.POP_GT_LABELID     
            , D.POP_CT_LABELID     
            , D.POP_PALLET_LABELID 
            , D.POP_GANBAN_LABELID
            , D.LABELDESC
	        , D.LABELSPEC
            , E.MODEL_SUFFIX AS MODEL1
            , E.MODEL_SUFFIX AS MODEL2
            , E.HSE_ITEM_ID AS LGBARCODE
            , E.HSE_ITEM_ID AS PARTNO
            , '' AS REPACKDATE
            , TO_CHAR(SYSDATE, 'WW') AS WEEKNUM
            , A.CREATE_BY
		FROM MOM_POP_LABEL_SNMAKE A,
		     MOM_WORK_ORDER C,
		     MOM_ITEM_DEFINITION D,
             MOM_HSE_MODEL_MAPPING E
		WHERE A.DIVISION_CD   = C.DIVISION_CD
		AND   A.COMPANY_CD    = C.COMPANY_CD
		AND   A.DIVISION_CD   = D.DIVISION_CD
		AND   A.COMPANY_CD    = D.COMPANY_CD
		AND   A.WORK_ORDER_ID = C.WORK_ORDER_ID
		AND   A.WORK_ORDER_ID = C.WORK_ORDER_ID
		AND   C.ITEM_ID       = D.ITEM_ID
		AND   C.DIVISION_CD   = E.DIVISION_CD(+)
		AND   C.COMPANY_CD    = E.COMPANY_CD(+)
        AND   C.ITEM_ID       = E.ITEM_ID(+)
		<if test = "WORK_ORDER_RESULT_ID != '' and WORK_ORDER_RESULT_ID != null">
		 AND   A.WORK_ORDER_RESULT_ID = #{WORK_ORDER_RESULT_ID, jdbcType=VARCHAR}
		</if>
		<if test = "CT != '' and CT != null">
		 AND   A.GANBAN_ID = #{CT, jdbcType=VARCHAR}
		</if>
		ORDER BY A.WORK_ORDER_RESULT_ID, A.GANBAN_ID, A.WORK_ORDER_RESULT_ID
    </select>
	
	<!-- 간판라벨인쇄용 정보 Load -->
	<select id="get_labelganbaninfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.GANBAN_ID AS GANBANID
		     , D.ITEM_ID AS ITEMID
		     , D.ITEM_NAME AS ITEMNAME
		     , SUBSTR(D.SPECIFICATION, 1, 20) AS SPEC
		     , D.ITEM_GROUP_CODE AS MODELSPEC
		     , A.GOOD_QTY AS GOODQTY
		     , D.POP_CT_QTY AS CTQTY
		     , TO_CHAR(A.CREATE_DATE, 'YYYY.MM.DD') AS PRINTDATE
		     , '' AS SN
		     , '' AS CT
		     , '' AS PALLETNUMBER
		     , A.WORK_ORDER_ID AS WO
		     , '' AS LINEID
		     , A.SLOC AS SLOCID
		     , B.FACILITY_NAME AS SLOCNAME
		     , D.POP_EAN AS EAN
		     , D.POP_UPC AS UPC
		     , D.POP_DESTINATION AS DESTINATION
		     , D.POP_MADEBY AS MADEBY
		     , D.POP_GT_LABELID
		     , D.POP_CT_LABELID
		     , D.POP_PALLET_LABELID
		     , D.POP_GANBAN_LABELID
		     , D.LABELDESC
		     , D.LABELSPEC
		     , E.VENDOR_NAME
		  FROM MOM_POP_GANBAN A
		  LEFT OUTER JOIN MOM_FACILITY B
		    ON A.DIVISION_CD       = B.DIVISION_CD
		   AND A.COMPANY_CD        = B.COMPANY_CD
		   AND A.SLOC              = B.FACILITY_CD
		   AND B.FACILITY_CLASS_CD = 'AREA'
		  LEFT OUTER JOIN MOM_ITEM_DEFINITION D
		    ON A.DIVISION_CD       = D.DIVISION_CD
		   AND A.COMPANY_CD        = D.COMPANY_CD
		   AND A.ITEM_ID           = D.ITEM_ID
		  LEFT OUTER JOIN MOM_VENDOR E
		    ON A.DIVISION_CD       = E.DIVISION_CD
		   AND A.COMPANY_CD        = E.COMPANY_CD
		   AND A.VENDOR_CD         = E.VENDOR_CD
		 WHERE A.DIVISION_CD       = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD        = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.GANBAN_ID         = #{GANBAN_ID,jdbcType = VARCHAR}
    </select>
	
	<!-- 제품라벨인쇄용 정보 Load -->
	<select id="get_productlabelinfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.WORK_ORDER_ID
		     , A.WORK_ORDER_RESULT_ID	AS SN
		     , A.ITEM_ID
		     , A.QTY 	AS GOOD_QTY
		     , TO_CHAR(SYSDATE, 'YYYY-MM-DD') AS PRINT_DATE
		     , A.SEQ
		     , CASE WHEN #{WORK_ORDER_RESULT_ID, jdbcType=VARCHAR} = A.WORK_ORDER_RESULT_ID THEN B.POP_GT_LABELID
		     		WHEN #{WORK_ORDER_RESULT_ID, jdbcType=VARCHAR} = A.ADD_ID1				THEN A.ADD_ID1_CD
		     	END 		AS POP_GT_LABELID
		     , B.POP_CT_LABELID
		     , B.POP_PALLET_LABELID
		     , B.POP_GANBAN_LABELID
		     , B.LABELDESC
		     , C.MODEL_SUFFIX AS MODELSUFFIX
		  FROM MOM_POP_LABEL_SNMAKE A
		  LEFT OUTER JOIN MOM_ITEM_DEFINITION B
		    ON A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID    = B.ITEM_ID
		  LEFT OUTER JOIN MOM_HSE_MODEL_MAPPING C
		    ON A.DIVISION_CD = C.DIVISION_CD
		   AND A.COMPANY_CD = C.COMPANY_CD
		   AND A.ITEM_ID    = C.ITEM_ID
		 WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		 <if test = "WORK_ORDER_RESULT_ID != '' and WORK_ORDER_RESULT_ID != null">
		   AND #{WORK_ORDER_RESULT_ID, jdbcType=VARCHAR} IN (A.WORK_ORDER_RESULT_ID, A.ADD_ID1)
		 </if>
		   AND A.LABELTYPE = 'SN'
		   AND A.USE_YN ='Y'
    </select>
    
	<select id="get_userline_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			A.NAME || '(' || A.USER_ID || ')' AS NAME
			, A.MANAGER_YN
        FROM TU_USER A,
             (
                SELECT 
                    CODE_ID
                    , CODE_NAME
                    , ATTRIBUTE1
                FROM MOM_CODE
                WHERE CODE_CLASS_ID = 'DEPT_CD'
             ) B
        WHERE A.DEPT_CD = B.CODE_ID(+)
        AND A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}         
        AND A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
        AND B.ATTRIBUTE1 = 'POP'
        ORDER BY A.NAME
	</select>
	
	<select id="get_equipment_num" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT COUNT(1) AS EQUIPMENT_NUM
        FROM MOM_EQUIPMENT
        WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}         
        AND COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
        AND RESOURCE_CD  = #{RESOURCE_CD, jdbcType=VARCHAR}
        AND USE_YN = 'Y'
	</select>
	
	<select id="get_equipment" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT EQUIPMENT_NAME || '(' || EQUIPMENT_CD || ')' AS NAME
			 , EQUIPMENT_NAME
        FROM MOM_EQUIPMENT
        WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}         
        AND COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
        AND RESOURCE_CD  = #{RESOURCE_CD, jdbcType=VARCHAR}
        AND USE_YN = 'Y'
        ORDER BY EQUIPMENT_NAME
	</select>
	
	<!-- 기 구성된 파레트 리스트 -->
	<select id="get_palletpack_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
			B.PRODUCT_ORDER_ID
		    , A.PALLETID
		    , B.ITEM_ID
		    , A.WORK_ORDER_RESULT_ID AS SN
		    , A.WORK_ORDER_ID
		    , A.CT
		    , A.GOOD_QTY
		    , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDATE
		FROM MOM_WORK_ORDER_RESULT A,
		     MOM_WORK_ORDER B
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.WORK_ORDER_ID = B.WORK_ORDER_ID
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.PALLETID    = #{PALLETID, jdbcType=VARCHAR}
		ORDER BY A.UPDATE_DATE DESC
	</select>
	
	<!-- 파레트 구성 전 정보 LOAD -->
	<select id="get_palletpack" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
		    B.PRODUCT_ORDER_ID
		    , A.PALLETID
		    , B.ITEM_ID
		    , A.WORK_ORDER_RESULT_ID AS SN
		    , A.WORK_ORDER_ID
		    , A.CT
		FROM MOM_WORK_ORDER_RESULT A,
		     MOM_WORK_ORDER B
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.WORK_ORDER_ID = B.WORK_ORDER_ID
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		<if test = "SN != '' and SN != null">
			AND   A.WORK_ORDER_RESULT_ID = #{SN, jdbcType=VARCHAR}
		</if>
		<if test = "CT != '' and CT != null">
			AND   A.CT = #{CT, jdbcType=VARCHAR}
		</if>
	</select>
	
	<!-- DIVISION, COMPANY에 대하여 불량수량 사용여부 확인 -->
	<select id="get_badqtyflag" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT NVL(defect_qty_use_flag, 'Y') AS BADQTYFLAG  
            from   mom_parameter 
            where  division_cd = #{DIVISION_CD, jdbcType=VARCHAR}
            and    company_cd  = #{COMPANY_CD, jdbcType=VARCHAR}
	</select>
	
	<!-- 창고목록 -->
	<select id="get_toFacility_list" resultType="camelMap" parameterType="java.util.HashMap">
        SELECT A.FACILITY_CD AS CODE 
             , A.FACILITY_NAME ||'('||A.FACILITY_CD ||')' AS BUTTONTEXT
          FROM MOM_FACILITY A
             , MOM_PARAMETER B
         WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
           AND A.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
           AND A.DIVISION_CD = B.DIVISION_CD
           AND A.COMPANY_CD = B.COMPANY_CD           
           AND NVL(A.USE_YN, 'Y') = 'Y'
          <if test = "stockType == 'WO'">
           AND A.FACILITY_TYPE IN ('FAC300', 'FAC500')
          </if>
          <if test = "stockType == 'MAT'">
           AND A.FACILITY_TYPE IN ('FAC300', 'FAC400')
          </if>
          <if test = "stockType == 'SO'">
           AND A.FACILITY_TYPE IN ('FAC300', 'FAC400')
          </if>
          <if test = "facilityClassCd != '' and facilityClassCd != null">
           AND A.FACILITY_CLASS_CD = #{facilityClassCd, jdbcType=VARCHAR}
          </if>
         ORDER BY A.FACILITY_SEQ, FACILITY_NAME
    </select>
	
	<select id="getComomCodeList" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.CODE_ID AS CODE
		     , A.CODE_NAME AS NAME
		     , A.CODE_VALUES AS VALUE
		     , A.CODE_ID || '(' || A.CODE_NAME || ')' AS CODE_NAME
		     , A.CODE_NAME ||'('||A.CODE_ID ||')' AS BUTTONTEXT
		  FROM MOM_CODE A
		 WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.CODE_CLASS_ID = #{CODECLASSID, jdbcType=VARCHAR} 
		   AND NVL(A.USE_YN, 'Y') = 'Y'
		   <if test = "ATTRIBUTE1 != null and ATTRIBUTE1 != ''">
		    AND A.ATTRIBUTE1 = #{ATTRIBUTE1, jdbcType=VARCHAR}
		   </if>
           <if test = "ATTRIBUTE2 != null and ATTRIBUTE2 != ''">
            AND A.ATTRIBUTE2 = #{ATTRIBUTE2, jdbcType=VARCHAR}
           </if>
           <if test = "codeId != null and codeId != ''">
            AND A.CODE_ID = #{codeId, jdbcType=VARCHAR}
           </if>
		  ORDER BY A.UI_SEQUENCE
	</select>
	
	<select id="get_itemStockMove_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.ITEM_ID
		     , B.ITEM_NAME
		     , B.SPECIFICATION
		     , TO_CHAR(ROUND(A.CURRENT_QTY, 4), 'FM9,999,999') CURRENT_QTY
		     , TO_CHAR(A.PREV_QTY, 'FM9,999,999') PREV_QTY
		     , B.UNIT
		     , A.LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (A.DIVISION_CD, A.COMPANY_CD, A.LOCATION_CD) FROM DUAL) AS LOCATION_OUT_NAME
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (B.DIVISION_CD, B.COMPANY_CD, B.OUT_LOCATION_ID) FROM DUAL) AS LOCATION_IN_NAME
		     , A.ITEM_STOCK_ID
		     , B.ITEM_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME ( B.DIVISION_CD
		                                               , B.COMPANY_CD
		                                               , 'ITEM_TYPE'
		                                               , B.ITEM_TYPE)
		          FROM DUAL) AS ITEM_TYPE_NAME
		     , NVL(B.FREE_OFFER_FLAG, 'N')  AS FREE_OFFER_FLAG
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'FREE_OFFER', NVL(B.FREE_OFFER_FLAG, 'N')) 
		        FROM   DUAL ) AS FREE_OFFER_NAME
		     , A.DESCRIPTION
		  FROM MOM_ITEM_STOCK A
		     , MOM_ITEM_DEFINITION B
		 WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.DIVISION_CD = B.DIVISION_CD(+)
		   AND A.COMPANY_CD = B.COMPANY_CD(+)
		   AND A.ITEM_ID = B.ITEM_ID(+)
		   AND A.LOCATION_CD IN (SELECT FACILITY_CD FROM MOM_FACILITY 
		                          WHERE DIVISION_CD = A.DIVISION_CD 
		                            AND COMPANY_CD = A.COMPANY_CD 
		                            AND FACILITY_TYPE IN ('FAC300','FAC500')) 
		  <if test="FROM_LOC != null and FROM_LOC != ''">
		   AND A.LOCATION_CD = #{FROM_LOC, jdbcType=VARCHAR}
		  </if>
		  <if test="(SN != null and SN != '') or (CT != null and CT != '') or (PALLETID != null and PALLETID != '')">
		   AND B.ITEM_ID IN
		   					(
			   					SELECT 
								    B.ITEM_ID
								FROM MOM_WORK_ORDER_RESULT A,
								     MOM_WORK_ORDER B
								WHERE A.DIVISION_CD = B.DIVISION_CD
								AND   A.COMPANY_CD  = B.COMPANY_CD
								AND   A.WORK_ORDER_ID = B.WORK_ORDER_ID 
								AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
								AND A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
								<if test="SN != null and SN != ''">
								AND A.WORK_ORDER_RESULT_ID = #{SN, jdbcType=VARCHAR}
								</if>
								<if test="CT != null and CT != ''">
								AND A.CT = #{CT, jdbcType=VARCHAR}
								</if>    
								<if test="PALLETID != null and PALLETID != ''">
								AND A.PALLETID = #{PALLETID, jdbcType=VARCHAR}
								</if>
		   					)
		  </if>
		  <if test="ITEM_ID != null and ITEM_ID != ''">
		   AND B.ITEM_ID = #{ITEM_ID, jdbcType=VARCHAR}
		  </if>
		  <if test="ITEMTYPE != null and ITEMTYPE != ''">
		   AND B.ITEM_TYPE = #{ITEMTYPE, jdbcType=VARCHAR}
		  </if>
		  AND A.CURRENT_QTY != 0
		  ORDER BY A.ITEM_ID, A.LOCATION_CD
	</select>
	
	<select id="get_ganbanStockMoveQTY" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
		    A.ITEM_ID
		    , B.ITEM_NAME
		    , A.GOOD_QTY AS SCANQTY 
		FROM MOM_POP_GANBAN A,
		     MOM_ITEM_DEFINITION B
		WHERE  A.DIVISION_CD = B.DIVISION_CD
		AND    A.COMPANY_CD  = B.COMPANY_CD
		AND    A.ITEM_ID     = B.ITEM_ID
		AND    A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND    A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND    A.GANBAN_ID   = #{GANBAN_ID, jdbcType=VARCHAR}
		AND    A.SLOC        = #{SLOC, jdbcType=VARCHAR}
		AND	   A.USE_YN 	 ='Y'
	</select>
	
	<select id="get_ganbanStockMoveInfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.GANBAN_ID
		    , A.ITEM_ID
		    , B.ITEM_NAME
            , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'ITEM_TYPE', B.ITEM_TYPE) FROM DUAL ) AS ITEM_TYPE_NAME
            , ROUND(C.CURRENT_QTY, 4)  AS CURRENT_QTY  
		    , A.QTY AS SCANQTY
            , A.QTY AS EDITQTY
            , B.UNIT
            , B.SPECIFICATION
            , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'FREE_OFFER', NVL(B.FREE_OFFER_FLAG, 'N')) FROM DUAL ) AS FREE_OFFER_NAME
            , A.DESCRIPTION
            , A.BIN_ID
		FROM TU_GANBAN A,
		     MOM_ITEM_DEFINITION B,
             MOM_ITEM_STOCK C             
		WHERE  A.DIVISION_CD = B.DIVISION_CD
		AND    A.COMPANY_CD  = B.COMPANY_CD
		AND    A.ITEM_ID     = B.ITEM_ID
        AND    A.DIVISION_CD = C.DIVISION_CD
		AND    A.COMPANY_CD  = C.COMPANY_CD
        AND    A.LOCATION_CD  = C.LOCATION_CD
		AND    A.ITEM_ID     = C.ITEM_ID
		AND    A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND    A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND    A.GANBAN_ID   = #{GANBAN_ID, jdbcType=VARCHAR}
		AND    A.LOCATION_CD = #{LOCATION_CD, jdbcType=VARCHAR}
		AND    A.USE_YN = 'Y'
	</select>
	
	<select id="get_ganban2item" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
		    A.ITEM_ID
		FROM MOM_POP_GANBAN A
		WHERE  A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND    A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND    A.GANBAN_ID   = #{GANBAN_ID, jdbcType=VARCHAR}
	</select>
	
	<select id="get_ct2item" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
		    B.ITEM_ID
		FROM MOM_WORK_ORDER_RESULT A,
		     MOM_WORK_ORDER B
		WHERE  A.DIVISION_CD = A.DIVISION_CD
		AND    A.COMPANY_CD  = B.COMPANY_CD
		AND    A.WORK_ORDER_ID = B.WORK_ORDER_ID
		AND    A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND    A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND    #{SN, jdbcType=VARCHAR}   IN (A.WORK_ORDER_RESULT_ID, A.CT, A.PALLETID)
	</select>
	
	<!-- SN, CT, PALLET 품명, 수량 가져오기 ==> 공정이동 사용 -->
	<select id="get_itemStockMove_snctptQTY" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.ITEM_ID
		    , B.ITEM_NAME
		    , SUM(A.GOOD_QTY) AS SCANQTY 
		FROM MOM_POP_GANBAN A
           , MOM_ITEM_DEFINITION B
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.ITEM_ID = B.ITEM_ID
		AND   A.USE_YN = 'Y'
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		<if test="SN != null and SN != ''">
		AND   A.GANBAN_ID = #{SN, jdbcType=VARCHAR}
		</if> 
		<if test="CT != null and CT != ''">
		AND   A.GANBAN_ID = #{CT, jdbcType=VARCHAR}
		</if> 
		<if test="PALLETID != null and PALLETID != ''">
		AND   A.GANBAN_ID = #{PALLETID, jdbcType=VARCHAR}
		</if> 
		<if test="FROM_LOC != null and FROM_LOC != ''">
		AND   A.SLOC = #{FROM_LOC, jdbcType=VARCHAR}
		</if>
		GROUP BY A.ITEM_ID, B.ITEM_NAME
	</select>
	
	<!-- GANBAN 품명, 수량 가져오기 ==> 재고이동 사용 -->
	<select id="get_itemStockMove_ganbanQTY" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.ITEM_ID
		    , B.ITEM_NAME
		    , SUM(A.GOOD_QTY) AS SCANQTY 
		FROM MOM_POP_GANBAN A,
		     MOM_ITEM_DEFINITION B
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.ITEM_ID     = B.ITEM_ID(+)
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.GANBAN_ID   = #{GANBAN_ID, jdbcType=VARCHAR}
	    AND   A.USE_YN      = 'Y'
		GROUP BY A.ITEM_ID, B.ITEM_NAME
	</select>
	
	<!-- 간판발행 HEAD 정보 -->
	<select id="getGanbanHeadPackList" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    '-' AS DEPARTURE_GROUP_ID
		    , '-' AS VENDOR_NAME
		    , A.WORK_ORDER_ID
		    , A.PALLETID
		    , A.CT
		    , A.SLOC
		    , D.FACILITY_NAME AS SLOCNAME
		    , B.ITEM_ID
		    , C.ITEM_NAME
		    , A.GOOD_QTY
		    , C.POP_CT_QTY
		    , DECODE(C.POP_GANBAN_LABELID, '', 'NONE', C.POP_GANBAN_LABELID) POP_GANBAN_LABELID
		FROM MOM_WORK_ORDER_RESULT A,
		     MOM_WORK_ORDER B,
		     MOM_ITEM_DEFINITION C,
		     (
                SELECT
                    DIVISION_CD
                    , COMPANY_CD
                    , FACILITY_CD
                    , FACILITY_NAME
                FROM MOM_FACILITY
                WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
                AND   COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
                AND   FACILITY_CLASS_CD = 'AREA'
             ) D
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.DIVISION_CD = C.DIVISION_CD
		AND   A.COMPANY_CD  = C.COMPANY_CD
		AND   A.DIVISION_CD = D.DIVISION_CD
        AND   A.COMPANY_CD  = D.COMPANY_CD
		AND   A.WORK_ORDER_ID = B.WORK_ORDER_ID
		AND   B.ITEM_ID       = C.ITEM_ID
		AND   A.SLOC          = D.FACILITY_CD
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		<if test = "PALLETID != null and PALLETID != ''">
		AND   A.PALLETID    = #{PALLETID, jdbcType=VARCHAR}
		</if>
		<if test = "CT != null and CT != ''">
		AND   A.CT    = #{CT, jdbcType=VARCHAR}
		</if>
	</select>
	
	<!-- 대차 간판발행 HEAD 정보 -->
	<select id="getGanbanHeadPackmove" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
            '-' AS DEPARTURE_GROUP_ID
            , '-' AS VENDOR_NAME
            , A.WORK_ORDER_ID
            , A.PALLETID
            , A.CT
            , A.SLOC
            , D.FACILITY_NAME AS SLOCNAME
            , B.ITEM_ID
            , C.ITEM_NAME
            , A.GOOD_QTY
            , C.POP_CT_QTY
            , DECODE(C.POP_GANBAN_LABELID, '', 'NONE', C.POP_GANBAN_LABELID) POP_GANBAN_LABELID
            , TO_CHAR(ROUND(E.CURRENT_QTY, 4), 'FM9,999,999') CURRENT_QTY
        FROM MOM_WORK_ORDER_RESULT A,
             MOM_WORK_ORDER B,
             MOM_ITEM_DEFINITION C,
             (
                SELECT
                    DIVISION_CD
                    , COMPANY_CD
                    , FACILITY_CD
                    , FACILITY_NAME
                FROM MOM_FACILITY
                WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
                AND   COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
                AND   FACILITY_CLASS_CD = 'AREA'
             ) D,
             MOM_ITEM_STOCK E
        WHERE A.DIVISION_CD = B.DIVISION_CD
        AND   A.COMPANY_CD  = B.COMPANY_CD
        AND   A.DIVISION_CD = C.DIVISION_CD
        AND   A.COMPANY_CD  = C.COMPANY_CD
        AND   A.DIVISION_CD = D.DIVISION_CD
        AND   A.COMPANY_CD  = D.COMPANY_CD
        AND   A.DIVISION_CD = E.DIVISION_CD
        AND   A.COMPANY_CD  = E.COMPANY_CD
        AND   A.WORK_ORDER_ID = B.WORK_ORDER_ID
        AND   B.ITEM_ID       = C.ITEM_ID
        AND   A.SLOC          = D.FACILITY_CD
        AND   B.ITEM_ID       = E.ITEM_ID
        AND   A.SLOC          = E.LOCATION_CD
        AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
        AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.SLOC    = #{SLOC, jdbcType=VARCHAR}
		AND   A.CT      = #{CT, jdbcType=VARCHAR}
	</select>
	
	<!-- 간판발행 HEAD 정보 -->
	<select id="getGanbanHeadGanbanList" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.DEPARTURE_GROUP_ID
		    , B.VENDOR_NAME
		    , A.WORK_ORDER_ID
		    , A.PALLETID
		    , A.CT
		    , A.FROM_SLOC
		    , A.SLOC
		    , D.FACILITY_NAME AS SLOCNAME
		    , TO_CHAR(A.MOVE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MOVE_DATE
		    , A.MOVE_BY
		    , A.ITEM_ID
		    , C.ITEM_NAME
		    , A.GOOD_QTY
		    , C.POP_CT_QTY
		    , DECODE(C.POP_GANBAN_LABELID, '', 'NONE', C.POP_GANBAN_LABELID) POP_GANBAN_LABELID 
		FROM MOM_POP_GANBAN A,
		     MOM_VENDOR B,
		     MOM_ITEM_DEFINITION C,
		     (
                SELECT
                    DIVISION_CD
                    , COMPANY_CD
                    , FACILITY_CD
                    , FACILITY_NAME
                FROM MOM_FACILITY
                WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
                AND   COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
                AND   FACILITY_CLASS_CD = 'AREA'
             ) D
		WHERE A.DIVISION_CD = B.DIVISION_CD(+)
		AND   A.COMPANY_CD  = B.COMPANY_CD(+)
		AND   A.DIVISION_CD = C.DIVISION_CD
		AND   A.COMPANY_CD  = C.COMPANY_CD
		AND   A.DIVISION_CD = D.DIVISION_CD
        AND   A.COMPANY_CD  = D.COMPANY_CD
		AND   A.VENDOR_CD   = B.VENDOR_CD(+)
		AND   A.ITEM_ID     = C.ITEM_ID
		AND   A.SLOC          = D.FACILITY_CD
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.GANBAN_ID   = #{GANBAN_ID, jdbcType=VARCHAR}
	</select>
	
	
	<!-- 간판발행 HEAD 정보 -->
	<select id="getGanbanHeadGanbanList_new" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.DEPARTURE_GROUP_ID
		    , A.WORK_ORDER_ID
		    , A.PREV_LOCATION_CD FROM_SLOC
		    , A.LOCATION_CD SLOC
		    , D.FACILITY_NAME AS SLOCNAME
		    , TO_CHAR(A.MOVE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MOVE_DATE
		    , A.MOVE_BY
		    , A.ITEM_ID
		    , C.ITEM_NAME
		    , A.QTY GOOD_QTY
		    , C.POP_CT_QTY
		    , DECODE(C.POP_GANBAN_LABELID, '', 'NONE', C.POP_GANBAN_LABELID) POP_GANBAN_LABELID 
		FROM TU_GANBAN A,
		     MOM_ITEM_DEFINITION C,
		     (
                SELECT
                    DIVISION_CD
                    , COMPANY_CD
                    , FACILITY_CD
                    , FACILITY_NAME
                FROM MOM_FACILITY
                WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
                AND   COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
                AND   FACILITY_CLASS_CD = 'AREA'
             ) D
		WHERE A.DIVISION_CD = C.DIVISION_CD
		AND   A.COMPANY_CD  = C.COMPANY_CD
		AND   A.DIVISION_CD = D.DIVISION_CD
        AND   A.COMPANY_CD  = D.COMPANY_CD
		AND   A.ITEM_ID     = C.ITEM_ID
		AND   A.LOCATION_CD = D.FACILITY_CD
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.GANBAN_ID   = #{GANBAN_ID, jdbcType=VARCHAR}
	</select>
	
	<!-- 간판발행 HEAD 정보 -->
	<select id="getCTHeadCTList_new" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT DISTINCT B.PRODUCT_ORDER_ID
		     , C.WORK_ORDER_ID
		     , A.LOCATION_CD AS SLOC
		     , E.FACILITY_NAME AS SLOCNAME
		     , A.PREV_LOCATION_CD AS FROM_SLOC
		     , F.FACILITY_NAME AS FROM_SLOCNAME
		     , TO_CHAR(A.MOVE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MOVE_DATE
		     , A.MOVE_BY
		     , A.ITEM_ID
		     , D.ITEM_NAME
		     , D.POP_CT_QTY
		     , A.QTY AS GOOD_QTY
		     , DECODE(D.POP_CT_LABELID, '', 'NONE', D.POP_CT_LABELID) POP_CT_LABELID 
		  FROM TU_GANBAN A
		  LEFT OUTER JOIN MOM_WORK_ORDER_RESULT B
		    ON A.DIVISION_CD      = B.DIVISION_CD
		   AND A.COMPANY_CD       = B.COMPANY_CD
		   <if test = "LOTTYPE == 'BUTTON'">
		   AND B.CT               IN (A.GANBAN_ID, A.ROOT_GANBAN_ID)
		   </if>
		   <if test = "LOTTYPE == 'SN'">
		   AND A.GANBAN_ID        = B.WORK_ORDER_RESULT_ID
		   </if>
		   <if test = "LOTTYPE == null and LOTTYPE == ''">
		   AND A.GANBAN_ID        = B.CT
		   </if>
		  LEFT OUTER JOIN MOM_WORK_ORDER C
		    ON B.DIVISION_CD      = C.DIVISION_CD
		   AND B.COMPANY_CD       = C.COMPANY_CD
		   AND B.WORK_ORDER_ID    = C.WORK_ORDER_ID
		  LEFT OUTER JOIN MOM_ITEM_DEFINITION D
		    ON C.DIVISION_CD      = D.DIVISION_CD
		   AND C.COMPANY_CD       = D.COMPANY_CD
		   AND C.ITEM_ID          = D.ITEM_ID
		  LEFT OUTER JOIN MOM_FACILITY E
		    ON A.DIVISION_CD      = E.DIVISION_CD
		   AND A.COMPANY_CD       = E.COMPANY_CD
		   AND A.LOCATION_CD      = E.FACILITY_CD
		  LEFT OUTER JOIN MOM_FACILITY F
		    ON A.DIVISION_CD      = F.DIVISION_CD
		   AND A.COMPANY_CD       = F.COMPANY_CD
		   AND A.PREV_LOCATION_CD = F.FACILITY_CD
		 WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.GANBAN_ID   = #{CT, jdbcType=VARCHAR}
	</select>
	
	<!-- 간판발행 HEAD 정보 -->
	<select id="getGanbanHeadDepatureList" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
		    A.MATERIAL_DEPARTURE_ID AS DEPARTUREGROUPID
		    , B.MATERIAL_ORDER_ID
		    , B.VENDOR_CD
		    , C.VENDOR_NAME
		    , '-' WORK_ORDER_ID
		    , '-' AS PALLETID
		    , '-' AS CT
		    , '-' AS FROM_SLOC
		    , '-' AS SLOC
		    , '-' AS SLOCNAME
		    , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MOVE_DATE
		    , A.CREATE_BY AS MOVE_BY
		    , B.ITEM_ID
		    , D.ITEM_NAME
		    , A.DEPARTURE_QTY AS GOOD_QTY
		    , D.POP_CT_QTY
		    , DECODE(D.POP_GANBAN_LABELID, '', 'NONE', D.POP_GANBAN_LABELID) POP_GANBAN_LABELID
		FROM MOM_MATERIAL_DEPARTURE A,
		     MOM_MATERIAL_ORDER B,
		     MOM_VENDOR C,
		     MOM_ITEM_DEFINITION D
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.DIVISION_CD = C.DIVISION_CD
		AND   A.COMPANY_CD  = C.COMPANY_CD
		AND   A.DIVISION_CD = D.DIVISION_CD
		AND   A.COMPANY_CD  = D.COMPANY_CD
		AND   B.ITEM_ID     = D.ITEM_ID
		AND   B.VENDOR_CD   = C.VENDOR_CD
		AND   A.MATERIAL_ORDER_ID = B.MATERIAL_ORDER_ID(+)
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR} 
		AND   A.MATERIAL_DEPARTURE_ID = #{MATERIAL_DEPARTURE_ID, jdbcType=VARCHAR}
	</select>
	
	<!-- 간판발행 Body 정보 -->
	<select id="getGanbanBodyList" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		   A.ITEM_ID
		   , A.GANBAN_ID
		   , A.DEPARTURE_GROUP_ID
		   , SUBSTR(A.DEPARTURE_GROUP_ID,0,INSTR(A.DEPARTURE_GROUP_ID,'-')-1) AS DEPARTURE
		   , A.WORK_ORDER_ID
		   , A.PALLETID
		   , A.CT
		   , A.FROM_SLOC
		   , A.SLOC
		   , TO_CHAR(A.MOVE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MOVE_DATE
		   , A.MOVE_BY
		   , A.GOOD_QTY
		   , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		   , A.CREATE_BY
		   , B.NAME
		   , A.USE_YN
		FROM MOM_POP_GANBAN A,
		     TU_USER B
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.CREATE_BY = B.USER_ID
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		<if test = "WORK_ORDER_ID != null and WORK_ORDER_ID != ''">
		AND   A.WORK_ORDER_ID    = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		</if>
		<if test = "PALLETID != null and PALLETID != ''">
		AND   A.PALLETID    = #{PALLETID, jdbcType=VARCHAR}
		</if>
		<if test = "CT != null and CT != ''">
		AND   A.CT    = #{CT, jdbcType=VARCHAR}
		</if>
		<if test = "GANBAN_ID != null and GANBAN_ID != ''">
		AND   #{GANBAN_ID, jdbcType=VARCHAR} IN (A.GANBAN_ID, A.PA_GANBAN_ID)
		</if>
		<if test = "DEPARTURE_GROUP_ID != null and DEPARTURE_GROUP_ID != ''">
		AND   A.DEPARTURE_GROUP_ID    = #{DEPARTURE_GROUP_ID, jdbcType=VARCHAR}
		</if>
		<if test = "dateFlag != null and dateFlag != ''">
		AND   A.CREATE_DATE  BETWEEN SYSDATE - 1 AND SYSDATE
		</if>
		<if test = "USE_YN != null and USE_YN != ''">
		AND   A.USE_YN    = #{USE_YN, jdbcType=VARCHAR}
		</if>
		ORDER BY A.GANBAN_ID DESC
	</select>
	
	<!-- CT이동시 간판라벨 발행 여부 확인 -->
	<select id="get_ctganbancheck" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    COUNT(1) AS CTCOUNT
		FROM  MOM_POP_GANBAN A
		WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.CT = #{CT, jdbcType=VARCHAR}
		AND   A.USE_YN = 'Y'
	</select>
	
	<!-- 재고이동/공정이동 KEY -->
	<select id="getMoveseq" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    'M' || TO33NUMBER(TO_CHAR(SYSDATE, 'YY')) || TO33NUMBER(TO_CHAR(SYSDATE, 'MM')) || TO33NUMBER(TO_CHAR(SYSDATE, 'DD')) || LPAD(TO33NUMBER(S_MOVE_SEQ.NEXTVAL), 4, '0')
		    AS MOVESEQ
		FROM DUAL
	</select>
	
	<!-- 이동처리 처리중 여부 -->
	<select id="getMoveseqCheck" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    COUNT(1) 
		    AS MOVECNT 
		FROM MOM_POP_ITEM_MOVE_TMP A 
		WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.TRANSFER_FLAG = 'WAIT'
	</select>
	
	<!-- 자재입고 처리중 여부 -->
	<select id="getGRseqCheck" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    COUNT(1) 
		    AS MOVECNT 
		FROM MOM_POP_MAT_GOODS_RECEIPT_TMP A 
		WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.TRANSFER_FLAG = 'WAIT'
	</select>
	
	<!-- 라벨 중복 체크 -->
	<select id="get_ganbanDupChk" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT COUNT(1) AS LABELCHK
		  FROM TU_GANBAN
		 WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND GANBAN_ID   = #{GANBAN, jdbcType=VARCHAR} 
	</select>
	
	<!-- 불출 처리중 여부 -->
	<select id="getGIseqCheck" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    COUNT(1) 
		    AS MOVECNT 
		FROM MOM_POP_MATERIAL_REQUEST_TMP A 
		WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.TRANSFER_FLAG = 'WAIT'
	</select>
	
	<select id="get_materialInput" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT '0' AS SCANQTY
			 , A.DEPARTURE_GROUP_ID
		     , A.MATERIAL_ORDER_ID
		     , A.MATERIAL_DEPARTURE_ID
		     , A.ORDER_GROUP_ID
		     , A.VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME( A.DIVISION_CD
		                                                , A.COMPANY_CD
		                                                , A.VENDOR_CD) 
		        FROM  DUAL)                             AS VENDOR_NAME  
		     ,  A.DEPARTURE_VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME( A.DIVISION_CD
		                                                , A.COMPANY_CD
		                                                , A.DEPARTURE_VENDOR_CD )
		        FROM  DUAL)     AS DEPARTURE_VENDOR_NAME 
		     , A.ITEM_ID
		     , MID.ITEM_NAME
		     , MID.SPECIFICATION
		     , MID.UNIT  
		     , CASE WHEN MID.POP_CT_QTY = 0 THEN TO_CHAR(A.DEPARTURE_QTY)
		     		ELSE TO_CHAR(ROUND(NVL(MID.POP_CT_QTY, A.DEPARTURE_QTY), 4), 'FM9,999,990.00')
		        END AS POPCTQTY
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( MID.DIVISION_CD
		                                              , MID.COMPANY_CD
		                                              , 'ITEM_UNIT'
		                                              , MID.UNIT )
		        FROM DUAL)                            AS UNIT_NAME 
		     , A.IQC_FLAG     
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD
		                                              , 'USE_FLAG'
		                                              , A.IQC_FLAG )
		        FROM DUAL)                            AS IQC_FLAG_NAME
		     , TO_CHAR(ROUND(A.ORDER_QTY, 4), 'FM9,999,990.00') ORDER_QTY  
		     , TO_CHAR(ROUND(A.DEPARTURE_QTY, 4), 'FM9,999,990.00') DEPARTURE_QTY
		     , TO_CHAR(ROUND(A.ORDER_REMAIN_QTY, 4), 'FM9,999,990.00') ORDER_REMAIN_QTY
		     , A.DELIVERY_DATE              
		     , A.ORDER_DATE    
		     , A.DEPARTURE_DATE             
		     , A.DEPARTURE_STATE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD
		                                              , 'MATERIAL_DEPARTURE_STATE'
		                                              , A.DEPARTURE_STATE )
		        FROM DUAL)                            AS DEPARTURE_STATE_NAME    
		     , A.ORDER_STATE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD
		                                              , 'MATERIAL_ORDER_STATE'
		                                              , A.ORDER_STATE )
		        FROM DUAL)                            AS ORDER_STATE_NAME    
		     , A.ORDER_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD
		                                              ,'SYSTEM_FLAG'
		                                              , A.ORDER_TYPE )
		        FROM DUAL)                            AS ORDER_TYPE_NAME    
		     , A.CREATE_DATE 
		     , A.CREATE_BY
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A .DIVISION_CD
		                                              , A.COMPANY_CD
		                                              , A.CREATE_BY) 
		        FROM  DUAL)                            AS CREATE_BY_NAME  
		     , A.UPDATE_DATE        
		     , A.UPDATE_BY 
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD
		                                              , A.UPDATE_BY) 
		        FROM  DUAL)                            AS UPDATE_BY_NAME
		     , A.LOCATION_CD                          AS LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD
		                                                  , A.COMPANY_CD
		                                                  , A.LOCATION_CD)
		        FROM   DUAL )     AS LOCATION_NAME 
		     , A.MARKET_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD
		                                              , 'MARKET_CODE'
		                                              , A.MARKET_CD )
		        FROM DUAL)                            AS MARKET_NAME       
		     , A.CURRENCY_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD
		                                              , 'CURRENCY_CODE'
		                                              , A.CURRENCY_CD )
		        FROM DUAL)                            AS CURRENCY_NAME
		     , A.ORDER_SEQ
		     , A.VENDOR_LOT
		     , (SELECT MOM_COMMON_PKG.FN_GET_MATERIAL_PRICE( A.DIVISION_CD
		                                                   , A.COMPANY_CD
		                                                   , A.VENDOR_CD
		                                                   , A.ITEM_ID
		                                                   , A.MARKET_CD
		                                                   , A.CURRENCY_CD
		                                                   , TRUNC(SYSDATE) )
		        FROM DUAL)                            AS UNIT_PRICE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CURRENT_EXCHANGE_RATE( A.DIVISION_CD
		                                                          , A.COMPANY_CD
		                                                          , A.CURRENCY_CD
		                                                          , TRUNC(SYSDATE) )
		        FROM DUAL)                            AS EX_UNIT_PRICE  
		     , A.DEPARTURE_FLAG   
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD
		                                              , 'USE_FLAG'
		                                              , A.DEPARTURE_FLAG )
		        FROM DUAL)                            AS DEPARTURE_FLAG_NAME  
		     , MID.ITEM_TYPE 
		     ,(SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                              , A.COMPANY_CD
		                                              , 'ITEM_TYPE'
		                                              , MID.ITEM_TYPE  )
		        FROM DUAL)                            AS ITEM_TYPE_NAME   
		     , CASE WHEN A.IQC_FLAG = 'N' AND A.DEPARTURE_FLAG = 'N' THEN  A.ORDER_REMAIN_QTY
		       ELSE A.DEPARTURE_QTY
		       END    AS  INPUT_QTY
		     , MID.FREE_OFFER_FLAG
	         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (A.DIVISION_CD
	                                                  , A.COMPANY_CD
	                                                  , 'FREE_OFFER_FLAG'
	                                                  , MID.FREE_OFFER_FLAG)
	            FROM DUAL)							  AS FREE_OFFER_FLAG_NAME
		     , '' AS DESCRIPTION
		     , A.ORDER_FLAG
		     , A.ORDER_FLAG_NAME
		     , NVL(A.CONVERSION_UNIT_QTY, 1) AS CONVERSION_UNIT_QTY
		     , NVL(MID.CONVERSION_UNIT_QTY, 1) AS ORIGIN_CONVERSION_UNIT_QTY
             , MID.CONVERSION_UNIT
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (A.DIVISION_CD
	                                                  , A.COMPANY_CD
	                                                  , 'ITEM_UNIT'
	                                                  , MID.CONVERSION_UNIT)
	            FROM DUAL)							  AS CONVERSION_UNIT_NAME
	         , A.TRANSACTION_SEQ
	         , 'N' 		AS CHK_YN
	         , (SELECT CASE WHEN COUNT(1) = 0 THEN 'N'
	                        ELSE 'Y' END
	              FROM MOM_POP_GANBAN
	             WHERE DEPARTURE_GROUP_ID = A.MATERIAL_DEPARTURE_ID)  AS GANBANYN
		FROM   (SELECT MO.DIVISION_CD
		             , MO.COMPANY_CD
		             , MO.MATERIAL_ORDER_ID
		             , MD.MATERIAL_DEPARTURE_ID
		             , MO.ORDER_GROUP_ID
		             , MO.VENDOR_CD
		             , NVL(MO.DEPARTURE_VENDOR_CD, MO.VENDOR_CD) AS DEPARTURE_VENDOR_CD
		             , MO.ITEM_ID
		             , MO.IQC_FLAG     
		             , MO.ORDER_QTY
		             , MD.DEPARTURE_QTY
		             , MO.ORDER_QTY - NVL(MO.CANCEL_QTY, 0) - DECODE(NVL(MD.DEPARTURE_QTY, 0), 0, MO.CLOSED_QTY, MD.DEPARTURE_QTY) AS  ORDER_REMAIN_QTY
		             , TO_CHAR(MO.DELIVERY_DATE  , 'YYYY-MM-DD')   AS DELIVERY_DATE              
		             , TO_CHAR(MO.ORDER_DATE , 'YYYY-MM-DD')       AS ORDER_DATE    
		             , TO_CHAR(MD.DEPARTURE_DATE , 'YYYY-MM-DD')   AS DEPARTURE_DATE             
		             , MD.DEPARTURE_STATE
		             , MO.ORDER_STATE
		             , MO.ORDER_TYPE
		             , TO_CHAR(MO.CREATE_DATE  , 'YYYY-MM-DD')   AS CREATE_DATE 
		             , MO.CREATE_BY
		             , TO_CHAR(MO.UPDATE_DATE   , 'YYYY-MM-DD') AS UPDATE_DATE        
		             , MO.UPDATE_BY 
		             , MO.LOCATION_CD                          AS LOCATION_CD
		             , MO.MARKET_CD
		             , MO.CURRENCY_CD
		             , MO.ORDER_SEQ
		             , MD.VENDOR_LOT
		             , MD.DEPARTURE_GROUP_ID
		             , MO.DEPARTURE_FLAG
		             , MO.ORDER_FLAG
	                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (MO.DIVISION_CD
	                                                          , MO.COMPANY_CD
	                                                          , 'ORDER_FLAG'
	                                                          , MO.ORDER_FLAG)
	                      FROM DUAL)                            AS ORDER_FLAG_NAME
	                 , MD.CONVERSION_UNIT_QTY
	                 , MD.TRANSACTION_SEQ
		        FROM   MOM_MATERIAL_ORDER MO
		             , MOM_MATERIAL_DEPARTURE MD
		        WHERE  MO.DIVISION_CD = MD.DIVISION_CD
		        AND    MO.COMPANY_CD  = MD.COMPANY_CD
		        AND    MO.MATERIAL_ORDER_ID = MD.MATERIAL_ORDER_ID
		        AND    MO.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		        AND    MO.COMPANY_CD  =  #{companyCd, jdbcType=VARCHAR}
		        AND    NVL(MO.DEPARTURE_FLAG, 'N') = 'Y'
		        AND    MD.DEPARTURE_STATE  = DECODE(MO.IQC_FLAG, 'Y', 'CHECK_PASS', 'DEPARTURE')
		        AND    MO.ORDER_DATE BETWEEN SYSDATE - 180 AND SYSDATE + 7 
				UNION ALL
		        SELECT MO.DIVISION_CD
		             , MO.COMPANY_CD
		             , MO.MATERIAL_ORDER_ID
		             , MD.MATERIAL_DEPARTURE_ID
		             , MO.ORDER_GROUP_ID
		             , MO.VENDOR_CD
		             , NVL(MO.DEPARTURE_VENDOR_CD, MO.VENDOR_CD) AS DEPARTURE_VENDOR_CD
		             , MO.ITEM_ID
		             , MO.IQC_FLAG     
		             , MO.ORDER_QTY
		             , MD.DEPARTURE_QTY
		             , MO.ORDER_QTY - NVL(MO.CANCEL_QTY, 0) - NVL(MD.DEPARTURE_QTY, 0)  AS  ORDER_REMAIN_QTY
		             , TO_CHAR(MO.DELIVERY_DATE, 'YYYY-MM-DD')   AS DELIVERY_DATE              
		             , TO_CHAR(MO.ORDER_DATE, 'YYYY-MM-DD')       AS ORDER_DATE    
		             , TO_CHAR(MD.DEPARTURE_DATE, 'YYYY-MM-DD')   AS DEPARTURE_DATE             
		             , MD.DEPARTURE_STATE
		             , MO.ORDER_STATE
		             , MO.ORDER_TYPE
		             , TO_CHAR(MO.CREATE_DATE, 'YYYY-MM-DD')   AS CREATE_DATE 
		             , MO.CREATE_BY
		             , TO_CHAR(MO.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE        
		             , MO.UPDATE_BY 
		             , MO.LOCATION_CD                          AS LOCATION_CD
		             , MO.MARKET_CD
		             , MO.CURRENCY_CD
		             , MO.ORDER_SEQ
		             , MD.VENDOR_LOT
		             , MD.DEPARTURE_GROUP_ID
		             , MO.DEPARTURE_FLAG
		             , MO.ORDER_FLAG
	                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (MO.DIVISION_CD
	                                                          , MO.COMPANY_CD
	                                                          , 'ORDER_FLAG'
	                                                          , MO.ORDER_FLAG)
	                      FROM DUAL)                            AS ORDER_FLAG_NAME
	                 , MD.CONVERSION_UNIT_QTY
	                 , MD.TRANSACTION_SEQ
		        FROM   MOM_MATERIAL_ORDER MO
		             , MOM_MATERIAL_DEPARTURE MD
		        WHERE  MO.DIVISION_CD = MD.DIVISION_CD
		        AND    MO.COMPANY_CD  = MD.COMPANY_CD
		        AND    MO.MATERIAL_ORDER_ID = MD.MATERIAL_ORDER_ID
		        AND    MO.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		        AND    MO.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		        AND    NVL(MO.DEPARTURE_FLAG, 'N') = 'N'
		        AND    MD.DEPARTURE_STATE  = 'CHECK_PASS'
		        AND    MO.ORDER_DATE BETWEEN SYSDATE - 180 AND SYSDATE + 7  
		        UNION ALL
		        SELECT MO.DIVISION_CD
		             , MO.COMPANY_CD
		             , MO.MATERIAL_ORDER_ID
		             , ''                     AS MATERIAL_DEPARTURE_ID
		             , MO.ORDER_GROUP_ID
		             , MO.VENDOR_CD
		             , NVL(MO.DEPARTURE_VENDOR_CD, MO.VENDOR_CD) AS DEPARTURE_VENDOR_CD
		             , MO.ITEM_ID
		             , MO.IQC_FLAG     
		             , MO.ORDER_QTY
		             , 0                          AS DEPARTURE_QTY
		             , MO.ORDER_QTY - NVL(MO.CANCEL_QTY, 0) + NVL(MO.CLOSED_QTY, 0) AS  ORDER_REMAIN_QTY
		             , TO_CHAR(MO.DELIVERY_DATE  , 'YYYY-MM-DD')   AS DELIVERY_DATE              
		             , TO_CHAR(MO.ORDER_DATE , 'YYYY-MM-DD')       AS ORDER_DATE    
		             , TO_CHAR(MO.DEPARTURE_DATE , 'YYYY-MM-DD')   AS DEPARTURE_DATE
		             , ''                                          AS DEPARTURE_STATE
		             , MO.ORDER_STATE
		             , MO.ORDER_TYPE
		             , TO_CHAR(MO.CREATE_DATE  , 'YYYY-MM-DD')   AS CREATE_DATE 
		             , MO.CREATE_BY
		             , TO_CHAR(MO.UPDATE_DATE   , 'YYYY-MM-DD') AS UPDATE_DATE        
		             , MO.UPDATE_BY 
		             , MO.LOCATION_CD                          AS LOCATION_CD
		             , MO.MARKET_CD
		             , MO.CURRENCY_CD
		             , MO.ORDER_SEQ
		             , ''                                      AS VENDOR_LOT
		             , ''                                      AS DEPARTURE_GROUP_ID
		             , MO.DEPARTURE_FLAG
		             , MO.ORDER_FLAG
	                 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (MO.DIVISION_CD
	                                                          , MO.COMPANY_CD
	                                                          , 'ORDER_FLAG'
	                                                          , MO.ORDER_FLAG)
	                    FROM   DUAL)                            AS ORDER_FLAG_NAME       
	                 , NVL((SELECT MOM_COMMON_PKG.FN_GET_CONVERSION_QTY( MO.DIVISION_CD
                                 							  	   , MO.COMPANY_CD
                                  								   , MO.ITEM_ID ) 
                        FROM DUAL), 1)	* MO.ORDER_QTY					 AS ORIGIN_CONVERSION_UNIT_QTY
                     , MO.TRANSACTION_SEQ
		        FROM   MOM_MATERIAL_ORDER MO
		        WHERE  MO.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} 
		        AND    MO.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR} 
		        AND    NVL(MO.DEPARTURE_FLAG, 'N') = 'N'
		        AND    MO.IQC_FLAG  = 'N'
		        AND    MO.ORDER_STATE = 'ORDER' 
		        AND    MO.ORDER_DATE BETWEEN SYSDATE - 180 AND SYSDATE + 7 
		        ) A
		      , MOM_ITEM_DEFINITION MID
			WHERE   A.DIVISION_CD = MID.DIVISION_CD
			AND     A.COMPANY_CD    = MID.COMPANY_CD
			AND     A.ITEM_ID       = MID.ITEM_ID
			<if test="departureGroupID != null and departureGroupID != ''">
			AND    A.DEPARTURE_GROUP_ID = #{departureGroupID, jdbcType=VARCHAR} 
		    </if>
		    <if test="ganbanID != null and ganbanID != ''">
		   	AND    A.DEPARTURE_GROUP_ID = (SELECT SUBSTR(GB.DEPARTURE_GROUP_ID,0,INSTR(GB.DEPARTURE_GROUP_ID,'-')-1)
		   									 FROM MOM_POP_GANBAN GB
		   									WHERE A.DIVISION_CD 		   = GB.DIVISION_CD
		   									  AND A.COMPANY_CD  		   = GB.COMPANY_CD
											  AND GB.GANBAN_ID = #{ganbanID, jdbcType=VARCHAR}
										   )
		    </if>      
	</select>
	
	<select id="get_materialRelease_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT '0' AS SCANQTY
		     , O.PRODUCT_ORDER_ID
		     , O.ITEM_ID			AS WO_ITEM_ID
		     , ITM.ITEM_NAME		AS WO_ITEM_NAME
		     , ITM.ITEM_GROUP_CODE  AS MODEL
		     , A.WORK_ORDER_ID             
             , A.ITEM_ID        
             , D.ITEM_NAME      
             , D.SPECIFICATION             
             , D.ITEM_TYPE       
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
                                                    , A.COMPANY_CD
                                                    , 'ITEM_TYPE'
                                                    , D.ITEM_TYPE ) 
                  FROM   DUAL ) AS ITEM_TYPE_NAME             
             , D.ITEM_CATEGORY
             , A.REQUEST_STATE 
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
                                                      , A.COMPANY_CD
                                                      , 'MATERIAL_REQUEST_STATE'
                                                      , A.REQUEST_STATE ) 
                  FROM   DUAL ) AS STATE_NAME    
             , A.REQUEST_TYPE                                            
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
                                                      , A.COMPANY_CD
                                                      , 'REQUEST_TYPE'
                                                      , A.REQUEST_TYPE ) 
                  FROM   DUAL ) AS REQUEST_TYPE_NAME             
             , A.REASON_CODE               
             , TO_CHAR(A.REQUEST_DATE, 'YYYY-MM-DD')  AS REQUEST_DATE                                       
             , A.IN_LOCATION_CD                                       
             , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD 
                                                          , A.COMPANY_CD
                                                          , A.IN_LOCATION_CD )
                  FROM   DUAL ) AS IN_LOCATION_NAME  
             , A.OUT_LOCATION_CD                                        
             , F.FACILITY_NAME                   AS OUT_LOCATION_NAME   
             , F.FACILITY_TYPE                    AS OUT_FACILITY_TYPE   
             , (SELECT MOM_COMMON_PKG.FN_GET_CURRENT_STOCK(A.DIVISION_CD 
                                                          , A.COMPANY_CD
                                                          , A.ITEM_ID
                                                          , A.IN_LOCATION_CD)
                  FROM   DUAL )                          AS  CURRENT_QTY        
             , D.STANDARD_OUT_QTY   
             , O.CONFIRM_QTY        
             , A.UNIT_QTY            
             , NVL(A.ORIGIN_REQUEST_QTY, 0) ORIGIN_REQUEST_QTY     
             , A.REQUEST_QTY                                            
             , NVL(A.ISSUE_QTY, 0)  AS ISSUE_QTY                          
             , NVL(A.CANCEL_QTY, 0)  AS CANCEL_QTY                       
             , A.REQUEST_QTY - NVL(A.ISSUE_QTY, 0)- NVL(A.CANCEL_QTY, 0) AS REMAIN_QTY  
             , A.DESCRIPTION                                            
             , DECODE(A.REQUEST_STATE, 'R', 'Y', 'N') REQUEST_FLAG
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
                                                      , A.COMPANY_CD
                                                      , 'Y_N'
                                                      , DECODE(A.REQUEST_STATE, 'R', 'Y', 'N')) 
                FROM   DUAL )  AS REQUEST_FLAG_NAME
             , TO_CHAR(A.ISSUE_DATE, 'YYYY-MM-DD')  AS ISSUE_DATE                                            
             , O.RESOURCE_CD           
             , E.RESOURCE_NAME         
             , DECODE(O.ORDER_FLAG, 'IN', 'N', 'Y') AS OUTSOURCING_FLAG
             , A.MATERIAL_REQUEST_ID
             , D.CONVERSION_UNIT
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (A.DIVISION_CD
                                                      , A.COMPANY_CD
                                                      , 'ITEM_UNIT'
                                                      , D.CONVERSION_UNIT)
                  FROM DUAL) AS CONVERSION_UNIT_NAME
             , D.CONVERSION_UNIT_QTY AS ORIGIN_CONVERSION_UNIT_QTY
             , D.CONVERSION_UNIT_QTY * (A.REQUEST_QTY - NVL (A.ISSUE_QTY, 0) - NVL (A.CANCEL_QTY, 0)) AS CONVERSION_UNIT_QTY   
             , A.MARKET_CD
             , A.CURRENCY_CD
             , (SELECT  MOM_COMMON_PKG.fn_get_code_name(A.DIVISION_CD, A.CURRENCY_CD, 'MARKET_CODE', A.MARKET_CD)
                FROM    DUAL ) AS MARKET_NAME
             , (SELECT  MOM_COMMON_PKG.fn_get_code_name(A.DIVISION_CD, A.CURRENCY_CD, 'CURRENCY_CODE', A.CURRENCY_CD)
                FROM    DUAL ) AS CURRENCY_NAME   
        FROM   MOM_MATERIAL_REQUEST A
             , MOM_WORK_ORDER O 
             , MOM_ITEM_DEFINITION D
             , MOM_FACILITY F
             , MOM_RESOURCE E
             , MOM_FACILITY FI
             , MOM_ITEM_DEFINITION ITM
        WHERE  A.DIVISION_CD   = O.DIVISION_CD 
        AND    A.COMPANY_CD    = O.COMPANY_CD
        AND    A.WORK_ORDER_ID = O.WORK_ORDER_ID
        AND    A.DIVISION_CD   = D.DIVISION_CD 
        AND    A.COMPANY_CD    = D.COMPANY_CD
        AND    A.ITEM_ID       = D.ITEM_ID
        AND    A.DIVISION_CD   = F.DIVISION_CD 
        AND    A.COMPANY_CD    = F.COMPANY_CD
        AND    A.OUT_LOCATION_CD  = F.FACILITY_CD
        AND    A.DIVISION_CD   = E.DIVISION_CD 
        AND    A.COMPANY_CD    = E.COMPANY_CD
        AND    O.RESOURCE_CD   = E.RESOURCE_CD 
        AND    A.DIVISION_CD = FI.DIVISION_CD(+)
        AND    A.COMPANY_CD = FI.COMPANY_CD(+)
        AND    A.IN_LOCATION_CD = FI.FACILITY_CD(+)
        AND    O.DIVISION_CD = ITM.DIVISION_CD
        AND    O.COMPANY_CD = ITM.COMPANY_CD
        AND    O.ITEM_ID = ITM.ITEM_ID
        AND    A.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}
        AND    A.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
        AND    A.USE_YN        = 'Y'
       <if test="fromDate != null and fromDate != ''">
        AND A.REQUEST_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
                           AND     (TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.999 / 24)
       </if>
       <if test="outLocationCd != null and outLocationCd != ''">
        AND A.OUT_LOCATION_CD = #{outLocationCd, jdbcType=VARCHAR}
       </if>
       <if test="locationCd != null and locationCd != ''">
        AND A.IN_LOCATION_CD = #{locationCd, jdbcType=VARCHAR}
       </if>
       <if test="productOrderId != null and productOrderId != ''">
        AND O.PRODUCT_ORDER_ID = #{productOrderId, jdbcType=VARCHAR}
       </if>
       <if test="workOrderId != null and workOrderId != ''">
        AND A.WORK_ORDER_ID = #{workOrderId, jdbcType=VARCHAR}
       </if>
        <if test="stockType != null and stockType != ''">
            <if test='stockType == "MAT"'>
             AND D.ITEM_TYPE IN ('RM', 'SM', 'CI', 'GI')
             AND EXISTS
                  (SELECT '*'
                     FROM MOM_CODE MFF
                    WHERE MFF.DIVISION_CD = A.DIVISION_CD
                      AND MFF.COMPANY_CD = A.COMPANY_CD
                      AND MFF.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND MFF.CODE_ID = FI.FACILITY_TYPE
                      AND MFF.USE_YN = 'Y'
                      AND MFF.ATTRIBUTE1 = 'Y')
            </if>
            <if test='stockType == "WO"'>
             AND D.ITEM_TYPE IN ('SP')
             AND O.ORDER_FLAG = 'OUT'
                  AND EXISTS
                  (SELECT '*'
                     FROM MOM_CODE MFF
                    WHERE MFF.DIVISION_CD = A.DIVISION_CD
                      AND MFF.COMPANY_CD = A.COMPANY_CD
                      AND MFF.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND MFF.CODE_ID = FI.FACILITY_TYPE
                      AND MFF.USE_YN = 'Y'
                      AND MFF.ATTRIBUTE3 = 'Y')
            </if>
        </if>
        ORDER BY A.REQUEST_DATE, A.WORK_ORDER_ID, A.ITEM_ID 
	</select>
	
	<select id="get_workorder" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.WORK_ORDER_ID
			 , A.ITEM_ID
             , B.ITEM_ID    AS CHILD_ITEM_ID
		  FROM MOM_WORK_ORDER A
             , MOM_MATERIAL_REQUEST B
		 WHERE A.DIVISION_CD   = B.DIVISION_CD
		   AND A.COMPANY_CD    = B.COMPANY_CD
		   AND A.WORK_ORDER_ID = B.WORK_ORDER_ID
		   AND A.DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
           AND A.COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
           AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
           AND A.WO_STATE NOT IN ('T','C')
	</select>
	
	<select id="get_wo_input_label" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.WORK_ORDER_ID
			 , A.GANBAN_ID
		  FROM MOM_WORK_ORDER_GANBAN A
		 WHERE A.DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
           AND A.COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
           AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
	</select>
	
	<select id="get_materialReleasePO_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
			A.IN_LOCATION_CD 
			, DECODE(O.PRODUCT_ORDER_ID, '', 'NO_ORDER', O.PRODUCT_ORDER_ID) AS PRODUCT_ORDER_ID
		FROM   MOM_MATERIAL_REQUEST A
		     , MOM_WORK_ORDER O 
		     , MOM_ITEM_DEFINITION D
		     , MOM_FACILITY FI
		WHERE  A.DIVISION_CD   = O.DIVISION_CD 
		AND    A.COMPANY_CD    = O.COMPANY_CD
		AND    A.WORK_ORDER_ID = O.WORK_ORDER_ID
		AND    A.DIVISION_CD   = D.DIVISION_CD 
		AND    A.COMPANY_CD    = D.COMPANY_CD
		AND    A.ITEM_ID       = D.ITEM_ID
		AND    A.DIVISION_CD = FI.DIVISION_CD(+)
		AND    A.COMPANY_CD = FI.COMPANY_CD(+)
		AND    A.IN_LOCATION_CD = FI.FACILITY_CD(+)
        AND    A.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}
        AND    A.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
        AND    A.USE_YN        = 'Y'
       <if test="fromDate != null and fromDate != ''">
        AND A.REQUEST_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
                           AND     (TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.999 / 24)
       </if>
       <if test="outLocationCd != null and outLocationCd != ''">
        AND A.OUT_LOCATION_CD    = #{outLocationCd, jdbcType=VARCHAR}
       </if>
       <if test="locationCd != null and locationCd != ''">
        AND A.IN_LOCATION_CD = #{locationCd, jdbcType=VARCHAR}
       </if>
        <if test="stockType != null and stockType != ''">
            <if test='stockType == "MAT"'>
             AND D.ITEM_TYPE IN ('RM', 'SM', 'CI', 'GI')
             AND EXISTS
                  (SELECT '*'
                     FROM MOM_CODE MFF
                    WHERE MFF.DIVISION_CD = A.DIVISION_CD
                      AND MFF.COMPANY_CD = A.COMPANY_CD
                      AND MFF.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND MFF.CODE_ID = FI.FACILITY_TYPE
                      AND MFF.USE_YN = 'Y'
                      AND MFF.ATTRIBUTE1 = 'Y')
            </if>
            <if test='stockType == "WO"'>
             AND D.ITEM_TYPE IN ('SP')
             AND O.ORDER_FLAG = 'OUT'
                  AND EXISTS
                  (SELECT '*'
                     FROM MOM_CODE MFF
                    WHERE MFF.DIVISION_CD = A.DIVISION_CD
                      AND MFF.COMPANY_CD = A.COMPANY_CD
                      AND MFF.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND MFF.CODE_ID = FI.FACILITY_TYPE
                      AND MFF.USE_YN = 'Y'
                      AND MFF.ATTRIBUTE3 = 'Y')
            </if>
        </if>
        GROUP BY A.IN_LOCATION_CD, O.PRODUCT_ORDER_ID
        HAVING (NVL(SUM(A.REQUEST_QTY), 0) - NVL(SUM(A.ISSUE_QTY), 0) - NVL(SUM(A.CANCEL_QTY), 0)) > 0
		ORDER BY A.IN_LOCATION_CD, O.PRODUCT_ORDER_ID
	</select>
	
	<!-- 자재불출 리스트 조회 - 2019.06.18 조아람 수정 -->
	<select id="get_materialRelease_list2" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT '0' AS SCANQTY
		     , O.PRODUCT_ORDER_ID
		     , A.WORK_ORDER_ID             
             , A.ITEM_ID        
             , D.ITEM_NAME      
             , D.SPECIFICATION             
             , D.ITEM_TYPE       
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
                                                    , A.COMPANY_CD
                                                    , 'ITEM_TYPE'
                                                    , D.ITEM_TYPE ) 
                  FROM   DUAL ) AS ITEM_TYPE_NAME             
             , D.ITEM_CATEGORY
             , A.REQUEST_STATE 
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
                                                      , A.COMPANY_CD
                                                      , 'MATERIAL_REQUEST_STATE'
                                                      , A.REQUEST_STATE ) 
                  FROM   DUAL ) AS STATE_NAME    
             , A.REQUEST_TYPE                                            
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
                                                      , A.COMPANY_CD
                                                      , 'REQUEST_TYPE'
                                                      , A.REQUEST_TYPE ) 
                  FROM   DUAL ) AS REQUEST_TYPE_NAME             
             , A.REASON_CODE               
             , TO_CHAR(A.REQUEST_DATE, 'YYYY-MM-DD')  AS REQUEST_DATE                                       
             , A.IN_LOCATION_CD                                       
             , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD 
                                                          , A.COMPANY_CD
                                                          , A.IN_LOCATION_CD )
                  FROM   DUAL ) AS IN_LOCATION_NAME  
             , A.OUT_LOCATION_CD                                        
             , F.FACILITY_NAME                   AS OUT_LOCATION_NAME   
             , F.FACILITY_TYPE                    AS OUT_FACILITY_TYPE   
             , (SELECT MOM_COMMON_PKG.FN_GET_CURRENT_STOCK(A.DIVISION_CD 
                                                          , A.COMPANY_CD
                                                          , A.ITEM_ID
                                                          , A.IN_LOCATION_CD)
                  FROM   DUAL )                          AS  CURRENT_QTY        
             , D.STANDARD_OUT_QTY   
             , O.CONFIRM_QTY        
             , A.UNIT_QTY            
             , NVL(A.ORIGIN_REQUEST_QTY, 0) ORIGIN_REQUEST_QTY     
             , A.REQUEST_QTY                                            
             , NVL(A.ISSUE_QTY, 0)  AS ISSUE_QTY                          
             , NVL(A.CANCEL_QTY, 0)  AS CANCEL_QTY                       
             , A.REQUEST_QTY - NVL(A.ISSUE_QTY, 0)- NVL(A.CANCEL_QTY, 0) AS REMAIN_QTY  
             , A.DESCRIPTION                                            
             , DECODE(A.REQUEST_STATE, 'R', 'Y', 'N') REQUEST_FLAG
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
                                                      , A.COMPANY_CD
                                                      , 'Y_N'
                                                      , DECODE(A.REQUEST_STATE, 'R', 'Y', 'N')) 
                FROM   DUAL )  AS REQUEST_FLAG_NAME
             , TO_CHAR(A.ISSUE_DATE, 'YYYY-MM-DD')  AS ISSUE_DATE                                            
             , O.RESOURCE_CD           
             , E.RESOURCE_NAME         
             , DECODE(O.ORDER_FLAG, 'IN', 'N', 'Y') AS OUTSOURCING_FLAG
             , A.MATERIAL_REQUEST_ID
             , D.CONVERSION_UNIT
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (A.DIVISION_CD
                                                      , A.COMPANY_CD
                                                      , 'ITEM_UNIT'
                                                      , D.CONVERSION_UNIT)
                  FROM DUAL) AS CONVERSION_UNIT_NAME
             , D.CONVERSION_UNIT_QTY AS ORIGIN_CONVERSION_UNIT_QTY
             , D.CONVERSION_UNIT_QTY * (A.REQUEST_QTY - NVL (A.ISSUE_QTY, 0) - NVL (A.CANCEL_QTY, 0)) AS CONVERSION_UNIT_QTY   
             , A.MARKET_CD
             , A.CURRENCY_CD
             , (SELECT  MOM_COMMON_PKG.fn_get_code_name(A.DIVISION_CD, A.CURRENCY_CD, 'MARKET_CODE', A.MARKET_CD)
                FROM    DUAL ) AS MARKET_NAME
             , (SELECT  MOM_COMMON_PKG.fn_get_code_name(A.DIVISION_CD, A.CURRENCY_CD, 'CURRENCY_CODE', A.CURRENCY_CD)
                FROM    DUAL ) AS CURRENCY_NAME 
             , CASE WHEN D.POP_GANBAN_LABELID IS NULL OR D.POP_GANBAN_LABELID = 'NONE' THEN 'N' ELSE 'Y' END AS LABEL_YN
        FROM   MOM_MATERIAL_REQUEST A
             , MOM_WORK_ORDER O 
             , MOM_ITEM_DEFINITION D
             , MOM_FACILITY F
             , MOM_RESOURCE E
             , MOM_FACILITY FI
        WHERE  A.DIVISION_CD   = O.DIVISION_CD 
        AND    A.COMPANY_CD    = O.COMPANY_CD
        AND    A.WORK_ORDER_ID = O.WORK_ORDER_ID
        AND    A.DIVISION_CD   = D.DIVISION_CD 
        AND    A.COMPANY_CD    = D.COMPANY_CD
        AND    A.ITEM_ID       = D.ITEM_ID
        AND    A.DIVISION_CD   = F.DIVISION_CD 
        AND    A.COMPANY_CD    = F.COMPANY_CD
        AND    A.OUT_LOCATION_CD  = F.FACILITY_CD
        AND    A.DIVISION_CD   = E.DIVISION_CD 
        AND    A.COMPANY_CD    = E.COMPANY_CD
        AND    O.RESOURCE_CD   = E.RESOURCE_CD 
        AND    A.DIVISION_CD = FI.DIVISION_CD(+)
        AND    A.COMPANY_CD = FI.COMPANY_CD(+)
        AND    A.IN_LOCATION_CD = FI.FACILITY_CD(+)
        AND    A.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}
        AND    A.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
        AND    A.USE_YN        = 'Y'
       <if test="fromDate != null and fromDate != ''">
        AND A.REQUEST_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
                           AND     (TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.999 / 24)
       </if>
       <if test="outLocationCd != null and outLocationCd != ''">
        AND A.OUT_LOCATION_CD = #{outLocationCd, jdbcType=VARCHAR}
       </if>
       <if test="locationCd != null and locationCd != ''">
        AND A.IN_LOCATION_CD = #{locationCd, jdbcType=VARCHAR}
       </if>
       <if test="workOrderId != null and workOrderId != ''">
        AND A.WORK_ORDER_ID IN (SELECT TRIM(REGEXP_SUBSTR(#{workOrderId, jdbcType=VARCHAR}, '[^|]+', 1, LEVEL)) 
        						  FROM DUAL  
        					   CONNECT BY INSTR(#{workOrderId, jdbcType=VARCHAR}, '|', 1, LEVEL - 1) > 0)
       </if>
        <if test="stockType != null and stockType != ''">
            <if test='stockType == "MAT"'>
             AND D.ITEM_TYPE IN ('RM', 'SM', 'CI', 'GI')
             AND EXISTS
                  (SELECT '*'
                     FROM MOM_CODE MFF
                    WHERE MFF.DIVISION_CD = A.DIVISION_CD
                      AND MFF.COMPANY_CD = A.COMPANY_CD
                      AND MFF.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND MFF.CODE_ID = FI.FACILITY_TYPE
                      AND MFF.USE_YN = 'Y'
                      AND MFF.ATTRIBUTE1 = 'Y')
            </if>
            <if test='stockType == "WO"'>
             AND D.ITEM_TYPE IN ('SP')
             AND O.ORDER_FLAG = 'OUT'
                  AND EXISTS
                  (SELECT '*'
                     FROM MOM_CODE MFF
                    WHERE MFF.DIVISION_CD = A.DIVISION_CD
                      AND MFF.COMPANY_CD = A.COMPANY_CD
                      AND MFF.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND MFF.CODE_ID = FI.FACILITY_TYPE
                      AND MFF.USE_YN = 'Y'
                      AND MFF.ATTRIBUTE3 = 'Y')
            </if>
        </if>
        ORDER BY A.REQUEST_DATE, A.WORK_ORDER_ID, A.ITEM_ID 
	</select>
	
	
	
	<select id="get_materialReleaseWO_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT  	A.IN_LOCATION_CD
			, DECODE(O.PRODUCT_ORDER_ID, '', 'NO_ORDER', O.PRODUCT_ORDER_ID) AS PRODUCT_ORDER_ID
			, O.WORK_ORDER_ID
			, O.WORK_ORDER_ID||'/'||O.ITEM_ID AS WO
		FROM   MOM_MATERIAL_REQUEST A
		     , MOM_WORK_ORDER O 
		     , MOM_ITEM_DEFINITION D
		     , MOM_FACILITY FI
		WHERE  A.DIVISION_CD   = O.DIVISION_CD 
		AND    A.COMPANY_CD    = O.COMPANY_CD
		AND    A.WORK_ORDER_ID = O.WORK_ORDER_ID
		AND    A.DIVISION_CD   = D.DIVISION_CD 
		AND    A.COMPANY_CD    = D.COMPANY_CD
		AND    A.ITEM_ID       = D.ITEM_ID
		AND    A.DIVISION_CD = FI.DIVISION_CD(+)
		AND    A.COMPANY_CD = FI.COMPANY_CD(+)
		AND    A.IN_LOCATION_CD = FI.FACILITY_CD(+)
        AND    A.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}
        AND    A.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
        AND    A.USE_YN        = 'Y'
       <if test="fromDate != null and fromDate != ''">
        AND A.REQUEST_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
                           AND     (TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.999 / 24)
       </if>
       <if test="locationCd != null and locationCd != ''">
        AND A.IN_LOCATION_CD = #{locationCd, jdbcType=VARCHAR}
       </if>
        <if test="stockType != null and stockType != ''">
            <if test='stockType == "MAT"'>
             AND D.ITEM_TYPE IN ('RM', 'SM', 'CI', 'GI')
             AND EXISTS
                  (SELECT '*'
                     FROM MOM_CODE MFF
                    WHERE MFF.DIVISION_CD = A.DIVISION_CD
                      AND MFF.COMPANY_CD = A.COMPANY_CD
                      AND MFF.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND MFF.CODE_ID = FI.FACILITY_TYPE
                      AND MFF.USE_YN = 'Y'
                      AND MFF.ATTRIBUTE1 = 'Y')
            </if>
            <if test='stockType == "WO"'>
             AND D.ITEM_TYPE IN ('SP')
             AND O.ORDER_FLAG = 'OUT'
                  AND EXISTS
                  (SELECT '*'
                     FROM MOM_CODE MFF
                    WHERE MFF.DIVISION_CD = A.DIVISION_CD
                      AND MFF.COMPANY_CD = A.COMPANY_CD
                      AND MFF.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND MFF.CODE_ID = FI.FACILITY_TYPE
                      AND MFF.USE_YN = 'Y'
                      AND MFF.ATTRIBUTE3 = 'Y')
            </if>
        </if>
		GROUP BY A.IN_LOCATION_CD, O.PRODUCT_ORDER_ID, O.WORK_ORDER_ID, O.WORK_ORDER_ID||'/'||O.ITEM_ID
		ORDER BY A.IN_LOCATION_CD, O.PRODUCT_ORDER_ID, O.WORK_ORDER_ID
	</select>
	
	<select id="get_itemone" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.ITEM_ID
		    , A.ITEM_NAME
		    , A.SPECIFICATION
		FROM MOM_ITEM_DEFINITION A
        WHERE  A.DIVISION_CD   = #{divisionCd, jdbcType=VARCHAR}
        AND    A.COMPANY_CD    = #{companyCd, jdbcType=VARCHAR}
        AND    A.USE_YN        = 'Y'
        AND    A.ITEM_ID       = #{itemId, jdbcType=VARCHAR}
	</select>

	<select id="get_temprature" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.CODE_ID,
		    A.CODE_VALUES
		FROM MOM_CODE A
		WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND   A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND   A.CODE_CLASS_ID = 'TEMPRATURE'
	</select>

	<select id="get_destination" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.CODE_ID AS CODE
		    , A.CODE_ID AS NAME
                             , A.CODE_ID AS VALUE
                              , A.CODE_ID AS CODE_NAME
		    , A.CODE_ID AS BUTTONTEXT
		FROM MOM_CODE A
		WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND   A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND   A.CODE_CLASS_ID = 'DESTINATION'
	</select>
	
	<!-- BIN 정보 조회 - 2019.06.21 조아람 추가 -->
	<select id="get_binInfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT LOCATION_CD
		     , RACK_ID
		     , BIN_ID
		     , X||','|| Y||','||Z   AS XYZ
		     , WIDTH||'*'||HEIGHT   AS BIN_SIZE
		  FROM MOM_FACILITY_BIN
		 WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND LOCATION_CD = #{LOCATION_CD, jdbcType=VARCHAR}
		   AND BIN_ID = #{BIN_ID, jdbcType=VARCHAR}
		   AND USE_YN = 'Y'
		   AND IN_DEFAULT_YN = 'N'
		   AND OUT_DEFAULT_YN = 'N'
	</select>
	
	<!-- BIN이동 대상 간판정보 -->
	<select id="get_ganbanInfoForMove" resultType="camelMap" parameterType="java.util.HashMap">
		 SELECT  A.GANBAN_ID
	           , A.GANBAN_TYPE
	           , A.ITEM_ID
	           , B.ITEM_NAME
			   , A.QTY
	           , A.UNIT_ID
	           , A.BIN_ID
	           , A.LOCATION_CD
	           , A.DESCRIPTION
			FROM TU_GANBAN A,
			     MOM_ITEM_DEFINITION B
			WHERE A.DIVISION_CD = B.DIVISION_CD
			AND   A.COMPANY_CD  = B.COMPANY_CD
			AND   A.ITEM_ID = B.ITEM_ID
			AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
			AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
			<if test = "LOCATION_CD != null and LOCATION_CD != ''">
			AND   A.LOCATION_CD  = #{LOCATION_CD, jdbcType=VARCHAR}
			</if>
	        <if test = "BIN_ID != null and BIN_ID != ''">
			AND   A.BIN_ID  = #{BIN_ID, jdbcType=VARCHAR}
			</if>
	        <if test = "GANBAN_ID != null and GANBAN_ID != ''">
			AND   A.GANBAN_ID = #{GANBAN_ID, jdbcType=VARCHAR}
			</if>
	        AND A.USE_YN = 'Y'
			ORDER BY A.GANBAN_ID DESC
	</select>
	
	
	<select id="get_cancelGanbanInfo" resultType="camelMap" parameterType="java.util.HashMap">
		 SELECT  A.GANBAN_ID
	           , A.GANBAN_TYPE
	           , A.ITEM_ID
	           , B.ITEM_NAME
			   , A.QTY
	           , A.UNIT_ID
	           , A.BIN_ID
	           , A.LOCATION_CD
	           , A.DESCRIPTION
	           , '' AS RE_PRINT
			FROM TU_GANBAN A,
			     MOM_ITEM_DEFINITION B
			WHERE A.DIVISION_CD = B.DIVISION_CD
			AND   A.COMPANY_CD  = B.COMPANY_CD
			AND   A.ITEM_ID = B.ITEM_ID
			AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
			AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
			<if test = "LOCATION_CD != null and LOCATION_CD != ''">
			AND   A.LOCATION_CD  = #{LOCATION_CD, jdbcType=VARCHAR}
			</if>
	        <if test = "BIN_ID != null and BIN_ID != ''">
			AND   A.BIN_ID  = #{BIN_ID, jdbcType=VARCHAR}
			</if>
	        <if test = "GANBAN_ID != null and GANBAN_ID != ''">
			AND   A.GANBAN_ID = #{GANBAN_ID, jdbcType=VARCHAR}
			<!-- Split된 간판제외 -->
			AND   0 = (SELECT COUNT(*) FROM TU_GANBAN WHERE PARENT_GANBAN_ID = A.GANBAN_ID) 
            <!-- 실적취소로 인한 사용불가 처리된 간판 제외 -->
            AND   0 =  CASE WHEN A.GANBAN_TYPE = 'BUTTON'
                            THEN (SELECT COUNT(*) 
                                    FROM MOM_WORK_ORDER_RESULT
                                   WHERE STATE ='C'
                                     AND PREV_WORK_ORDER_RESULT_ID IN (SELECT WORK_ORDER_RESULT_ID 
                                                                         FROM MOM_WORK_ORDER_RESULT
                                                                        WHERE CT = A.GANBAN_ID))
                            ELSE 0
                        END
			</if>
	        AND A.USE_YN = 'N'
			ORDER BY A.GANBAN_ID DESC
	</select>
	
	<!-- TO LOCATION 에 대한 DEFAULT BIN 유무 체크 -->
	<select id="getOutDefaultBin" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT BIN_ID 
		  FROM MOM_FACILITY_BIN
		 WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND LOCATION_CD  = #{LOCATION_CD, jdbcType=VARCHAR}
	       AND OUT_DEFAULT_YN = 'Y'
	       AND USE_YN = 'Y'
	</select>
	
	<!-- TO LOCATION 에 대한 DEFAULT BIN 유무 체크 -->
	<select id="getganbanqty" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT DEPARTURE_QTY - (SELECT NVL(SUM(QTY), 0)
		                          FROM TU_GANBAN
		                         WHERE DIVISION_CD        = #{DIVISION_CD, jdbcType=VARCHAR}
		                           AND COMPANY_CD         = #{COMPANY_CD, jdbcType=VARCHAR}
		                           AND DEPARTURE_GROUP_ID = #{DEPARTURE_GROUP_ID, jdbcType=VARCHAR}
		                           AND USE_YN = 'Y'                                                 ) AS QTY
 	      FROM MOM_MATERIAL_DEPARTURE
         WHERE DIVISION_CD        = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND COMPANY_CD         = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND MATERIAL_DEPARTURE_ID = #{DEPARTURE_GROUP_ID, jdbcType=VARCHAR}
		   
	</select>
	
	<!-- TO LOCATION 에 대한 DEFAULT BIN 유무 체크 -->
	<select id="getInDefaultBin" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT BIN_ID 
		  FROM MOM_FACILITY_BIN
		 WHERE DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND LOCATION_CD  = #{LOCATION_CD, jdbcType=VARCHAR}
	       AND IN_DEFAULT_YN = 'Y'
	       AND USE_YN = 'Y'
	</select>
	
	<!-- 라벨이 발행되지 않은 실적 수량 조회 -->
	<select id="get_noLabelQty" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT NVL(SUM(GOOD_QTY), 0) AS QTY
		  FROM MOM_WORK_ORDER_RESULT
		 WHERE DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
	       AND STATE NOT IN ('C')
	       AND CT = 'NODATA'
	</select>
	
	<!-- 창고 현황 : 품목별  BIN 정보 조회  -->
	<select id="getItemBinPosition" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT G.ITEM_ID
		     , I.ITEM_NAME
		     , G.BIN_ID
		     , B.RACK_ID
		     , B.X||','||B.Y||','||B.Z AS XYZ
		     , SUM(G.QTY) AS QTY
		     , MAX(G.UPDATE_DATE) AS UPDATE_DATE
		  FROM TU_GANBAN G
     	     , MOM_ITEM_DEFINITION I
		     , MOM_FACILITY_BIN B
		 WHERE G.DIVISION_CD = B.DIVISION_CD
		   AND G.COMPANY_CD = B.COMPANY_CD
		   AND G.LOCATION_CD = B.LOCATION_CD
		   AND G.BIN_ID = B.BIN_ID
		   AND G.DIVISION_CD = I.DIVISION_CD
		   AND G.COMPANY_CD = I.COMPANY_CD
		   AND G.ITEM_ID = I.ITEM_ID   
		   AND G.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND G.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND G.LOCATION_CD = #{LOCATION_CD, jdbcType=VARCHAR}
		   AND G.USE_YN = 'Y'
		   <if test = "ITEM_ID != null and ITEM_ID != ''">
		   	AND G.ITEM_ID = #{ITEM_ID, jdbcType=VARCHAR}
		   </if>
		 GROUP BY G.ITEM_ID
			    , I.ITEM_NAME
			    , G.BIN_ID
			    , B.RACK_ID
			    , B.X||','||B.Y||','||B.Z
	</select>
    
    
    <!--  실적취소 대상 간판정보 -->
	<select id="get_ganbanInfoForResultCancel" resultType="camelMap" parameterType="java.util.HashMap">
		 SELECT  A.GANBAN_ID
	           , A.GANBAN_TYPE
               , A.WORK_ORDER_ID
               , C.WORK_ORDER_RESULT_ID
	           , A.ITEM_ID
	           , B.ITEM_NAME
			   , C.GOOD_QTY
			   , C.BAD_QTY
	           , A.UNIT_ID
	           , A.BIN_ID
	           , A.LOCATION_CD
	           , A.DESCRIPTION
			FROM TU_GANBAN A,
			     MOM_ITEM_DEFINITION B,
                 MOM_WORK_ORDER_RESULT C
			WHERE A.DIVISION_CD = B.DIVISION_CD
			AND   A.COMPANY_CD  = B.COMPANY_CD
			AND   A.ITEM_ID = B.ITEM_ID
            AND   A.DIVISION_CD = C.DIVISION_CD
			AND   A.COMPANY_CD  = C.COMPANY_CD
            AND   A.WORK_ORDER_ID = C.WORK_ORDER_ID
			AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
			AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
			AND   A.GANBAN_ID IN ( C.CT, C.WORK_ORDER_RESULT_ID)
	        AND   A.USE_YN = 'Y'
	        <if test = "LOCATION_CD != null and LOCATION_CD != ''">
			AND   A.LOCATION_CD  = #{LOCATION_CD, jdbcType=VARCHAR}
			</if>
	        <if test = "GANBAN_ID != null and GANBAN_ID != ''">
			AND   A.GANBAN_ID = #{GANBAN_ID, jdbcType=VARCHAR}
			</if>	
			<if test = "RESOURCE_CD != null and RESOURCE_CD != ''">
			AND   C.RESOURCE_CD = #{RESOURCE_CD, jdbcType=VARCHAR}
			</if>		
			ORDER BY A.GANBAN_ID DESC
	</select>
	
	<!--  간판소진 라벨 정보 조회 -->
	<select id="get_ganbanInfoForUseProcess" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.WORK_ORDER_RESULT_ID AS GANBANID
		     , A.ITEM_ID
		     , B.ITEM_NAME
		     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
		     , A.QTY
		     , B.POP_CT_QTY
		  FROM MOM_POP_LABEL_SNMAKE A
		     , MOM_ITEM_DEFINITION B
		 WHERE A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID = B.ITEM_ID
		   AND A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.WORK_ORDER_RESULT_ID = #{GANBAN_ID, jdbcType=VARCHAR}
		   AND A.USE_YN = 'Y'
		   AND A.INS_USE_YN = 'N'
		UNION ALL
		SELECT A.GANBAN_ID AS GANBANID
		     , A.ITEM_ID
		     , B.ITEM_NAME
		     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
		     , A.GOOD_QTY AS QTY
		     , B.POP_CT_QTY
		  FROM MOM_POP_GANBAN A
		     , MOM_ITEM_DEFINITION B
		 WHERE A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID = B.ITEM_ID
		   AND A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.GANBAN_ID = #{GANBAN_ID, jdbcType=VARCHAR}
		   AND A.USE_YN = 'Y'
	</select>
	
	<select id="get_ganbanInfoForUseCancelProcess" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.GANBAN_ID AS GANBANID
		     , A.ITEM_ID
		     , B.ITEM_NAME
		     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
		     , A.GOOD_QTY 	AS QTY
		     , B.POP_CT_QTY
		  FROM MOM_POP_GANBAN A
		     , MOM_ITEM_DEFINITION B
		 WHERE A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID = B.ITEM_ID
		   AND A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.GANBAN_ID = #{GANBAN_ID, jdbcType=VARCHAR}
		   AND A.USE_YN = 'N'
           AND A.PA_GANBAN_ID = '-'
	</select>
	
	<select id="get_ganbanInfoForMatInput" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT #{WORK_ORDER_ID, jdbcType=VARCHAR} AS WORK_ORDER_ID
			 , A.GANBAN_ID
		     , A.ITEM_ID
		     , B.ITEM_NAME
		     , A.GOOD_QTY 	AS QTY
		  FROM MOM_POP_GANBAN A
		     , MOM_ITEM_DEFINITION B
		 WHERE A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID = B.ITEM_ID
		   AND A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.GANBAN_ID = #{GANBAN_ID, jdbcType=VARCHAR}
           AND A.PA_GANBAN_ID = '-'
	</select>
	
	<!--  출하계획서 정보 조회 -->
	<select id="get_shipmentPlanInfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 0 AS SCAN_QTY
			 , A.SHIPMENT_GROUP_ID
			 , A.SHIPMENT_SEQ_NO
		     , A.CUSTOMER_WO_ID         AS PRODUCT_ORDER_ID
		     , A.CUSTOMER_PO_ID         AS CUSTOMER_PO_NO
		     , A.ITEM_ID
		     , B.ITEM_NAME             
             , C.SALES_ITEM_ID          AS MODELSUFFIX
             , A.DEPARTURE_QTY
             , C.HS_PART_NO
             , C.LGE_PART_NO
             , D.VENDOR_CD
		     , D.VENDOR_NAME
             , A.FROM_LOCATION_CD
             , A.TO_LOCATION_CD
             , C.ORDER_QTY
             , C.CANCEL_QTY
             , C.SHIP_QTY
             , C.ORDER_QTY - C.CANCEL_QTY - C.SHIP_QTY AS REMAIN_QTY
             , TO_CHAR(C.DUE_DATE,'YYYY-MM-DD') AS DUE_DATE
             , C.SALES_ORDER_ID
             , A.BAR_CODE
		  FROM MOM_SHIPMENT_PLAN A
		     , MOM_ITEM_DEFINITION B
		     , MOM_SALES_ORDER C
		     , MOM_VENDOR D
		 WHERE A.DIVISION_CD 		= B.DIVISION_CD
		   AND A.COMPANY_CD 		= B.COMPANY_CD
		   AND A.ITEM_ID 			= B.ITEM_ID
		   AND A.DIVISION_CD 		= C.DIVISION_CD(+)
		   AND A.COMPANY_CD 		= C.COMPANY_CD(+)
		   AND A.CUSTOMER_WO_ID 	= C.ORIGIN_CUST_PO_ID(+)
		   AND A.ITEM_ID 			= C.ITEM_ID(+)
		   AND C.DIVISION_CD 		= D.DIVISION_CD(+)
		   AND C.COMPANY_CD 		= D.COMPANY_CD(+)
		   AND C.VENDOR_CD 			= D.VENDOR_CD(+)
		   AND A.DIVISION_CD 		= #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD 		= #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.FROM_LOCATION_CD   = #{LOCATION_CD, jdbcType=VARCHAR}
		   AND A.SHIPMENT_GROUP_ID	= #{LABEL_ID, jdbcType=VARCHAR}
		   AND A.SHIP_STATE 		='W'	
		 ORDER BY A.SHIPMENT_SEQ_NO
	</select>
	
	<!-- LG 출하라벨 조회 -->
	<select id="get_LGEshipmentInfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.BAR_CODE
		     , A.CUSTOMER_WO_ID         AS PRODUCT_ORDER_ID
		     , A.CUSTOMER_PO_ID         AS CUSTOMER_PO_NO
		     , A.ITEM_ID  
             , A.DEPARTURE_QTY			AS SHIPQTY
             , A.FROM_LOCATION_CD
             , A.TO_LOCATION_CD
		  FROM MOM_SHIPMENT_PLAN A
		 WHERE A.DIVISION_CD 		= #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD 		= #{COMPANY_CD, jdbcType=VARCHAR}
           AND A.FROM_LOCATION_CD   = #{LOCATION_CD, jdbcType=VARCHAR}
		   AND A.BAR_CODE	        = #{LABEL_ID, jdbcType=VARCHAR}
		   AND A.SHIP_STATE 		='W'
	</select>
	
	<!-- 희성 출하라벨 조회 -->
	<select id="get_HSEshipmentInfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.GANBAN_ID      AS LABEL_ID
		     , A.GOOD_QTY		AS SHIPQTY
             , C.ITEM_ID             
             , C.CUSTOMER_PO_ID
		  FROM MOM_POP_GANBAN A
             , MOM_WORK_ORDER B
             , MOM_SALES_ORDER C
		 WHERE A.DIVISION_CD = B.DIVISION_CD
           AND A.COMPANY_CD = B.COMPANY_CD
           AND A.WORK_ORDER_ID = B.WORK_ORDER_ID
           AND B.DIVISION_CD = C.DIVISION_CD
           AND B.COMPANY_CD = C.COMPANY_CD
           AND B.PRODUCT_ORDER_ID = C.CUSTOMER_PO_ID
           AND A.DIVISION_CD 		= #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD 		= #{COMPANY_CD, jdbcType=VARCHAR}
           AND A.SLO                = #{LOCATION_CD, jdbcType=VARCHAR}
		   AND A.GANBAN_ID	        = #{LABEL_ID, jdbcType=VARCHAR}
           AND A.WORK_ORDER_ID     != '-'
		   AND A.SHIPMENT_YN 		='N'
	</select>
	
	<!-- 출하처리 중 여부 -->
	<select id="get_shipmentMoveseqCheck" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    COUNT(1) 
		    AS MOVECNT 
		FROM MOM_POP_SHIPMENT_TMP A 
		WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.TRANSFER_FLAG = 'WAIT'
	</select>
	
	<!-- 이동처리 item기준 temp 정보 insert -->
	<insert id="create_itemPopMoveTmp" parameterType="java.util.HashMap">
        INSERT INTO MOM_POP_ITEM_MOVE_TMP
            ( DIVISION_CD  
            , COMPANY_CD 
            , MOVE_ID   
            , TRANSFER_FLAG
            , ITEM_ID      
            , QTY     
            , IO_TIME      
            , FROM_LOCATION_CD       
            , TO_LOCATION_CD      
            , STOCK_TYPE       
            , DESCRIPTION      
            , CREATE_DATE  
            , CREATE_BY    
            )
        VALUES
            (  #{DIVISION_CD,      jdbcType=VARCHAR}
             , #{COMPANY_CD,       jdbcType=VARCHAR}
             , #{MOVE_ID,          jdbcType=VARCHAR}
             , #{TRANSFER_FLAG,    jdbcType=VARCHAR}
             , #{ITEM_ID,          jdbcType=VARCHAR}
             , #{QTY,              jdbcType=NUMERIC}
             , SYSDATE
             , #{FROM_LOCATION_CD, jdbcType=VARCHAR}
             , #{TO_LOCATION_CD,   jdbcType=VARCHAR}
             , #{STOCK_TYPE,       jdbcType=VARCHAR}
             , #{DESCRIPTION,      jdbcType=VARCHAR}
             , SYSDATE
             , #{CREATE_BY,        jdbcType=VARCHAR}
            )
    </insert>
	
	
	<!-- 이동처리 라벨 기준 temp 정보 insert -->
	<insert id="create_labelPopMoveTmp" parameterType="java.util.HashMap">
        INSERT INTO MOM_POP_LABEL_MOVE_TMP
            ( DIVISION_CD  
            , COMPANY_CD 
            , MOVE_ID
            , TRANSFER_FLAG
            , MOVEKEYCOL  
            , TO_LOCATION_CD 
            , CREATE_DATE  
            , CREATE_BY    
            )
        VALUES
            (  #{DIVISION_CD,      jdbcType=VARCHAR}
             , #{COMPANY_CD,       jdbcType=VARCHAR}
             , #{MOVE_ID,          jdbcType=VARCHAR}
             , #{TRANSFER_FLAG,    jdbcType=VARCHAR}
             , #{MOVEKEYCOL,       jdbcType=VARCHAR}
             , #{TO_LOCATION_CD,   jdbcType=VARCHAR}
             , SYSDATE
             , #{CREATE_BY,        jdbcType=VARCHAR}
            )
    </insert>
	
	<!-- 입고 간판라벨 기준 temp 정보 insert -->
	<insert id="create_labelPopGrTmp" parameterType="java.util.HashMap">
        INSERT INTO MOM_POP_LABEL_GR_TMP
            ( DIVISION_CD  
            , COMPANY_CD 
            , MOVE_ID
            , TRANSFER_FLAG
            , GRKEYCOL  
            , TO_LOCATION_CD 
            , CREATE_DATE  
            , CREATE_BY    
            )
        VALUES
            (  #{DIVISION_CD,      jdbcType=VARCHAR}
             , #{COMPANY_CD,       jdbcType=VARCHAR}
             , #{MOVE_ID,          jdbcType=VARCHAR}
             , #{TRANSFER_FLAG,    jdbcType=VARCHAR}
             , #{GRKEYCOL,         jdbcType=VARCHAR}
             , #{TO_LOCATION_CD,   jdbcType=VARCHAR}
             , SYSDATE
             , #{CREATE_BY,        jdbcType=VARCHAR}
            )
    </insert>
	
	<insert id="create_grTemp" parameterType="java.util.HashMap">
  	 INSERT INTO MOM_POP_MAT_GOODS_RECEIPT_TMP
					( DIVISION_CD         
					, COMPANY_CD          
					, MOVE_ID
					, ITEM_ID
					, TRANSFER_FLAG             
					, LOCATION_CD
					, VENDOR_CD
					, MATERIAL_ORDER_ID
					, MATERIAL_DEPARTURE_ID
					, IO_TIME
					, QTY
					, CONVERSION_UNIT_QTY
					, CURRENCY_CD
					, MARKET_CD
					, VENDOR_LOT
					, DESCRIPTION             
					, CREATE_DATE         
					, CREATE_BY
					, SEQ           
			        )
		VALUES
		          ( #{divisionCd, jdbcType=VARCHAR}
		          , #{companyCd, jdbcType=VARCHAR}
		          , #{moveId, jdbcType=VARCHAR}
		          , #{itemId, jdbcType=VARCHAR}
		          , #{transferFlag, jdbcType=VARCHAR}
		          , #{locationCd, jdbcType=VARCHAR}
		          , #{vendorCd, jdbcType=VARCHAR}
		          , #{materialOrderId, jdbcType=VARCHAR}
		          , #{materialDepartureId, jdbcType=VARCHAR}
		          , SYSDATE
		          , #{inputQty, jdbcType=NUMERIC}
		          , #{conversionUnitQty, jdbcType=NUMERIC}
		          , #{currencyCd, jdbcType=VARCHAR}
		          , #{marketCd, jdbcType=VARCHAR}
		          , #{vendorLot, jdbcType=VARCHAR}
		          , #{description, jdbcType=VARCHAR}
		          , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
		          , #{createBy, jdbcType=VARCHAR}
		          , #{seq, jdbcType=VARCHAR}
		          )
  	</insert>
	
	<!-- 출고 간판라벨 기준 temp 정보 insert -->
	<insert id="create_labelPopGiTmp" parameterType="java.util.HashMap">
        INSERT INTO MOM_POP_LABEL_GI_TMP
            ( DIVISION_CD  
            , COMPANY_CD 
            , MOVE_ID
            , TRANSFER_FLAG
            , GIKEYCOL  
            , TO_LOCATION_CD 
            , CREATE_DATE  
            , CREATE_BY    
            )
        VALUES
            (  #{DIVISION_CD,      jdbcType=VARCHAR}
             , #{COMPANY_CD,       jdbcType=VARCHAR}
             , #{MOVE_ID,          jdbcType=VARCHAR}
             , #{TRANSFER_FLAG,    jdbcType=VARCHAR}
             , #{GIKEYCOL,         jdbcType=VARCHAR}
             , #{TO_LOCATION_CD,   jdbcType=VARCHAR}
             , SYSDATE
             , #{CREATE_BY,        jdbcType=VARCHAR}
            )
    </insert>
	
	<insert id="create_giTemp" parameterType="java.util.HashMap">
		INSERT INTO MOM_POP_MATERIAL_REQUEST_TMP
            ( DIVISION_CD 
              , COMPANY_CD
              , MOVE_ID
              , TRANSFER_FLAG
              , MATERIAL_REQUEST_ID
              , WORK_ORDER_ID
              , ITEM_ID
              , ISSUE_QTY
              , IN_LOCATION_CD
              , OUT_LOCATION_CD
              , OUTSOURCING_FLAG
              , CREATE_DATE
              , CREATE_BY
              , CONVERSION_UNIT
              , CONVERSION_UNIT_QTY
              , ISSUE_DATE
              , MARKET_CD
              , CURRENCY_CD
            ) 
        VALUES 
            ( 
              #{divisionCd, jdbcType=VARCHAR}
              , #{companyCd, jdbcType=VARCHAR}
              , #{moveId, jdbcType=VARCHAR}
              , #{transferFlag, jdbcType=VARCHAR}
              , #{materialRequestId, mode=IN, jdbcType=VARCHAR} 
              , #{workOrderId, jdbcType=VARCHAR}
              , #{itemId, jdbcType=VARCHAR}
              , #{remainQty, jdbcType=NUMERIC}
              , #{inLocationCd, jdbcType=VARCHAR}
              , #{outLocationCd, jdbcType=VARCHAR}
              , #{outsourcingFlag, jdbcType=VARCHAR}
              , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
              , #{createBy, jdbcType=VARCHAR}
              , #{conversionUnit, jdbcType=VARCHAR}
              , #{conversionUnitQty, jdbcType=NUMERIC}
              , SYSDATE
              , #{marketCd, jdbcType=VARCHAR}
              , #{currencyCd, jdbcType=VARCHAR}
            )
  	</insert>
	
	<!-- 온습도 정보 insert -->
	<insert id="create_temperature" parameterType="java.util.HashMap">
		INSERT INTO MOM_POP_TEMPRATURE 
		    (
		        DIVISION_CD
		        , COMPANY_CD
		        , RESOURCE_CD
		        , DATETIMEKEY
		        , TEMPERATURE
		        , HUMIDITY
		        , UPPERTEMPERATURE
		        , UNDERTENPERATURE
		        , RESULT
		        , CREATE_DATE
		        , CREATE_BY
		    ) 
		VALUES
		    (
		        #{P_DIVISION_CD,        jdbcType=VARCHAR}
		        , #{P_COMPANY_CD,       jdbcType=VARCHAR}
		        , #{P_RESOURCE_CD,      jdbcType=VARCHAR}
		        , #{P_RESOURCE_CD,      jdbcType=VARCHAR} || TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
		        , #{P_TEMPERATURE,      jdbcType=VARCHAR}
		        , #{P_HUMIDITY,         jdbcType=VARCHAR}
		        , #{P_UPPERTEMPERATURE, jdbcType=VARCHAR}
		        , #{P_UNDERTENPERATURE, jdbcType=VARCHAR}
		        , #{P_RESULT,           jdbcType=VARCHAR}
		        , SYSDATE
		        , #{P_CREATE_BY,        jdbcType=VARCHAR}
		    )
    </insert>
	
	<!-- 출하계획 기준 temp 정보 insert -->
	<insert id="create_PopShipTmp" parameterType="java.util.HashMap">
        INSERT INTO MOM_POP_SHIPMENT_TMP
            ( DIVISION_CD
			, COMPANY_CD
			, MOVE_ID
			, TRANSFER_FLAG
			, BAR_CODE
			, FROM_LOCATION_CD
			, CREATE_DATE
			, CREATE_BY
			, SHIPMENT_GROUP_ID 
            )
        VALUES
            (  #{DIVISION_CD,      jdbcType=VARCHAR}
             , #{COMPANY_CD,       jdbcType=VARCHAR}
             , #{MOVE_ID,          jdbcType=VARCHAR}
             , #{TRANSFER_FLAG,    jdbcType=VARCHAR}
             , #{BARCODE,          jdbcType=VARCHAR}
             , #{LOCATION_CD,      jdbcType=VARCHAR}
             , SYSDATE
             , #{CREATE_BY,        jdbcType=VARCHAR}
             , #{SHIPMENT_GROUP_ID,jdbcType=VARCHAR}
            )
    </insert>
    
    <!-- 출하 라벨 기준 temp 정보 insert -->
	<insert id="create_PopShipLabelTmp" parameterType="java.util.HashMap">
        INSERT INTO MOM_POP_SHIPMENT_TMP
            ( DIVISION_CD
			, COMPANY_CD
			, MOVE_ID
			, TRANSFER_FLAG
			, GANBAN_ID
			, LOCATION_CD
			, CREATE_DATE
			, CREATE_BY 
            )
        VALUES
            (  #{DIVISION_CD,      jdbcType=VARCHAR}
             , #{COMPANY_CD,       jdbcType=VARCHAR}
             , #{MOVE_ID,          jdbcType=VARCHAR}
             , #{TRANSFER_FLAG,    jdbcType=VARCHAR}
             , #{BARCODE,          jdbcType=VARCHAR}
             , #{LOCATION_CD,      jdbcType=VARCHAR}
             , SYSDATE
             , #{CREATE_BY,        jdbcType=VARCHAR}
            )
    </insert>
    
    <!-- 출하처리 -->
	<insert id="set_shipping_proc" statementType="CALLABLE">
        CALL SP_MOM_POLANDPOP.P_CREATE_SHIP_RESULT_POP (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,      mode=OUT, jdbcType=VARCHAR}
           , #{p_division_cd,   mode=IN,   jdbcType=VARCHAR}
           , #{p_company_cd,    mode=IN,  jdbcType=VARCHAR}
           , #{p_location_cd,   mode=IN,  jdbcType=VARCHAR}
           , #{p_move_id, 		mode=IN,  jdbcType=VARCHAR}
           , #{p_modifier,     	mode=IN,  jdbcType=VARCHAR}
        )
    </insert>
    
	<!-- 간판 netting -->
	<insert id="set_ganbanNetting_proc" statementType="CALLABLE">
        CALL SP_MOM_POLANDPOP.P_CT_NETTING (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,      mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   mode=IN,   jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_WORK_ORDER_ID, mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,     mode=IN,  jdbcType=VARCHAR}
        )
    </insert>
	
	<!-- 간판 라벨 삭제 -->
	<insert id="create_deleteGanban_proc" statementType="CALLABLE">
        CALL SP_MOM_POP.P_GANBAN_DELETE (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,      mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   mode=IN,   jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_GANBAN_ID,     mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,     mode=IN,  jdbcType=VARCHAR}
        )
    </insert>	
	
	<!-- 이동처리 실행 -->
	<insert id="create_move_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_ITEM_STOCK_MOVE (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   mode=IN,   jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_STOCK_TYPE,    mode=IN,  jdbcType=VARCHAR}
           , #{P_MOVE_ID,       mode=IN,  jdbcType=VARCHAR}
           , #{P_MODIFIER,      mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_bcrport_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_BCR_UPSERT (
             #{p_err_code,      mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{P_MACADDRESS,    mode=IN,  jdbcType=VARCHAR}
           , #{P_PCNAME,        mode=IN,  jdbcType=VARCHAR}
           , #{P_IP,            mode=IN,  jdbcType=VARCHAR}
           , #{P_GTPRINT,       mode=IN,  jdbcType=VARCHAR}
           , #{P_CTPRINT,       mode=IN,  jdbcType=VARCHAR}
           , #{P_PALLETPRINT,   mode=IN,  jdbcType=VARCHAR}
           , #{P_SLEEP,         mode=IN,  jdbcType=VARCHAR}
           , #{P_FLAG,          mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,     mode=IN,  jdbcType=VARCHAR}
           , #{P_PUSHBUTTON1,   mode=IN,  jdbcType=VARCHAR}
           , #{P_PUSHBUTTON2,   mode=IN,  jdbcType=VARCHAR}
           , #{P_USEMANAGEMENT, mode=IN,  jdbcType=VARCHAR}
           , #{P_GANBANPRINT,   mode=IN,  jdbcType=VARCHAR}
           , #{P_PRINTID,       mode=IN,  jdbcType=VARCHAR}
           , #{P_INPUTTYPE,     mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_bcrremember_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_BCR_REMEMBERVALUE (
             #{p_err_code,      mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{P_MACADDRESS,    mode=IN,  jdbcType=VARCHAR}
           , #{P_LOGINREMEMBER, mode=IN,  jdbcType=VARCHAR}
           , #{P_LINEREMEMBER,  mode=IN,  jdbcType=VARCHAR}
           , #{P_UPDATE_BY,     mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_labellist_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_LABELLIST_UPSERT (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,        mode=OUT, jdbcType=VARCHAR}
           , #{P_LABEL_ID,        mode=IN,  jdbcType=VARCHAR}
           , #{P_LABEL_DESC,      mode=IN,  jdbcType=VARCHAR}
           , #{P_PRINT_ID,        mode=IN,  jdbcType=VARCHAR}
           , #{P_LABELSTATUS,     mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,       mode=IN,  jdbcType=VARCHAR}
           , #{P_WIZARD_LABEL_ID, mode=IN,  jdbcType=VARCHAR}
           , #{P_FLAG,            mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>

	<!-- CT 포장 -->
	<insert id="create_popctpacking_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_CT_PACKING (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,        mode=OUT, jdbcType=VARCHAR}
           , #{p_ct,              mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,     mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,      mode=IN,  jdbcType=VARCHAR}
           , #{P_WORK_ORDER_ID,   mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,       mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>	

	<insert id="create_labelobject_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_LABELOBJECT_UPSERT (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_runCount,              mode=OUT, jdbcType=VARCHAR}
            , #{P_FLAG,                  mode=IN,  jdbcType=VARCHAR}
            , #{P_LABEL_ID,              mode=IN,  jdbcType=VARCHAR}
			, #{P_PRINT_ID,              mode=IN,  jdbcType=VARCHAR}
			, #{P_LABEL_SEQ,             mode=IN,  jdbcType=VARCHAR}
			, #{P_METHOD_ID,             mode=IN,  jdbcType=VARCHAR}
			, #{P_X_POSITION_MM,         mode=IN,  jdbcType=VARCHAR}
			, #{P_Y_POSITION_MM,         mode=IN,  jdbcType=VARCHAR}
			, #{P_X_POSITION_PIX,        mode=IN,  jdbcType=VARCHAR}
			, #{P_Y_POSITION_PIX,        mode=IN,  jdbcType=VARCHAR}
			, #{P_LINE_THICKNESS,        mode=IN,  jdbcType=VARCHAR}
			, #{P_WIDTH_AREA_MM,         mode=IN,  jdbcType=VARCHAR}
			, #{P_HEIGHT_AREA_MM,        mode=IN,  jdbcType=VARCHAR}
			, #{P_WIDTH_AREA_PIX,        mode=IN,  jdbcType=VARCHAR}
			, #{P_HEIGHT_AREA_PIX,       mode=IN,  jdbcType=VARCHAR}
			, #{P_BARCODE_MODULE_WIDTH,  mode=IN,  jdbcType=VARCHAR}
			, #{P_BARCODE_RATIO,         mode=IN,  jdbcType=VARCHAR}
			, #{P_LANDSCAPE,             mode=IN,  jdbcType=VARCHAR}
			, #{P_BARCODE_HEIGHT_MM,     mode=IN,  jdbcType=VARCHAR}
			, #{P_BARCODE_HEIGHT_PIX,    mode=IN,  jdbcType=VARCHAR}
			, #{P_BARCODE_TEXT_UNDER_YN, mode=IN,  jdbcType=VARCHAR}
			, #{P_BARCODE_2D_SIZE,       mode=IN,  jdbcType=VARCHAR}
			, #{P_LABEL_VALUE,           mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,             mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_labelobjectmove_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_LABELOBJECT_MOVE (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_runCount,              mode=OUT, jdbcType=VARCHAR}
            , #{P_LABEL_ID,              mode=IN,  jdbcType=VARCHAR}
			, #{P_PRINT_ID,              mode=IN,  jdbcType=VARCHAR}
			, #{P_LABEL_SEQ,             mode=IN,  jdbcType=VARCHAR}
			, #{P_X_POSITION_MM,         mode=IN,  jdbcType=VARCHAR}
			, #{P_Y_POSITION_MM,         mode=IN,  jdbcType=VARCHAR}
			, #{P_X_POSITION_PIX,        mode=IN,  jdbcType=VARCHAR}
			, #{P_Y_POSITION_PIX,        mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,             mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_labelobjectdel_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_LABELOBJECT_DELETE (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_runCount,              mode=OUT, jdbcType=VARCHAR}
            , #{P_LABEL_ID,              mode=IN,  jdbcType=VARCHAR}
			, #{P_PRINT_ID,              mode=IN,  jdbcType=VARCHAR}
			, #{P_LABEL_SEQ,             mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,             mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_popworesult_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_POP_CREATE_WO_RESULT (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_serialnumber,          mode=IN,  jdbcType=VARCHAR}
			, #{p_division_cd,           mode=IN,  jdbcType=VARCHAR}
			, #{p_company_cd,            mode=IN,  jdbcType=VARCHAR}
			, #{p_work_order_id,         mode=IN,  jdbcType=VARCHAR}
			, #{p_wo_state,              mode=IN,  jdbcType=VARCHAR}
			, #{p_shift_cd,              mode=IN,  jdbcType=VARCHAR}
			, #{p_work_person,           mode=IN,  jdbcType=VARCHAR}
			, #{p_good_qty,              mode=IN,  jdbcType=VARCHAR}
			, #{p_bad_qty,               mode=IN,  jdbcType=VARCHAR}
			, #{p_description,           mode=IN,  jdbcType=VARCHAR}
			, #{p_close_flag,            mode=IN,  jdbcType=VARCHAR}
			, #{p_badcode,               mode=IN,  jdbcType=VARCHAR}
			, #{p_destination,            mode=IN,  jdbcType=VARCHAR}
			, #{p_update_by,             mode=IN,  jdbcType=VARCHAR}
			, #{p_short_sn,               mode=IN,  jdbcType=VARCHAR}
			, #{p_long_sn,                mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_popworesult_proc_new" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_POP_CREATE_WO_RESULT_NEW (
              #{p_err_code,      mode=OUT, jdbcType=VARCHAR}
			, #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
			, #{p_division_cd,   mode=IN,  jdbcType=VARCHAR}
			, #{p_company_cd,    mode=IN,  jdbcType=VARCHAR}
			, #{p_lot_type,      mode=IN,  jdbcType=VARCHAR}
			, #{p_serialnumber,  mode=IN,  jdbcType=VARCHAR}
			, #{p_scode,         mode=IN,  jdbcType=VARCHAR}
			, #{p_ccode,         mode=IN,  jdbcType=VARCHAR}
			, #{p_work_order_id, mode=IN,  jdbcType=VARCHAR}
			, #{p_wo_state,      mode=IN,  jdbcType=VARCHAR}
			, #{p_shift_cd,      mode=IN,  jdbcType=VARCHAR}
			, #{p_work_person,   mode=IN,  jdbcType=VARCHAR}
			, #{p_good_qty,      mode=IN,  jdbcType=VARCHAR}
			, #{p_bad_qty,       mode=IN,  jdbcType=VARCHAR}
			, #{p_description,   mode=IN,  jdbcType=VARCHAR}
			, #{p_close_flag,    mode=IN,  jdbcType=VARCHAR}
			, #{p_badcode,       mode=IN,  jdbcType=VARCHAR}
			, #{p_update_by,     mode=IN,  jdbcType=VARCHAR}
			, #{p_ganban_id,     mode=IN,  jdbcType=VARCHAR}
			, #{p_label_id,      mode=IN,  jdbcType=VARCHAR}
			, #{p_ip_address,    mode=IN,  jdbcType=VARCHAR}
			, #{p_ganban_yn,     mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>

	<!-- SN생성(sn, ct, pallet) -->
	<insert id="create_snmake_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_SNMAKE (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,        mode=OUT, jdbcType=VARCHAR}
           , #{P_FLAG,            mode=IN,  jdbcType=VARCHAR}
           , #{P_ITEM_ID,         mode=IN,  jdbcType=VARCHAR}
           , #{P_SCODE,           mode=IN,  jdbcType=VARCHAR}
           , #{P_CCODE,           mode=IN,  jdbcType=VARCHAR}
           , #{P_WORK_ORDER_ID,   mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,       mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 파레트 구성(sn, ct, pallet) -->
	<insert id="create_palletupsert_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_PALLET_UPSERT (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,        mode=OUT, jdbcType=VARCHAR}
           , #{p_palletid,        mode=OUT, jdbcType=VARCHAR}
           , #{p_itemid,          mode=OUT, jdbcType=VARCHAR}
           , #{p_palletqty,       mode=OUT, jdbcType=VARCHAR}
           , #{p_message,         mode=OUT, jdbcType=VARCHAR}
           , #{p_division_cd,     mode=IN,  jdbcType=VARCHAR}
           , #{p_company_cd,      mode=IN,  jdbcType=VARCHAR}
           , #{p_labeltype,       mode=IN,  jdbcType=VARCHAR}
           , #{p_sn,              mode=IN,  jdbcType=VARCHAR}
           , #{p_update_by,       mode=IN,  jdbcType=VARCHAR}
           , #{p_pre_palletid,    mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 파레트 초기화 -->
	<insert id="create_palletinit_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_PALLET_INIT (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,        mode=OUT, jdbcType=VARCHAR}
           , #{p_division_cd,     mode=IN,  jdbcType=VARCHAR}
           , #{p_company_cd,      mode=IN,  jdbcType=VARCHAR}
           , #{p_palletid,        mode=IN,  jdbcType=VARCHAR}
           , #{p_update_by,       mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 간반구성시 SN타입 알아오기 -->
	<insert id="create_ganbancheck_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_GANBANCHECK (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_sloc,            mode=OUT, jdbcType=VARCHAR}
           , #{p_ganbantype,      mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,     mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,      mode=IN,  jdbcType=VARCHAR}
           , #{P_SN,              mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 간반구성라벨 구성 -->
	<insert id="create_ganbaninsert_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_GANBAN_INSERT (
			  #{p_err_code,           mode=OUT, jdbcType=VARCHAR}
			, #{p_err_msg,            mode=OUT, jdbcType=VARCHAR}
			, #{p_runCount,           mode=OUT, jdbcType=VARCHAR}
			, #{p_ganbanid,           mode=OUT, jdbcType=VARCHAR}
			, #{P_DIVISION_CD,        mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,         mode=IN,  jdbcType=VARCHAR}
			, #{P_ITEM_ID,            mode=IN,  jdbcType=VARCHAR}
			, #{P_DEPARTURE_GROUP_ID, mode=IN,  jdbcType=VARCHAR}
			, #{P_WORK_ORDER_ID,      mode=IN,  jdbcType=VARCHAR}
			, #{P_PALLETID,           mode=IN,  jdbcType=VARCHAR}
			, #{P_CT,                 mode=IN,  jdbcType=VARCHAR}
			, #{P_GOOD_QTY,           mode=IN,  jdbcType=VARCHAR}
			, #{P_FROM_SLOC,          mode=IN,  jdbcType=VARCHAR}
			, #{P_SLOC,               mode=IN,  jdbcType=VARCHAR}
			, #{P_VENDOR_CD,          mode=IN,  jdbcType=VARCHAR}
			, #{P_DESCRIPTION,        mode=IN,  jdbcType=VARCHAR}
			, #{P_PA_GANBAN_ID,       mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,          mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 간반구성라벨 구성 -->
	<insert id="create_ganbaninsert_proc_new" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_GANBAN_INSERT_NEW (
			  #{p_err_code,           mode=OUT, jdbcType=VARCHAR}
			, #{p_err_msg,            mode=OUT, jdbcType=VARCHAR}
			, #{p_runCount,           mode=OUT, jdbcType=VARCHAR}
			, #{p_ganbanid,           mode=OUT, jdbcType=VARCHAR}
			, #{P_DIVISION_CD,        mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,         mode=IN,  jdbcType=VARCHAR}
			, #{P_ITEM_ID,            mode=IN,  jdbcType=VARCHAR}
			, #{P_DEPARTURE_GROUP_ID, mode=IN,  jdbcType=VARCHAR}
			, #{P_WORK_ORDER_ID,      mode=IN,  jdbcType=VARCHAR}
			, #{P_GANBANTYPE,         mode=IN,  jdbcType=VARCHAR}
			, #{P_GOOD_QTY,           mode=IN,  jdbcType=VARCHAR}
			, #{P_FROM_SLOC,          mode=IN,  jdbcType=VARCHAR}
			, #{P_SLOC,               mode=IN,  jdbcType=VARCHAR}
			, #{P_VENDOR_CD,          mode=IN,  jdbcType=VARCHAR}
			, #{P_DESCRIPTION,        mode=IN,  jdbcType=VARCHAR}
			, #{P_PA_GANBAN_ID,       mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,          mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 간반라벨 TMP 구성 -->
	<insert id="create_ganbantmpinsert_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_GANBAN_TMP_INSERT (
			  #{p_err_code,           mode=OUT, jdbcType=VARCHAR}
			, #{p_err_msg,            mode=OUT, jdbcType=VARCHAR}
			, #{p_runCount,           mode=OUT, jdbcType=VARCHAR}
			, #{p_ganbanid,           mode=OUT, jdbcType=VARCHAR}
			, #{P_LABEL_ID,           mode=IN,  jdbcType=VARCHAR}
			, #{P_IP_ADDRESS,         mode=IN,  jdbcType=VARCHAR}
			, #{P_DIVISION_CD,        mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,         mode=IN,  jdbcType=VARCHAR}
			, #{P_GANBAN_ID,          mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	
	<!-- 간반구성라벨 구성 -->
	<insert id="create_ganbansplit_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_GANBAN_SPLIT (
			  #{p_err_code,           mode=OUT, jdbcType=VARCHAR}
			, #{p_err_msg,            mode=OUT, jdbcType=VARCHAR}
			, #{p_runCount,           mode=OUT, jdbcType=VARCHAR}
			, #{p_ganbanid,           mode=OUT, jdbcType=VARCHAR}
			, #{P_DIVISION_CD,        mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,         mode=IN,  jdbcType=VARCHAR}
			, #{P_WORK_ORDER_ID,      mode=IN,  jdbcType=VARCHAR}
			, #{P_GANBANTYPE,         mode=IN,  jdbcType=VARCHAR}
			, #{P_GOOD_QTY,           mode=IN,  jdbcType=VARCHAR}
			, #{P_DESCRIPTION,        mode=IN,  jdbcType=VARCHAR}
			, #{P_PA_GANBAN_ID,       mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,          mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 자재입고 실행 -->
	<insert id="create_mat_gr_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_MATERIAL_GOOD_RECEIPT (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{p_division_cd,   mode=IN,   jdbcType=VARCHAR}
           , #{p_company_cd,    mode=IN,  jdbcType=VARCHAR}
           , #{p_move_id,       mode=IN,  jdbcType=VARCHAR}
           , #{p_modifier,      mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 자재입고 실행 -->
	<insert id="create_mat_gr_proc_new" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_MATERIAL_GOOD_RECEIPT_NEW (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{p_division_cd,   mode=IN,   jdbcType=VARCHAR}
           , #{p_company_cd,    mode=IN,  jdbcType=VARCHAR}
           , #{p_move_id,       mode=IN,  jdbcType=VARCHAR}
           , #{p_modifier,      mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 불출처리 실행 -->
	<insert id="create_mat_gi_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_MATERIAL_REQUEST_ISSUE (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{p_division_cd,   mode=IN,   jdbcType=VARCHAR}
           , #{p_company_cd,    mode=IN,  jdbcType=VARCHAR}
           , #{p_move_id,       mode=IN,  jdbcType=VARCHAR}
           , #{p_modifier,      mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>


	
	<!-- 간판라벨 소진처리 -->
	<insert id="create_ganban_use_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_GANBAN_USE_PROCESS (
             #{p_err_code,      mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_GANBAN_ID,     mode=IN,  jdbcType=VARCHAR}
           , #{P_USER_ID,       mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 자재투입 처리 -->
	<insert id="create_material_input_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_MAT_INPUT_PROCESS (
             #{p_err_code,      mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_WORKORDER_ID, mode=IN,  jdbcType=VARCHAR}
           , #{P_GANBAN_ID,     mode=IN,  jdbcType=VARCHAR}
           , #{P_USER_ID,       mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 간판라벨 소진취소 처리 -->
	<insert id="create_ganban_use_cancel_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_GANBAN_USE_CANCEL_PROCESS (
             #{p_err_code,      mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_GANBAN_ID,     mode=IN,  jdbcType=VARCHAR}
           , #{P_QTY,     		mode=IN,  jdbcType=VARCHAR}
           , #{P_USER_ID,       mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_move_bin_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_GANBAN_MOVE_BIN (
             #{p_err_code,      mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   mode=IN,   jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_LOCATION_CD,   mode=IN,  jdbcType=VARCHAR}
           , #{P_BIN_ID,        mode=IN,  jdbcType=VARCHAR}
           , #{P_GANBAN_ID,     mode=IN,  jdbcType=VARCHAR}
           , #{P_ITEM_ID,       mode=IN,  jdbcType=VARCHAR}
           , #{P_USER_ID,       mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	
	<insert id="create_woResult_cancel_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_POP_CREATE_WO_RESULT_CANCEL (
             #{p_err_code,      	mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       	mode=OUT, jdbcType=VARCHAR}
           , #{p_division_cd,   	mode=IN,  jdbcType=VARCHAR}
           , #{p_company_cd,    	mode=IN,  jdbcType=VARCHAR}
           , #{p_work_result_id,   	mode=IN,  jdbcType=VARCHAR}
           , #{p_work_order_id,     mode=IN,  jdbcType=VARCHAR}
           , #{p_ganban_id,     	mode=IN,  jdbcType=VARCHAR}
           , #{p_update_by,       	mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	
	<!-- Start : 2019.08.07 조아람 추가 -->
	
	<!-- 자재입고 조회 -->
	<select id="get_materialGR_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT C.VENDOR_NAME
		     , C.VENDOR_CD
		     , A.ITEM_ID
		     , B.ITEM_NAME
		     , B.SPECIFICATION
		     , A.QTY
		     , A.ITEM_STOCK_INOUT_ID
		     , CASE WHEN D.ITEM_STOCK_INOUT_ID IS NOT NULL THEN 'Y' ELSE 'N' END AS LABEL_YN
		     , 'N'		AS CHK_YN
		     , DECODE(B.POP_CT_QTY, 0, A.QTY, NULL, A.QTY, B.POP_CT_QTY) AS POP_CT_QTY
		     , A.ITEM_DEPARTURE_ID
		  FROM MOM_ITEM_STOCK_INOUT A
		     , MOM_ITEM_DEFINITION B
		     , MOM_VENDOR C
		     , (SELECT DIVISION_CD, COMPANY_CD, ITEM_STOCK_INOUT_ID, COUNT(GANBAN_ID)
		          FROM MOM_POP_GANBAN
		         GROUP BY DIVISION_CD, COMPANY_CD, ITEM_STOCK_INOUT_ID
		        )D
		 WHERE A.DIVISION_CD  = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID = B.ITEM_ID
		   AND A.DIVISION_CD   = C.DIVISION_CD(+)
		   AND A.COMPANY_CD    = C.COMPANY_CD(+)
		   AND A.VENDOR_CD     = C.VENDOR_CD(+)
		   AND A.DIVISION_CD   = D.DIVISION_CD(+)
		   AND A.COMPANY_CD    = D.COMPANY_CD(+)
		   AND A.ITEM_STOCK_INOUT_ID     = D.ITEM_STOCK_INOUT_ID(+)    
		   AND A.DIVISION_CD = #{P_DIVISION_CD,   	mode=IN,  jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{P_COMPANY_CD,   	mode=IN,  jdbcType=VARCHAR}
		   AND A.LOCATION_CD = #{P_LOCATION_CD,   	mode=IN,  jdbcType=VARCHAR}
		   AND   TRUNC(A.IO_TIME) = TO_DATE(#{P_NOWDATE,   	mode=IN,  jdbcType=VARCHAR}, 'YYYY-MM-DD') 
		   AND A.IO_TYPE = 'I'
		   AND A.WORK_ORDER_ID IS NULL 
		   AND A.ITEM_STOCK_TYPE IS NULL 
		   AND A.IO_TYPE = 'I'
		   AND A.IO_CATEGORY IN ( SELECT C.CODE_ID
		                          FROM   MOM_CODE C
		                          WHERE  C.DIVISION_CD = A.DIVISION_CD
		                          AND    C.COMPANY_CD  = A.COMPANY_CD
		                          AND    C.CODE_CLASS_ID = 'IO_CATEGORY'
		                          AND    C.USE_YN = 'Y'
		                          AND    C.ATTRIBUTE4 = 'Y' )
		 ORDER BY A.ITEM_STOCK_INOUT_ID
	</select>
	
	<!-- 간판 정보 -->
	<select id="get_GanbanBody_List" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		   A.ITEM_ID
		   , A.GANBAN_ID
		   , A.DEPARTURE_GROUP_ID
		   , A.WORK_ORDER_ID
		   , A.PALLETID
		   , A.CT
		   , A.FROM_SLOC
		   , A.SLOC
		   , TO_CHAR(A.MOVE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MOVE_DATE
		   , A.MOVE_BY
		   , A.GOOD_QTY
		   , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		   , A.CREATE_BY
		   , B.NAME
		   , A.USE_YN
		FROM MOM_POP_GANBAN A,
		     TU_USER B
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.CREATE_BY = B.USER_ID
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		<if test = "WORK_ORDER_ID != null and WORK_ORDER_ID != ''">
		AND   A.WORK_ORDER_ID    = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		</if>
		<if test = "PALLETID != null and PALLETID != ''">
		AND   A.PALLETID    = #{PALLETID, jdbcType=VARCHAR}
		</if>
		<if test = "CT != null and CT != ''">
		AND   A.CT    = #{CT, jdbcType=VARCHAR}
		</if>
		<if test = "GANBAN_ID != null and GANBAN_ID != ''">
		AND   #{GANBAN_ID, jdbcType=VARCHAR} IN (A.GANBAN_ID, A.PA_GANBAN_ID)
		</if>
		<if test = "DEPARTURE_GROUP_ID != null and DEPARTURE_GROUP_ID != ''">
		AND   A.DEPARTURE_GROUP_ID    = #{DEPARTURE_GROUP_ID, jdbcType=VARCHAR}
		</if>
		<if test = "dateFlag != null and dateFlag != ''">
		AND   A.CREATE_DATE  BETWEEN SYSDATE - 1 AND SYSDATE
		</if>
		<if test = "USE_YN != null and USE_YN != ''">
		AND   A.USE_YN    = #{USE_YN, jdbcType=VARCHAR}
		</if>
		ORDER BY A.GANBAN_ID DESC
	</select>
	
	
	
	<!-- label 발행 처리중 여부 -->
	<select id="getGanbanCheck" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    COUNT(1) 
		    AS LABELCNT 
		FROM TU_GANBAN_TMP A 
		WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.IP_ADDRESS  = #{IP_ADDRESS, jdbcType=VARCHAR}
		AND   A.PRINT_FLAG  = 'WAIT'
	</select>
	
	
	<!-- 재고이동/공정이동 KEY -->
	<select id="getGanbanseq" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    'M' || TO33NUMBER(TO_CHAR(SYSDATE, 'YY')) || TO33NUMBER(TO_CHAR(SYSDATE, 'MM')) || TO33NUMBER(TO_CHAR(SYSDATE, 'DD')) || LPAD(TO33NUMBER(S_MOVE_SEQ.NEXTVAL), 4, '0')
		    AS GANBANSEQ
		FROM DUAL
	</select>
	
	<select id="getGanbanPrintList" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT GANBAN_ID
			 , GANBAN_TYPE
		  FROM TU_GANBAN_TMP A
		 WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.LABEL_ID = #{LABEL_ID, jdbcType=VARCHAR}
	</select>
	
	
    
    
    
    
	
	<!-- 간판라벨 분할 Head 정보 -->
	<select id="get_ganbanSplitHead" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.ITEM_ID
		     , A.GANBAN_ID
		     , A.DEPARTURE_GROUP_ID
		     , A.WORK_ORDER_ID
		     , A.PALLETID
		     , A.CT
		     , A.FROM_SLOC
		     , A.SLOC
		     , TO_CHAR(A.MOVE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MOVE_DATE
		     , A.MOVE_BY
		     , A.GOOD_QTY
		     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		     , A.CREATE_BY
		     , B.NAME
		     , A.USE_YN
		  FROM MOM_POP_GANBAN A
		     , TU_USER B
		 WHERE A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD  = B.COMPANY_CD
		   AND A.CREATE_BY = B.USER_ID
		   AND A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND GANBAN_ID = #{GANBAN_ID, jdbcType=VARCHAR}
	</select>
	
	<!-- 간판라벨 분할 Body 정보 -->
	<select id="get_ganbanSplitBody" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.ITEM_ID
             , C.ITEM_NAME
		     , A.GANBAN_ID
		     , A.DEPARTURE_GROUP_ID
		     , A.WORK_ORDER_ID
		     , A.PALLETID
		     , A.CT
		     , A.FROM_SLOC
		     , A.SLOC
		     , TO_CHAR(A.MOVE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MOVE_DATE
		     , A.MOVE_BY
		     , A.GOOD_QTY
		     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		     , A.CREATE_BY
		     , B.NAME
		     , A.USE_YN
             , TO_CHAR(D.IO_TIME, 'YYYY-MM-DD') AS IO_TIME
		FROM MOM_POP_GANBAN A,
		     TU_USER B,
             MOM_ITEM_DEFINITION C,
             MOM_ITEM_STOCK_INOUT D
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.CREATE_BY = B.USER_ID
        AND   A.DIVISION_CD = C.DIVISION_CD
		AND   A.COMPANY_CD  = C.COMPANY_CD
        AND   A.ITEM_ID = C.ITEM_ID
        AND   A.DIVISION_CD = D.DIVISION_CD(+)
		AND   A.COMPANY_CD  = D.COMPANY_CD(+)
        AND   A.ITEM_STOCK_INOUT_ID = D.ITEM_STOCK_INOUT_ID(+)
		AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		<if test = "GANBAN_ID != null and GANBAN_ID != ''">
		AND   #{GANBAN_ID, jdbcType=VARCHAR} IN (A.GANBAN_ID, A.PA_GANBAN_ID)
		</if>
		AND   A.USE_YN    = 'Y'
		ORDER BY A.GANBAN_ID DESC
	</select>
	
	<!-- 간판라벨 수동발행 품목 조회 -->
	<select id="get_ganbanManualItem" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.ITEM_ID
		     , A.ITEM_NAME
		     , #{SLOC, jdbcType=VARCHAR} AS SLOC
		     , NVL(MAX(B.CREATE_DATE), SYSDATE) AS CREATE_DATE
		     , 0 AS QTY
		     , NVL(A.POP_CT_QTY,'0') AS POP_CT_QTY
		     , CASE WHEN S.CURRENT_QTY IS NULL THEN '0' ELSE TO_CHAR(S.CURRENT_QTY) END CURRENT_QTY
		  FROM MOM_ITEM_DEFINITION A
		  		LEFT OUTER JOIN MOM_ITEM_STOCK S
                  ON A.DIVISION_CD = S.DIVISION_CD
                 AND A.COMPANY_CD = S.COMPANY_CD
                 AND A.ITEM_ID = S.ITEM_ID
                 AND S.LOCATION_CD = #{SLOC, jdbcType=VARCHAR}
				LEFT OUTER JOIN MOM_POP_GANBAN B
				  ON A.DIVISION_CD = B.DIVISION_CD
				 AND A.COMPANY_CD  = B.COMPANY_CD
				 AND A.ITEM_ID     = B.ITEM_ID
				 AND B.SLOC        = #{SLOC, jdbcType=VARCHAR}
		 WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.ITEM_ID     = #{ITEM_ID, jdbcType=VARCHAR}
		 GROUP BY  A.ITEM_ID
		         , A.ITEM_NAME
		         , A.POP_CT_QTY
		         , S.CURRENT_QTY
	</select>
	
	<!-- 간반구성라벨 구성 -->
	<insert id="create_ganbaninsert_proc_new1" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_GANBAN_INSERT_NEW1 (
			  #{p_err_code,            mode=OUT, jdbcType=VARCHAR}
			, #{p_err_msg,             mode=OUT, jdbcType=VARCHAR}
			, #{p_runCount,            mode=OUT, jdbcType=VARCHAR}
			, #{p_ganbanid,            mode=OUT, jdbcType=VARCHAR}
			, #{P_LABEL_ID,            mode=IN,  jdbcType=VARCHAR}
			, #{P_IP_ADDRESS,          mode=IN,  jdbcType=VARCHAR}
			, #{P_DIVISION_CD,         mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,          mode=IN,  jdbcType=VARCHAR}
			, #{P_ITEM_ID,             mode=IN,  jdbcType=VARCHAR}
			, #{P_DEPARTURE_GROUP_ID,  mode=IN,  jdbcType=VARCHAR}
			, #{P_WORK_ORDER_ID,       mode=IN,  jdbcType=VARCHAR}
			, #{P_GOOD_QTY,            mode=IN,  jdbcType=VARCHAR}
			, #{P_FROM_SLOC,           mode=IN,  jdbcType=VARCHAR}
			, #{P_SLOC,                mode=IN,  jdbcType=VARCHAR}
			, #{P_VENDOR_CD,           mode=IN,  jdbcType=VARCHAR}
			, #{P_DESCRIPTION,         mode=IN,  jdbcType=VARCHAR}
			, #{P_PA_GANBAN_ID,        mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,           mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 간반라벨 분할 구성 -->
	<insert id="create_ganbansplit_proc_new" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_GANBAN_SPLIT_NEW (
			  #{p_err_code,            mode=OUT, jdbcType=VARCHAR}
			, #{p_err_msg,             mode=OUT, jdbcType=VARCHAR}
			, #{p_runCount,            mode=OUT, jdbcType=VARCHAR}
			, #{p_ganbanid,            mode=OUT, jdbcType=VARCHAR}
			, #{P_LABEL_ID,            mode=IN,  jdbcType=VARCHAR}
			, #{P_IP_ADDRESS,          mode=IN,  jdbcType=VARCHAR}
			, #{P_DIVISION_CD,         mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,          mode=IN,  jdbcType=VARCHAR}
			, #{P_GOOD_QTY,            mode=IN,  jdbcType=VARCHAR}
			, #{P_DESCRIPTION,         mode=IN,  jdbcType=VARCHAR}
			, #{P_PA_GANBAN_ID,        mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,           mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 간판 라벨 삭제 -->
	<insert id="deleteGanbanTmp" statementType="CALLABLE">
        CALL SP_MOM_POP.P_GANBAN_TMP_DELETE (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,      mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_LABEL_ID,      mode=IN,  jdbcType=VARCHAR}
        )
    </insert>	
	
	<!-- tmp 데이터 삭제 -->
	<insert id="del_TmpData_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_TMP_DELETE (
             #{p_err_code,      	mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       	mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   	mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    	mode=IN,  jdbcType=VARCHAR}
           , #{P_TMP_TYPE,   		mode=IN,  jdbcType=VARCHAR}
           , #{P_TMP_ID,     		mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 불출처리 실행 -->
	<insert id="create_material_gi_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_MATERIAL_REQUEST_ISSUE (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{p_division_cd,   mode=IN,   jdbcType=VARCHAR}
           , #{p_company_cd,    mode=IN,  jdbcType=VARCHAR}
           , #{p_move_id,       mode=IN,  jdbcType=VARCHAR}
           , #{p_modifier,      mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 이동처리 실행 -->
	<insert id="create_move_prod_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POP.P_ITEM_STOCK_MOVE (
           #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,       mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,   mode=IN,   jdbcType=VARCHAR}
           , #{P_COMPANY_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_STOCK_TYPE,    mode=IN,  jdbcType=VARCHAR}
           , #{P_MOVE_ID,       mode=IN,  jdbcType=VARCHAR}
           , #{P_MODIFIER,      mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	<!-- End : 2019.08.07 조아람 추가 -->
	
<!-- 폴란드 특화 기능 -->
	<!-- LCM 필수값 조회 -->
	<select id="get_lcm_chk" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT I.ITEM_ID
		     , NVL(I.INCH,'') AS INCH
		     , NVL(C.CORPORATE_CODE,'') AS HS_CD
          FROM MOM_ITEM_DEFINITION I
          LEFT OUTER JOIN MOM_WORK_ORDER A
            ON (I.DIVISION_CD = A.DIVISION_CD
           AND I.COMPANY_CD = A.COMPANY_CD
           AND I.ITEM_ID = A.ITEM_ID
           AND A.WORK_ORDER_ID = #{P_WORK_ORDER_ID, jdbcType=VARCHAR})
          LEFT OUTER JOIN MOM_SALES_ORDER B
            ON (A.DIVISION_CD = B.DIVISION_CD
           AND A.COMPANY_CD = B.COMPANY_CD
           AND A.PRODUCT_ORDER_ID = B.CUSTOMER_PO_ID
           AND A.ITEM_ID = B.ITEM_ID)
          LEFT OUTER JOIN MOM_VENDOR C                 
            ON (B.DIVISION_CD = C.DIVISION_CD
           AND B.COMPANY_CD = C.COMPANY_CD
           AND B.VENDOR_CD = C.VENDOR_CD
           AND C.USE_YN = 'Y')
         WHERE I.ITEM_ID = #{P_ITEM_ID, jdbcType=VARCHAR}
           AND I.USE_YN = 'Y'
    </select>
    
    <!-- LCM 필수값 조회 -->
	<select id="get_a4_chk" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT I.ITEM_ID
		     , I.LABELDESC
		     , I.MATERIAL_TYPE AS MATERIAL
		     , I.COLOR
             , H.HSE_ITEM_ID
		  FROM MOM_ITEM_DEFINITION I
          LEFT OUTER JOIN MOM_HSE_MODEL_MAPPING H
            ON I.DIVISION_CD = H.DIVISION_CD
            AND I.COMPANY_CD = H.COMPANY_CD
            AND I.ITEM_ID = H.ITEM_ID
		 WHERE I.ITEM_ID = #{P_ITEM_ID, jdbcType=VARCHAR}
    </select>
	
    <!-- SN MAKE 리스트 조회 -->
	<select id="get_ganbanlabel_list" resultType="camelMap" parameterType="java.util.HashMap">
		WITH VW_DATA AS
        (
			SELECT
                A.WORK_ORDER_ID
                , A.RESOURCE_CD
                , C.RESOURCE_NAME
                , A.ITEM_ID
                , B.ITEM_NAME
                , B.SPECIFICATION
                , TO_CHAR(A.CONFIRM_QTY , '999,999,999,999,999') AS CONFIRM_QTY
                , TO_CHAR(A.GOOD_QTY , '999,999,999,999,999')    AS GOOD_QTY
                , TO_CHAR(A.BAD_QTY , '999,999,999,999,999')     AS BAD_QTY
                , TO_CHAR(A.CANCEL_QTY , '999,999,999,999,999')  AS CANCEL_QTY
                , TO_CHAR(NVL (A.CONFIRM_QTY, 0) - NVL (A.GOOD_QTY, 0) - NVL (A.CANCEL_QTY, '0') , '999,999,999,999,999') AS REMAIN_QTY
                , FN_GET_POP_MAKESNCOUNT(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, 'GANBAN') AS GANBANALLCOUNT
                , FN_GET_POP_MAKESNCOUNT(A.DIVISION_CD, A.COMPANY_CD, A.WORK_ORDER_ID, 'SN') AS SNALLCOUNT
                , TO_CHAR(A.PLAN_START_TIME, 'YYYY-MM-DD') AS PLANSTARTTIME
                , TO_CHAR(A.PLAN_END_TIME, 'YYYY-MM-DD') AS PLANENDTIME
                , A.WO_STATE
                , A.WO_STATE || '(' || D.CODE_NAME || ')' AS WO_STATE_DESC 
                , TO_CHAR(A.START_TIME, 'YYYY-MM-DD HH24:MI:SS') AS STARTTIME
                , TO_CHAR(A.END_TIME, 'YYYY-MM-DD HH24:MI:SS')   AS ENDTIME
                , A.PRIORITY
                , A.PLAN_DATE
                , B.POP_GT_LABELID
                , NVL(E.ID_RULE, 'NONE') AS IDRULE
                , NVL(E.LABEL_ID, 'NONE') AS SNLABELID
                , NVL(F.LABEL_ID, 'NONE') AS GANBANLABELID
                , G.ATTRIBUTE1 AS ITEMTYPE
                , NVL(B.POP_CT_QTY, 0) AS POP_CT_QTY
                , B.POP_INPUT_TYPE
                , F.LABEL_TYPE		AS GANBAN_LBL_TYPE
                , H.LGE_ITEM_ID		AS LGE_ITEM_ID
            FROM MOM_WORK_ORDER A
                 , MOM_ITEM_DEFINITION B
                 , MOM_RESOURCE C
                 , MOM_CODE D
                 , MOM_POP_LABELLIST E
                 , MOM_POP_LABELLIST F
                 , MOM_CODE          G
                 , MOM_HSE_MODEL_MAPPING H
            WHERE A.DIVISION_CD = B.DIVISION_CD
            AND   A.COMPANY_CD  = B.COMPANY_CD
            AND   A.DIVISION_CD = C.DIVISION_CD
            AND   A.COMPANY_CD  = C.COMPANY_CD
            AND   A.DIVISION_CD = D.DIVISION_CD
            AND   A.COMPANY_CD  = D.COMPANY_CD
            AND   A.ITEM_ID     = B.ITEM_ID
            AND   A.RESOURCE_CD = C.RESOURCE_CD
            AND   A.WO_STATE    = D.CODE_ID
            AND   A.DIVISION_CD = G.DIVISION_CD
            AND   A.COMPANY_CD  = G.COMPANY_CD
            AND   B.POP_GT_LABELID = E.LABEL_ID(+)
            AND   B.POP_CT_LABELID = F.LABEL_ID(+)
            AND   B.ITEM_GROUP_LARGE = G.CODE_ID
            AND   B.DIVISION_CD = H.DIVISION_CD(+)
            AND   B.COMPANY_CD = H.COMPANY_CD(+)
            AND   B.ITEM_ID = H.ITEM_ID(+)
            AND   A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
            AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
            AND   D.CODE_CLASS_ID = 'WORK_ORDER_STATE' 
            AND   G.CODE_CLASS_ID = 'ITEM_GROUP_LARGE'
            AND   A.WO_STATE != 'C'
			<if test="WORK_ORDER_ID != null and WORK_ORDER_ID != ''">
	        	AND A.WORK_ORDER_ID LIKE #{WORK_ORDER_ID, jdbcType=VARCHAR} || '%'
	        </if>
			<if test="RESOURCE_CD != null and RESOURCE_CD != ''">
	        	AND A.RESOURCE_CD = #{RESOURCE_CD, jdbcType=VARCHAR}
	        </if>
	        <if test="ITEM_ID != null and ITEM_ID != ''">
	        	AND A.ITEM_ID LIKE #{ITEM_ID, jdbcType=VARCHAR} || '%'
	        </if>
	        <choose>
	        	<when test="WO_STATE != null and WO_STATE != ''">
	        		AND A.WO_STATE = #{WO_STATE, jdbcType=VARCHAR}
	        	</when>
	        	<otherwise>
	        		AND A.WO_STATE NOT IN  ('T', 'C')
	        	</otherwise>
	        </choose>
			<![CDATA[AND   A.PLAN_START_TIME BETWEEN TO_DATE(#{STARTDATE, jdbcType=VARCHAR}, 'YYYY-MM-DD') AND TO_DATE(#{ENDDATE, jdbcType=VARCHAR}, 'YYYY-MM-DD')]]>
		)
		SELECT 
			A.* 
		FROM VW_DATA A
		WHERE 1=1
		<if test="PRINT_FLAG != 'ALL'">
        	<choose>
	        <when test='PRINT_FLAG.equals("PRINT")'>
	        	AND ( A.GANBANALLCOUNT > 0 OR A.SNALLCOUNT > 0 )
    	    </when>
    	    <when test='PRINT_FLAG.equals("UNPRINT")'>
    	    	AND A.GANBANALLCOUNT = 0 AND A.SNALLCOUNT = 0
    	    </when>
    	    </choose>
        </if>
   	    ORDER BY A.PLAN_DATE, A.PRIORITY
	</select>
	
	<!-- W/O별 SN MAKE 항목 조회 -->
	<select id="get_makesn_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.LABELTYPE
		    , A.SEQ
		    , A.QTY
		    , A.WORK_ORDER_RESULT_ID AS SN
            , A.ADD_ID1              AS SN2
            , A.ADD_ID1_CD			 AS SN2_LBLID
		    , CASE WHEN A.RST_GANBAN_ID = 'NODATA' THEN ''
		    	   ELSE A.RST_GANBAN_ID
		       END 		 			 AS PRODSN
		    , A.GANBAN_ID
            , A.ADD_GANBAN1          AS GANBAN_ID2
            , A.ADD_GANBAN1_CD       AS GANBAN_ID2_LBLID
		    , A.GANBAN_ID
		    , A.ID_MOLDNO
		    , A.PROJECT
		    , A.TYPE
		    , A.SHIFT
		    , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDATE
		    , CREATE_BY AS CREATEBY
		 FROM MOM_POP_LABEL_SNMAKE A
		WHERE   A.DIVISION_CD          = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD           = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.WORK_ORDER_ID        = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		AND   A.LABELTYPE            = #{LABELTYPE, jdbcType=VARCHAR}
		AND   A.USE_YN = 'Y'
		ORDER BY A.SEQ
	</select>
	
	<!-- 실적완성화면에서 sn입력시 wo 정보 load -->
	<select id="get_getstarttime_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
			A.SHIFT_CD
		    , TO_CHAR(A.APPLY_DATE, 'YYYY-MM-DD') AS APPLYDATE
		    , TO_CHAR(TO_DATE(TO_CHAR(APPLY_DATE, 'YYYYMMDD') || A.START_TIME, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD HH24:MI:SS') AS STARTTIME
		    , TO_CHAR(CASE WHEN A.START_TIME > A.END_TIME THEN
		        TO_DATE(TO_CHAR(APPLY_DATE + 1, 'YYYYMMDD') || A.END_TIME, 'YYYYMMDDHH24MISS')
		      ELSE
		        TO_DATE(TO_CHAR(APPLY_DATE, 'YYYYMMDD') || A.END_TIME, 'YYYYMMDDHH24MISS')
		      END, 'YYYY-MM-DD HH24:MI:SS') AS ENDTIME
		    , TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') AS NOWDATE
		FROM MOM_SHIFT_SCHEDULE A
		WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		AND   A.RESOURCE_CD = #{RESOURCE_CD, jdbcType=VARCHAR}
		AND   SYSDATE BETWEEN TO_DATE(TO_CHAR(APPLY_DATE, 'YYYYMMDD') || A.START_TIME, 'YYYYMMDDHH24MISS')
		                  AND TO_DATE(TO_CHAR(APPLY_DATE + 1, 'YYYYMMDD') || A.START_TIME, 'YYYYMMDDHH24MISS') - 1/86400
	</select>

	<!-- 실적완성화면에서 오늘 기준 가장 최근 실적 END TIME 정보 load -->
	<select id="get_getresultendtime_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
            NVL(TO_CHAR(MAX(A.WORK_DAY), 'YYYY-MM-DD'), 'NODATA') AS WORKDAY
            , NVL(TO_CHAR(MAX(A.MAKE_END_TIME), 'YYYY-MM-DD HH24:MI:SS'), 'NODATA') AS STARTTIME
        FROM (
            SELECT
                A.WORK_DAY
                , A.END_TIME AS MAKE_END_TIME
            FROM MOM_WORK_ORDER_RESULT A
            WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
            AND   A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
            AND   A.RESOURCE_CD = #{RESOURCE_CD, jdbcType=VARCHAR}
             <![CDATA[AND   A.WORK_DAY = TO_DATE(#{WORK_DAY, jdbcType=VARCHAR}, 'YYYY-MM-DD HH24MISS')]]>
            ) A
	</select>

	<select id="get_ganban_chk" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.GANBAN_ID
		     , A.USE_YN
		     , A.INS_USE_YN
		     , A.WORK_ORDER_ID
		     , B.RESOURCE_CD
		     , NVL(C.GOOD_QTY,0) AS GOOD_QTY
		  FROM MOM_POP_LABEL_SNMAKE A
		  LEFT OUTER JOIN MOM_WORK_ORDER B
		    ON A.DIVISION_CD   = B.DIVISION_CD
		   AND A.COMPANY_CD    = B.COMPANY_CD
		   AND A.WORK_ORDER_ID = B.WORK_ORDER_ID
		  LEFT OUTER JOIN MOM_WORK_ORDER_RESULT C
		    ON A.DIVISION_CD   = C.DIVISION_CD
		   AND A.COMPANY_CD    = C.COMPANY_CD
		   AND A.GANBAN_ID     = C.WORK_ORDER_RESULT_ID
		 WHERE A.DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.GANBAN_ID     = #{SN, jdbcType=VARCHAR}
		   AND A.USE_YN = 'Y'		   
	</select>
	
	<!-- 오늘일자(SYSDATE) 기준 ==> 기준일자, 시작시간, 종료시간 정보 load -->
	<select id="get_sntowo_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT NVL(MAX(A.WORK_ORDER_ID), 'NODATA')      AS WORKORDERID
		     , B.RESOURCE_CD
		     , D.RESOURCE_NAME
		     , E.EQUIPMENT_CD
		     , E.EQUIPMENT_NAME
		     , NVL(MAX(A.LABELTYPE), 'NODATA')          AS LABELTYPE
		     , NVL(MAX(A.ITEM_ID), 'NODATA')            AS ITEMID
		     , NVL(MAX(B.WO_STATE), 'NODATA')           AS WO_STATE
		     , NVL(MAX(A.QTY), 0)                       AS ORI_QTY
		     , NVL(A.WORK_ORDER_RESULT_ID, A.GANBAN_ID) AS SN
		     , NVL(C.GOOD_QTY, 0)                       AS POP_GANBAN_QTY
		     , (SELECT NVL(SUM(QTY), 0)
		          FROM MOM_POP_LABEL_SNMAKE
		         WHERE DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		           AND COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		           AND WORK_ORDER_ID = A.WORK_ORDER_ID
		           AND USE_YN = 'Y'
		           AND INS_USE_YN = 'Y'
		           AND LABELTYPE = 'SN'
		           AND RST_GANBAN_ID = 'NODATA') AS NONCTQTY
		     , (SELECT NVL(SUM(GOOD_QTY), 0)
		          FROM MOM_WORK_ORDER_RESULT
		         WHERE DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		           AND COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		           AND WORK_ORDER_ID = A.WORK_ORDER_ID
		           AND CT            = #{SN, jdbcType=VARCHAR}) AS GANBAN_GOOD_QTY
		     , (SELECT NVL(SUM(QTY), 0)
		          FROM MOM_POP_LABEL_SNMAKE
		         WHERE DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		           AND COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		           AND WORK_ORDER_ID = A.WORK_ORDER_ID
		           AND LABELTYPE     = 'SN'
		           AND USE_YN        = 'Y'
		           AND INS_USE_YN    = 'Y' )             AS SCAN_QTY
		     , (SELECT COUNT(1)
				  FROM MOM_NON_WORK_DATA
				 WHERE DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		           AND COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		           AND RESOURCE_CD   = B.RESOURCE_CD
		           AND EQUIPMENT_CD = B.EQUIPMENT_CD
				   AND STATUS        = 'S')              AS NON_WORK_CNT
		     , (SELECT COUNT(1)
		          FROM MOM_EQUIPMENT
		         WHERE DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		           AND COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
		           AND RESOURCE_CD   = B.RESOURCE_CD)    AS EQUIPMENT_NUM
		  FROM MOM_POP_LABEL_SNMAKE A
		  LEFT OUTER JOIN MOM_WORK_ORDER B
		    ON A.DIVISION_CD   = B.DIVISION_CD
		   AND A.COMPANY_CD    = B.COMPANY_CD
		   AND A.WORK_ORDER_ID = B.WORK_ORDER_ID
		   <if test="RESOURCE_CD != null and RESOURCE_CD != ''">
		    AND B.RESOURCE_CD   = #{RESOURCE_CD,  jdbcType=VARCHAR}
		   </if>
		   <if test="EQUIPMENT_CD != null and EQUIPMENT_CD != ''">
        	AND B.EQUIPMENT_CD = #{EQUIPMENT_CD, jdbcType=VARCHAR}
           </if>
		  LEFT OUTER JOIN MOM_POP_GANBAN C
		    ON A.DIVISION_CD   = C.DIVISION_CD
		   AND A.COMPANY_CD    = C.COMPANY_CD
		   AND A.GANBAN_ID     = C.GANBAN_ID
		  LEFT OUTER JOIN MOM_RESOURCE D
		    ON B.DIVISION_CD   = D.DIVISION_CD
		   AND B.COMPANY_CD    = D.COMPANY_CD
		   AND B.RESOURCE_CD   = D.RESOURCE_CD
		  LEFT OUTER JOIN MOM_EQUIPMENT E
		    ON B.DIVISION_CD   = E.DIVISION_CD
		   AND B.COMPANY_CD    = E.COMPANY_CD
		   AND B.RESOURCE_CD   = E.RESOURCE_CD
		   AND B.EQUIPMENT_CD  = E.EQUIPMENT_CD
		 WHERE A.DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD    = #{COMPANY_CD,  jdbcType=VARCHAR}
		   AND A.WORK_ORDER_RESULT_ID = #{SN, jdbcType=VARCHAR}
		   AND A.USE_YN = 'Y'
		 GROUP BY A.WORK_ORDER_ID, A.LABELTYPE, A.ITEM_ID, B.WO_STATE, A.QTY, A.WORK_ORDER_RESULT_ID, A.GANBAN_ID, C.GOOD_QTY, B.RESOURCE_CD ,B.EQUIPMENT_CD ,D.RESOURCE_NAME ,E.EQUIPMENT_CD ,E.EQUIPMENT_NAME
	</select>
	
	<!-- 폴란드 SN 리스트 -->
	<select id="get_polandpopgt_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.WORK_ORDER_RESULT_ID
		     , A.RST_GANBAN_ID AS CT
		     , A.QTY AS GOOD_QTY
		     , 0 AS BAD_QTY
		  FROM MOM_POP_LABEL_SNMAKE A
		 WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
		   AND A.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
		   AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		   AND A.LABELTYPE = 'SN'
		   AND A.USE_YN = 'Y'
		   AND A.INS_USE_YN = 'Y'
		<if test="CT != null and CT != ''">
           AND A.RST_GANBAN_ID = #{CT, jdbcType=VARCHAR}
        </if>
         ORDER BY SCAN_TIME DESC
	</select>

	<!-- 폴란드 GANBAN 리스트 -->
	<select id="get_polandpopganban_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.GANBAN_ID
		     , A.GOOD_QTY
		  FROM MOM_POP_GANBAN A
		 WHERE A.DIVISION_CD   = #{DIVISION_CD,   jdbcType=VARCHAR}
		   AND A.COMPANY_CD    = #{COMPANY_CD,    jdbcType=VARCHAR}
		   AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		   AND A.USE_YN = 'Y'
		 ORDER BY CREATE_DATE DESC
	</select>

	<!-- 비가동 목록 리스트 -->
	<select id="get_nonwork_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    A.NON_CLASS_ID
		    , A.NON_WORK_CD
		    , A.NON_TYPE
		    , A.NON_TYPE_NAME
		FROM MOM_NON_WORK A
		WHERE A.DIVISION_CD  = #{DIVISION_CD,   jdbcType=VARCHAR}
		AND   A.COMPANY_CD   = #{COMPANY_CD,    jdbcType=VARCHAR}
		AND   A.NON_CLASS_ID = #{NON_CLASS_ID,  jdbcType=VARCHAR}
		ORDER BY A.NON_TYPE_NAME
	</select>

	<!-- 현재 라인의 비가동 목록 리스트 -->
	<select id="get_nonwork" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
			TO_CHAR(A.WORK_DATE, 'YYYY-MM-DD') AS WORKDATE
    		, A.NON_CLASS_ID
		    , A.NON_WORK_CD
		    , A.NON_TYPE
		    , '[' || A.NON_TYPE || ']' || B.NON_TYPE_NAME AS NON_TYPE_NAME
		    , (SYSDATE - TO_DATE(A.START_TIME, 'YYYY-MM-DD HH24:MI:SS')) * (1440 * 60) AS LOSSTIME
		FROM MOM_NON_WORK_DATA A
		     , MOM_NON_WORK B
		WHERE A.DIVISION_CD = B.DIVISION_CD
		AND   A.COMPANY_CD  = B.COMPANY_CD
		AND   A.NON_CLASS_ID = B.NON_CLASS_ID
		AND   A.NON_WORK_CD  = B.NON_WORK_CD
		AND   A.NON_TYPE     = B.NON_TYPE
		AND   A.DIVISION_CD = #{DIVISION_CD,   jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD,    jdbcType=VARCHAR}
		AND   A.RESOURCE_CD = #{RESOURCE_CD,   jdbcType=VARCHAR}
		<if test="EQUIPMENT_CD != null and EQUIPMENT_CD != ''">
       	 AND EQUIPMENT_CD = #{EQUIPMENT_CD, jdbcType=VARCHAR}
        </if>
		AND   A.STATUS = 'S'
	</select>

	<!-- 불량, 비가동 코드 SELECT -->
	<select id="get_nonworkcode" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT 
		    'BADCODE'     AS CODETYPE
		    , ''          AS NON_CLASS_ID
		    , ''          AS NON_WORK_CD
		    , ''          AS NON_TYPE
		    , ''          AS NON_TYPE_NAME
		    , A.CODE_ID   AS CODEID
		    , A.CODE_NAME AS CODENAME
		FROM MOM_CODE A
		WHERE 1=1
		AND   A.DIVISION_CD = #{DIVISION_CD,   jdbcType=VARCHAR}
		AND   A.COMPANY_CD  = #{COMPANY_CD,    jdbcType=VARCHAR}
		AND   A.CODE_CLASS_ID = 'WO_BAD_TYPE'
		UNION ALL
		SELECT 
		    'NONWORK'         AS CODETYPE
		    , A.NON_CLASS_ID
		    , A.NON_WORK_CD
		    , A.NON_TYPE
		    , A.NON_TYPE_NAME
		    , A.NON_TYPE      AS CODEID
		    , A.NON_TYPE_NAME AS CODENAME
		FROM MOM_NON_WORK A
		WHERE 1=1
		AND   A.DIVISION_CD  = #{DIVISION_CD,   jdbcType=VARCHAR}
		AND   A.COMPANY_CD   = #{COMPANY_CD,    jdbcType=VARCHAR}
		AND   A.NON_CLASS_ID = 'C'
	</select>

	<!-- 폴란드 작업지시서 항목 조회 -->
	<select id="get_polandpopwo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT
            A.RESOURCE_CD
            , A.WORK_ORDER_ID
            , A.PRODUCT_ORDER_ID
            , TO_CHAR(A.PLAN_START_TIME, 'YYYY-MM-DD HH24:MI:SS')                                 AS PLANDATE
            , TO_CHAR(A.START_TIME, 'YY-MM-DD HH24:MI')                                           AS START_TIME
            , TO_CHAR(A.END_TIME, 'YY-MM-DD HH24:MI')                                             AS END_TIME
            , A.ITEM_ID
            , B.ITEM_NAME
            , A.CONFIRM_QTY
            , NVL (A.CONFIRM_QTY, 0) - NVL (A.GOOD_QTY, 0) - NVL (A.CANCEL_QTY, '0')              AS REMAIN_QTY 
            , (NVL (A.GOOD_QTY, 0) - (SELECT NVL(SUM(GOOD_QTY), 0)
                                        FROM MOM_WORK_ORDER_RESULT
                                       WHERE DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
                                         AND COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
                                         AND WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
                                         AND CT            = 'NODATA'
                                         AND BADCODE 	   = 'NODATA')                          ) AS QTY
            , NVL (A.BAD_QTY, '0')                                                                AS BAD_QTY
            , NVL (A.CANCEL_QTY, '0')                                                             AS CANCEL_QTY
            , (SELECT NVL(SUM(QTY), 0)
                 FROM MOM_POP_LABEL_SNMAKE
                WHERE DIVISION_CD   = #{DIVISION_CD, jdbcType=VARCHAR}
                  AND COMPANY_CD    = #{COMPANY_CD, jdbcType=VARCHAR}
                  AND WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
                  AND LABELTYPE     = 'SN'
                  AND USE_YN        = 'Y'
                  AND INS_USE_YN    = 'Y')                                                        AS SCAN_QTY
            , A.PRODUCT_ORDER_TYPE AS WO_TYPE
            , A.WO_STATE
            , B.POP_MAKE_LOT_QTY
            , B.POP_INPUT_TYPE
            , B.POP_CT_QTY
            , TO_CHAR(SYSDATE, 'YYYY.MM.DD') 												 	 AS PRINTDATE
            , TO_CHAR(SYSDATE, 'HH24MISS') 														 AS PRINTTIME
            , B.POP_GT_LABELID
            , NVL((SELECT LABEL_TYPE
                     FROM MOM_POP_LABELLIST
                    WHERE LABEL_ID = B.POP_GT_LABELID), 'NONE')                                   AS POP_GT_LABELTYPE
            , B.POP_CT_LABELID     
            , NVL((SELECT LABEL_TYPE
                     FROM MOM_POP_LABELLIST
                    WHERE LABEL_ID = B.POP_CT_LABELID), 'NONE')                                   AS POP_CT_LABELTYPE
            , B.POP_PALLET_LABELID
            , NVL((SELECT LABEL_TYPE
                     FROM MOM_POP_LABELLIST
                    WHERE LABEL_ID = B.POP_PALLET_LABELID), 'NONE')                               AS POP_PALLET_LABELTYPE
            , B.POP_GANBAN_LABELID  
            , NVL((SELECT LABEL_TYPE
                     FROM MOM_POP_LABELLIST
                    WHERE LABEL_ID = B.POP_GANBAN_LABELID), 'NONE')                               AS POP_GANBAN_LABELTYPE
            , B.POP_EAN                                                                           AS EAN
            , B.POP_UPC                                                                           AS UPC
            , B.POP_DESTINATION                                                                   AS DESTINATION
            , B.POP_MADEBY                                                                        AS MADEBY
            , ''                                                                                  AS SN
            , ''                                                                                  AS CT
            , ''                                                                                  AS PALLETID
            , TO_CHAR(A.PLAN_DATE, 'YYYY-MM-DD')                                                  AS PLAN_DATE 
            , NVL(E.TODAYPLAN, 0)                                                                 AS TODAYPLAN
            , NVL(E.TODAYGOODQTY, 0)                                                              AS TODAYGOODQTY
            , NVL(E.TODAYBADQTY, 0)                                                               AS TODAYBADQTY
            , B.SPECIFICATION
            , B.LABELDESC
            , B.LABELSPEC
            , ''                                                                                  AS SHORTSN
            , ''                                                                                  AS LONGSN
            , (SELECT COUNT(1)
                 FROM MOM_WORK_ORDER
                WHERE DIVISION_CD    = #{DIVISION_CD, jdbcType=VARCHAR}
                  AND COMPANY_CD     = #{COMPANY_CD, jdbcType=VARCHAR}
                  AND RESOURCE_CD    = #{RESOURCE_CD, jdbcType=VARCHAR}
                  <if test="EQUIPMENT_CD != null and EQUIPMENT_CD != ''">
		        	AND EQUIPMENT_CD = #{EQUIPMENT_CD, jdbcType=VARCHAR}
		          </if>
                  AND WO_STATE       = 'R'
                  AND WORK_ORDER_ID  != #{WORK_ORDER_ID, jdbcType=VARCHAR} )                      AS RUNCNT
        FROM MOM_WORK_ORDER A,
             MOM_ITEM_DEFINITION B,
              (SELECT 
                    AA.DIVISION_CD
                    , AA.COMPANY_CD
                    , SUM(AA.PLAN_QTY) AS TODAYPLAN
                    , SUM(AA.GOOD_QTY) AS TODAYGOODQTY
                    , SUM(AA.BAD_QTY)  AS TODAYBADQTY
                FROM MOM_WORK_ORDER AA 
                WHERE AA.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
                AND   AA.COMPANY_CD  = #{COMPANY_CD, jdbcType=VARCHAR}
                AND   AA.PLAN_DATE   = TO_DATE(#{PLAN_DATE,  jdbcType=VARCHAR}, 'YYYY-MM-DD')  
                AND   AA.RESOURCE_CD = #{RESOURCE_CD, jdbcType=VARCHAR}
                GROUP BY AA.DIVISION_CD, AA.COMPANY_CD
              ) E
        WHERE 1=1
        AND   A.DIVISION_CD        = B.DIVISION_CD
        AND   A.COMPANY_CD         = B.COMPANY_CD
        AND   A.DIVISION_CD        = E.DIVISION_CD(+)
        AND   A.COMPANY_CD         = E.COMPANY_CD(+)
        AND   A.ITEM_ID = B.ITEM_ID 
        AND   B.DIVISION_CD        = #{DIVISION_CD,   jdbcType=VARCHAR}
        AND   B.COMPANY_CD         = #{COMPANY_CD,    jdbcType=VARCHAR}
        AND   A.RESOURCE_CD        = #{RESOURCE_CD,   jdbcType=VARCHAR}
        AND   A.WORK_ORDER_ID      = #{WORK_ORDER_ID, jdbcType=VARCHAR}
        <if test="EQUIPMENT_CD != null and EQUIPMENT_CD != ''">
        	AND A.EQUIPMENT_CD = #{EQUIPMENT_CD, jdbcType=VARCHAR}
        </if>
	</select>
	
	<select id="get_CtQty" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT NVL(SUM(GOOD_QTY), 0) AS QTY
		  FROM MOM_WORK_ORDER_RESULT
		 WHERE DIVISION_CD  = #{DIVISION_CD,   jdbcType=VARCHAR}
           AND COMPANY_CD   = #{COMPANY_CD,    jdbcType=VARCHAR}
           AND CT           = #{P_SN,    jdbcType=VARCHAR}
	</select>
	
	<!-- 라벨선발행 : 간판라벨 데이터 조회 -->
	<select id="get_ganbanLabel_data2" resultType="camelMap" parameterType="java.util.HashMap">
		WITH TMP
			AS (
			    SELECT *
			    FROM (
			        SELECT A.ITEM_ID              AS ITEMID
			             , B.ITEM_NAME            AS ITEMNAME
			             , B.LABELDESC            AS MODEL
			             , C.HSE_ITEM_ID          AS HSEITEMID
			             , A.ID_MOLDNO            AS PRESS
			             , A.WORK_ORDER_RESULT_ID AS GANBANID
			             , A.QTY                  AS QTY
			             , A.WORK_ORDER_RESULT_ID ||'/'||CASE WHEN A.QTY = 0 THEN ' ' ELSE TO_CHAR(A.QTY) END AS POP_CT_QTY
			             , FLOOR((ROWNUM-1)/4)   AS SEQ
			             , CASE WHEN MOD(ROWNUM, 4) = 0 THEN '4' ELSE TO_CHAR(MOD(ROWNUM, 4)) END             AS NUM
			          FROM MOM_POP_LABEL_SNMAKE A
			         INNER JOIN MOM_ITEM_DEFINITION B
			            ON A.DIVISION_CD   = B.DIVISION_CD
			           AND A.COMPANY_CD    = B.COMPANY_CD
			           AND A.ITEM_ID       = B.ITEM_ID
			          LEFT OUTER JOIN MOM_HSE_MODEL_MAPPING C
					    ON A.DIVISION_CD   = C.DIVISION_CD
			           AND A.COMPANY_CD    = C.COMPANY_CD
			           AND A.ITEM_ID       = C.ITEM_ID
					 WHERE A.DIVISION_CD   = #{DIVISION_CD,   jdbcType=VARCHAR}
	                   AND A.COMPANY_CD    = #{COMPANY_CD,    jdbcType=VARCHAR}
	                   AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
			           AND A.USE_YN        = 'Y'
			           AND A.LABELTYPE     = 'GANBAN'
		           <if test="REPRINT_YN != null and REPRINT_YN != ''">
				       AND A.REPRINT_YN    = #{REPRINT_YN, jdbcType=VARCHAR}
			       </if>
					 ) A PIVOT(MAX(A.GANBANID) AS GANBANID, MAX(A.POP_CT_QTY) AS POP_CT_QTY FOR NUM IN ('1' AS A ,'2' AS B ,'3' AS C ,'4' AS D)) )
			SELECT #{DIR, jdbcType=VARCHAR}||#{LABEL_ID, jdbcType=VARCHAR}||'.repx' AS REPORT_FILE
				,CASE WHEN A_GANBANID IS NULL THEN NULL ELSE ITEMID END    AS AITEMID
				,CASE WHEN B_GANBANID IS NULL THEN NULL ELSE ITEMID END    AS BITEMID
				,CASE WHEN C_GANBANID IS NULL THEN NULL ELSE ITEMID END    AS CITEMID
				,CASE WHEN D_GANBANID IS NULL THEN NULL ELSE ITEMID END    AS DITEMID
				,CASE WHEN A_GANBANID IS NULL THEN NULL ELSE ITEMNAME END  AS AITEMNAME
				,CASE WHEN B_GANBANID IS NULL THEN NULL ELSE ITEMNAME END  AS BITEMNAME
				,CASE WHEN C_GANBANID IS NULL THEN NULL ELSE ITEMNAME END  AS CITEMNAME
				,CASE WHEN D_GANBANID IS NULL THEN NULL ELSE ITEMNAME END  AS DITEMNAME
				,CASE WHEN A_GANBANID IS NULL THEN NULL ELSE MODEL END     AS AMODEL
				,CASE WHEN B_GANBANID IS NULL THEN NULL ELSE MODEL END     AS BMODEL
				,CASE WHEN C_GANBANID IS NULL THEN NULL ELSE MODEL END     AS CMODEL
				,CASE WHEN D_GANBANID IS NULL THEN NULL ELSE MODEL END     AS DMODEL
				,CASE WHEN A_GANBANID IS NULL THEN NULL ELSE HSEITEMID END AS AHSEITEMID
				,CASE WHEN B_GANBANID IS NULL THEN NULL ELSE HSEITEMID END AS BHSEITEMID
				,CASE WHEN C_GANBANID IS NULL THEN NULL ELSE HSEITEMID END AS CHSEITEMID
				,CASE WHEN D_GANBANID IS NULL THEN NULL ELSE HSEITEMID END AS DHSEITEMID
				,CASE WHEN A_GANBANID IS NULL THEN NULL ELSE PRESS END     AS APRESS
				,CASE WHEN B_GANBANID IS NULL THEN NULL ELSE PRESS END     AS BPRESS
				,CASE WHEN C_GANBANID IS NULL THEN NULL ELSE PRESS END     AS CPRESS
				,CASE WHEN D_GANBANID IS NULL THEN NULL ELSE PRESS END     AS DPRESS
				,TO_CHAR(SYSDATE, 'DD-MM-YYYY') AS PRODDATE
				,TO_CHAR(SYSDATE, 'DD-MM-YYYY HH24:MI:SS') AS PRODTIME
				,TO_CHAR(SYSDATE, 'WW') AS WEEK
				,A_GANBANID
				,SUBSTR(A_POP_CT_QTY, LENGTH(A_GANBANID) + 2, LENGTH(A_POP_CT_QTY)) AS APOPCTQTY
				,B_GANBANID
				,SUBSTR(B_POP_CT_QTY, LENGTH(B_GANBANID) + 2, LENGTH(B_POP_CT_QTY)) AS BPOPCTQTY
				,C_GANBANID
				,SUBSTR(C_POP_CT_QTY, LENGTH(C_GANBANID) + 2, LENGTH(C_POP_CT_QTY)) AS CPOPCTQTY
				,D_GANBANID
				,SUBSTR(D_POP_CT_QTY, LENGTH(D_GANBANID) + 2, LENGTH(D_POP_CT_QTY)) AS DPOPCTQTY
			FROM TMP
	</select>
	
	<!-- 라벨선발행 : 간판라벨 데이터 조회 -->
	<select id="get_ganbanLabel_data" resultType="camelMap" parameterType="java.util.HashMap">
		WITH TMP AS (
		    SELECT *        
				  FROM (SELECT A.ITEM_ID
                             , CASE WHEN #{LABEL_ID, jdbcType=VARCHAR} = 'DG-A01' THEN SUBSTR(A.ITEM_ID, 0, LENGTH(A.ITEM_ID)-3)
                                    WHEN #{LABEL_ID, jdbcType=VARCHAR} = 'DG-A02' THEN SUBSTR(A.ITEM_ID, 0, LENGTH(A.ITEM_ID)-5)
                                    ELSE A.ITEM_ID
                                END                  AS PRE_ITEM_ID
                             , CASE WHEN #{LABEL_ID, jdbcType=VARCHAR} = 'DG-A01' THEN SUBSTR(A.ITEM_ID, -3, 3)
                                    WHEN #{LABEL_ID, jdbcType=VARCHAR} = 'DG-A02' THEN SUBSTR(A.ITEM_ID, -5, 5)
                                    ELSE A.ITEM_ID
                                END                  AS POST_ITEM_ID
				             , B.LABELDESC       	 AS MODEL
				             , A.PROJECT	         AS PROJECT
				             , A.SHIFT		         AS SHIFT
				             , A.TYPE		         AS TYPE
                             , B.MATERIAL_TYPE       AS MATERIAL
                             , B.COLOR
                             , A.ID_MOLDNO AS PRESS_ITEM_ID
                             , B.ATTACH_NAME1       
                             , B.ATTACH_NAME2
                             , (SELECT B2BI_VENDOR_CD FROM MOM_PARAMETER) AS B2BI_VENDOR_CD
				             , A.WORK_ORDER_RESULT_ID 	                  AS GANBAN_ID                     
				             , A.WORK_ORDER_RESULT_ID ||'/'||CASE WHEN A.QTY = 0 THEN ' ' ELSE TO_CHAR(A.QTY) END	    AS POP_CT_QTY
                             , FLOOR((ROWNUM-1)/3)   AS SEQ
				             , CASE WHEN MOD(ROWNUM,3) = 0 THEN '3' ELSE TO_CHAR(MOD(ROWNUM,3)) END AS NUM
				          FROM MOM_POP_LABEL_SNMAKE A
				                INNER JOIN
				                MOM_ITEM_DEFINITION B
				                ON (A.DIVISION_CD = B.DIVISION_CD
				                AND A.COMPANY_CD = B.COMPANY_CD
				                AND A.ITEM_ID = B.ITEM_ID)
				         WHERE A.DIVISION_CD   = #{DIVISION_CD,   jdbcType=VARCHAR}
		                   AND A.COMPANY_CD    = #{COMPANY_CD,    jdbcType=VARCHAR}
		                   AND A.WORK_ORDER_ID = #{WORK_ORDER_ID, jdbcType=VARCHAR}
		                   AND A.USE_YN ='Y'
                           AND A.LABELTYPE ='GANBAN'
                           <if test="REPRINT_YN != null and REPRINT_YN != ''">
					         AND A.REPRINT_YN = #{REPRINT_YN, jdbcType=VARCHAR}
					       </if>
				        ) A
				 PIVOT ( MAX(A.GANBAN_ID) AS GANBAN_ID, MAX(A.POP_CT_QTY) AS POP_CT_QTY
				        FOR NUM IN ('1' AS A, '2' AS B, '3' AS C))
		)
		SELECT #{DIR, jdbcType=VARCHAR}||#{LABEL_ID, jdbcType=VARCHAR}||'.repx' AS REPORT_FILE
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE ITEM_ID END AS A_ITEM_ID
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE ITEM_ID END AS B_ITEM_ID
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE ITEM_ID END AS C_ITEM_ID
		     , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE PRE_ITEM_ID END AS A_PRE_ITEM_ID
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE PRE_ITEM_ID END AS B_PRE_ITEM_ID
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE PRE_ITEM_ID END AS C_PRE_ITEM_ID
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE POST_ITEM_ID END AS A_POST_ITEM_ID
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE POST_ITEM_ID END AS B_POST_ITEM_ID
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE POST_ITEM_ID END AS C_POST_ITEM_ID
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE MODEL END AS A_MODEL
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE MODEL END AS B_MODEL
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE MODEL END AS C_MODEL
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE PROJECT END AS A_PROJECT
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE PROJECT END AS B_PROJECT
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE PROJECT END AS C_PROJECT
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE SHIFT END AS A_SHIFT
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE SHIFT END AS B_SHIFT
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE SHIFT END AS C_SHIFT
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE TYPE END AS A_TYPE
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE TYPE END AS B_TYPE
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE TYPE END AS C_TYPE
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE MATERIAL END AS A_MATERIAL
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE MATERIAL END AS B_MATERIAL
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE MATERIAL END AS C_MATERIAL
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE COLOR END AS A_COLOR
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE COLOR END AS B_COLOR
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE COLOR END AS C_COLOR
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE PRESS_ITEM_ID END AS A_PRESS_ITEM_ID
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE PRESS_ITEM_ID END AS B_PRESS_ITEM_ID
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE PRESS_ITEM_ID END AS C_PRESS_ITEM_ID
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE #{DIR, jdbcType=VARCHAR}||ATTACH_NAME1 END AS AIMAGE1
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE #{DIR, jdbcType=VARCHAR}||ATTACH_NAME1 END AS BIMAGE1
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE #{DIR, jdbcType=VARCHAR}||ATTACH_NAME1 END AS CIMAGE1
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE #{DIR, jdbcType=VARCHAR}||ATTACH_NAME2 END AS AIMAGE2
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE #{DIR, jdbcType=VARCHAR}||ATTACH_NAME2 END AS BIMAGE2
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE #{DIR, jdbcType=VARCHAR}||ATTACH_NAME2 END AS CIMAGE2
             , CASE WHEN A_GANBAN_ID IS NULL THEN NULL ELSE B2BI_VENDOR_CD END AS A_B2BI_VENDOR_CD
             , CASE WHEN B_GANBAN_ID IS NULL THEN NULL ELSE B2BI_VENDOR_CD END AS B_B2BI_VENDOR_CD
             , CASE WHEN C_GANBAN_ID IS NULL THEN NULL ELSE B2BI_VENDOR_CD END AS C_B2BI_VENDOR_CD
		     , TO_CHAR(SYSDATE,'DD-MM-YYYY')            AS PROD_DATE
             , TO_CHAR(SYSDATE,'DD-MM-YYYY HH24:MI:SS') AS PROD_TIME
             , TO_CHAR(SYSDATE,'WW') AS WEEK
		     , A_GANBAN_ID
		     , SUBSTR(A_POP_CT_QTY,LENGTH(A_GANBAN_ID)+2,LENGTH(A_POP_CT_QTY))  AS A_POP_CT_QTY
		     , B_GANBAN_ID
		     , SUBSTR(B_POP_CT_QTY,LENGTH(B_GANBAN_ID)+2,LENGTH(B_POP_CT_QTY))  AS B_POP_CT_QTY
		     , C_GANBAN_ID
		     , SUBSTR(C_POP_CT_QTY,LENGTH(C_GANBAN_ID)+2,LENGTH(C_POP_CT_QTY))  AS C_POP_CT_QTY
		  FROM TMP		 
	</select>
	
	<select id="get_materialMove_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT S.ITEM_STOCK_ID
		     , S.ITEM_ID            
		     , D.ITEM_NAME           
		     , D.SPECIFICATION       
		     , ROUND(S.CURRENT_QTY, 4)  AS CURRENT_QTY  
		     , S.PREV_QTY                               
		     , D.UNIT                                   
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(S.DIVISION_CD, S.COMPANY_CD, 'ITEM_UNIT', D.UNIT) 
		        FROM   DUAL ) AS UNIT_NAME              
		     , S.LOCATION_CD
		     , '' AS TO_LOCATION_CD
		     , '' AS MOVE_QTY
		     , '' AS MOVE_DATE                            
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(S.DIVISION_CD, S.COMPANY_CD, S.LOCATION_CD)
		        FROM   DUAL ) AS FROM_LOCATION_NAME                                       
		     , D.ITEM_TYPE                             
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(S.DIVISION_CD, S.COMPANY_CD, 'ITEM_TYPE', D.ITEM_TYPE)
		        FROM   DUAL ) AS ITEM_TYPE_NAME  
		     , NVL(D.FREE_OFFER_FLAG, 'N')  AS FREE_OFFER_FLAG
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(S.DIVISION_CD, S.COMPANY_CD, 'FREE_OFFER', NVL(D.FREE_OFFER_FLAG, 'N')) 
		        FROM   DUAL ) AS FREE_OFFER_NAME            
		     <!-- , S.DESCRIPTION -->
		     , '' AS DESCRIPTION
		     , (SELECT COUNT(1) 
                  FROM MOM_POP_GANBAN G
                 WHERE G.DIVISION_CD = S.DIVISION_CD
                   AND G.COMPANY_CD = S.COMPANY_CD
                   AND G.SLOC = S.LOCATION_CD 
                   AND G.ITEM_ID = S.ITEM_ID
                   AND G.USE_YN ='Y') AS BOX_QTY
		FROM   MOM_ITEM_STOCK S
		     , MOM_ITEM_DEFINITION D
		     , MOM_PARAMETER P
		     , MOM_FACILITY F
		WHERE  S.DIVISION_CD = D.DIVISION_CD
		AND    S.COMPANY_CD  = D.COMPANY_CD
		AND    S.ITEM_ID     = D.ITEM_ID
		AND    S.DIVISION_CD = P.DIVISION_CD
        AND    S.COMPANY_CD  = P.COMPANY_CD
        AND    S.DIVISION_CD = F.DIVISION_CD(+)
        AND    S.COMPANY_CD  = F.COMPANY_CD(+)
        AND    S.LOCATION_CD = F.FACILITY_CD(+)
		AND    S.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    S.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	   <if test = "stockType =='MAT'">
        AND EXISTS ( SELECT '*'
                      FROM   MOM_CODE MC
                      WHERE  MC.DIVISION_CD = S.DIVISION_CD
                      AND    MC.COMPANY_CD  = S.COMPANY_CD
                      AND    MC.CODE_CLASS_ID = 'ITEM_TYPE'
                      AND    MC.CODE_ID       = D.ITEM_TYPE
                      AND    MC.USE_YN        = 'Y'
                      AND    MC.ATTRIBUTE3    = 'Y')
         AND EXISTS ( SELECT '*'
                      FROM   MOM_CODE MC
                      WHERE  MC.DIVISION_CD = S.DIVISION_CD
                      AND    MC.COMPANY_CD  = S.COMPANY_CD
                      AND    MC.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND    MC.CODE_ID       = F.FACILITY_TYPE
                      AND    MC.USE_YN        = 'Y'
                      AND    MC.ATTRIBUTE8    = 'Y')        
	   </if>
	   <if test = "stockType =='WO'">
         AND EXISTS ( SELECT '*'
                      FROM   MOM_CODE MC
                      WHERE  MC.DIVISION_CD = S.DIVISION_CD
                      AND    MC.COMPANY_CD  = S.COMPANY_CD
                      AND    MC.CODE_CLASS_ID = 'ITEM_TYPE'
                      AND    MC.CODE_ID       = D.ITEM_TYPE
                      AND    MC.USE_YN        = 'Y'
                      AND    MC.ATTRIBUTE4    = 'Y')
         AND EXISTS ( SELECT '*'
                      FROM   MOM_CODE MC
                      WHERE  MC.DIVISION_CD = S.DIVISION_CD
                      AND    MC.COMPANY_CD  = S.COMPANY_CD
                      AND    MC.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND    MC.CODE_ID       = F.FACILITY_TYPE
                      AND    MC.USE_YN        = 'Y'
                      AND    MC.ATTRIBUTE9    = 'Y')                          
       </if>
       <if test = "stockType =='SO'">
         AND EXISTS ( SELECT '*'
                      FROM   MOM_CODE MC
                      WHERE  MC.DIVISION_CD = S.DIVISION_CD
                      AND    MC.COMPANY_CD  = S.COMPANY_CD
                      AND    MC.CODE_CLASS_ID = 'ITEM_TYPE'
                      AND    MC.CODE_ID       = D.ITEM_TYPE
                      AND    MC.USE_YN        = 'Y'
                      AND    MC.ATTRIBUTE5    = 'Y')
         AND EXISTS ( SELECT '*'
                      FROM   MOM_CODE MC
                      WHERE  MC.DIVISION_CD = S.DIVISION_CD
                      AND    MC.COMPANY_CD  = S.COMPANY_CD
                      AND    MC.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND    MC.CODE_ID       = F.FACILITY_TYPE
                      AND    MC.USE_YN        = 'Y'
                      AND    MC.ATTRIBUTE10    = 'Y')                         
       </if>
       <if test = "stockType =='MRTN'">
        AND EXISTS ( SELECT '*'
                      FROM   MOM_CODE MC
                      WHERE  MC.DIVISION_CD = S.DIVISION_CD
                      AND    MC.COMPANY_CD  = S.COMPANY_CD
                      AND    MC.CODE_CLASS_ID = 'ITEM_TYPE'
                      AND    MC.CODE_ID       = D.ITEM_TYPE
                      AND    MC.USE_YN        = 'Y'
                      AND    MC.ATTRIBUTE6    = 'Y')
         AND EXISTS ( SELECT '*'
                      FROM   MOM_CODE MC
                      WHERE  MC.DIVISION_CD = S.DIVISION_CD
                      AND    MC.COMPANY_CD  = S.COMPANY_CD
                      AND    MC.CODE_CLASS_ID = 'FACILITY_TYPE'
                      AND    MC.CODE_ID       = F.FACILITY_TYPE
                      AND    MC.USE_YN        = 'Y'
                      AND    MC.ATTRIBUTE12    = 'Y')        
	   </if>
	   <if test="location != null and location != '' ">
		AND    S.LOCATION_CD = #{location, jdbcType=VARCHAR}  
	   </if>
	   <if test="itemType != null and itemType != '' ">
		AND    D.ITEM_TYPE = #{itemType, jdbcType=VARCHAR}  
	   </if>
	   <if test="itemId != null and itemId != '' ">
	    AND (UPPER(S.ITEM_ID) LIKE UPPER('%' || #{itemId, jdbcType=VARCHAR} || '%') 
		 OR UPPER(D.ITEM_NAME) LIKE UPPER('%' || #{itemId, jdbcType=VARCHAR} || '%'))
	   </if>
	   <if test="zeroFlag != null and zeroFlag != ''">
		   <choose>
			   <when test='zeroFlag == "N"'>
			   AND S.CURRENT_QTY != 0
			   </when>
		   </choose>
	   </if>
	  ORDER BY FROM_LOCATION_NAME, S.ITEM_ID 
	</select>
	
	<select id="get_materialGanban_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT GANBAN_ID
		     , GOOD_QTY AS BOXQTY
		     , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
		  FROM MOM_POP_GANBAN
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		   AND SLOC 	   = #{location, jdbcType=VARCHAR} 
		   AND ITEM_ID 	   = #{itemId, jdbcType=VARCHAR}
		   AND USE_YN = 'Y'
	</select>
	
	<!-- 라벨선발행 대상 업데이트 -->
	<insert id="update_reprint_flag" parameterType="java.util.HashMap">
		UPDATE MOM_POP_LABEL_SNMAKE
		   SET REPRINT_YN 		   = #{REPRINT_YN,  jdbcType=VARCHAR}
		WHERE DIVISION_CD   	   = #{DIVISION_CD, jdbcType=VARCHAR}
          AND COMPANY_CD    	   = #{COMPANY_CD,  jdbcType=VARCHAR}
          AND WORK_ORDER_ID 	   = #{WORK_ORDER_ID, jdbcType=VARCHAR}
          <if test="WORK_ORDER_RESULT_ID != null and WORK_ORDER_RESULT_ID != ''">
          AND WORK_ORDER_RESULT_ID = #{WORK_ORDER_RESULT_ID,jdbcType=VARCHAR}
          </if>
		  AND LABELTYPE = 'GANBAN'
		  AND USE_YN = 'Y'
    </insert>
	
	<!-- 라벨 선발행 SN생성(sn, ct, ganban) -->
	<insert id="create_presnganbanmake_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_SNGANBAN_INSERT (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,        mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,     mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,      mode=IN,  jdbcType=VARCHAR}
           , #{P_ITEM_ID,         mode=IN,  jdbcType=VARCHAR}
           , #{P_IDLABELRULE1,    mode=IN,  jdbcType=VARCHAR}
           , #{P_IDLABELRULE2,    mode=IN,  jdbcType=VARCHAR}
           , #{P_Y,               mode=IN,  jdbcType=VARCHAR}
           , #{P_MM,              mode=IN,  jdbcType=VARCHAR}
           , #{P_DD,              mode=IN,  jdbcType=VARCHAR}
           , #{P_WORK_ORDER_ID,   mode=IN,  jdbcType=VARCHAR}
           , #{P_PLANQTY,         mode=IN,  jdbcType=VARCHAR}
           , #{P_MOLDNO,          mode=IN,  jdbcType=VARCHAR}
           , #{P_LABELTYPE,       mode=IN,  jdbcType=VARCHAR}
           , #{P_ITEMTYPE,        mode=IN,  jdbcType=VARCHAR}
           , #{P_PACKQTY,         mode=IN,  jdbcType=VARCHAR}
           , #{P_PRINTQTY,        mode=IN,  jdbcType=VARCHAR}
           , #{P_PROJECT,         mode=IN,  jdbcType=VARCHAR}
           , #{P_SHIFT,        	  mode=IN,  jdbcType=VARCHAR}
           , #{P_TYPE,            mode=IN,  jdbcType=VARCHAR}
           , #{P_LGE_ITEM,        mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,       mode=IN,  jdbcType=VARCHAR}
           
        )
    }
	</insert>
	
	<insert id="update_presnganbanmake_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_SNGANBAN_UPDATE (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,        mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,     mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,      mode=IN,  jdbcType=VARCHAR}
           , #{P_ITEM_ID,         mode=IN,  jdbcType=VARCHAR}
           , #{P_IDLABELRULE2,    mode=IN,  jdbcType=VARCHAR}
           , #{P_Y,               mode=IN,  jdbcType=VARCHAR}
           , #{P_MM,              mode=IN,  jdbcType=VARCHAR}
           , #{P_DD,              mode=IN,  jdbcType=VARCHAR}
           , #{P_WORK_ORDER_ID,   mode=IN,  jdbcType=VARCHAR}
           , #{P_PLANQTY,         mode=IN,  jdbcType=VARCHAR}
           , #{P_MOLDNO,          mode=IN,  jdbcType=VARCHAR}
           , #{P_LABELTYPE,       mode=IN,  jdbcType=VARCHAR}
           , #{P_ITEMTYPE,        mode=IN,  jdbcType=VARCHAR}
           , #{P_PACKQTY,         mode=IN,  jdbcType=VARCHAR}
           , #{P_PRINTQTY,        mode=IN,  jdbcType=VARCHAR}
           , #{P_PROJECT,         mode=IN,  jdbcType=VARCHAR}
           , #{P_SHIFT,        	  mode=IN,  jdbcType=VARCHAR}
           , #{P_TYPE,            mode=IN,  jdbcType=VARCHAR}
           , #{P_LGE_ITEM,        mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,       mode=IN,  jdbcType=VARCHAR}
           
        )
    }
	</insert>
	
	<!-- 라벨 선발행 SN삭제(sn, ct, ganban) : USE_N ==>  N으로 처리 -->
	<insert id="create_presnganbandelete_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_SNGANBAN_DELETE (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,        mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,     mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,      mode=IN,  jdbcType=VARCHAR}
           , #{P_WORK_ORDER_ID,   mode=IN,  jdbcType=VARCHAR}
           , #{P_LABELTYPE,       mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,       mode=IN,  jdbcType=VARCHAR}
           
        )
    }
	</insert>
	
	<!-- 비가동 공수 입력 -->
	<insert id="create_nonworkinsert_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_NONWORK_INSERT (
             #{p_err_code,        mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg,         mode=OUT, jdbcType=VARCHAR}
           , #{p_runCount,        mode=OUT, jdbcType=VARCHAR}
           , #{P_DIVISION_CD,     mode=IN,  jdbcType=VARCHAR}
           , #{P_COMPANY_CD,      mode=IN,  jdbcType=VARCHAR}
           , #{P_WORK_DATE,       mode=IN,  jdbcType=VARCHAR}
           , #{P_RESOURCE_CD,     mode=IN,  jdbcType=VARCHAR}
           , #{P_EQUIPMENT_CD,    mode=IN,  jdbcType=VARCHAR}
           , #{P_NON_CLASS_ID,    mode=IN,  jdbcType=VARCHAR}
           , #{P_NON_WORK_CD,     mode=IN,  jdbcType=VARCHAR}
           , #{P_NON_TYPE,        mode=IN,  jdbcType=VARCHAR}
           , #{P_INSERTFLAG,      mode=IN,  jdbcType=VARCHAR}
           , #{P_SHIFT_CD,        mode=IN,  jdbcType=VARCHAR}
           , #{P_CREATE_BY,       mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_polandpopworesult_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_POP_CREATE_WO_RESULT (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_enddate,               mode=OUT, jdbcType=VARCHAR}
            , #{p_ctprintno,             mode=OUT, jdbcType=VARCHAR}
            , #{p_pre_item_id,           mode=OUT, jdbcType=VARCHAR}
            , #{p_serialnumber,          mode=IN,  jdbcType=VARCHAR}
			, #{p_division_cd,           mode=IN,  jdbcType=VARCHAR}
			, #{p_company_cd,            mode=IN,  jdbcType=VARCHAR}
			, #{p_work_order_id,         mode=IN,  jdbcType=VARCHAR}
			, #{p_wo_state,              mode=IN,  jdbcType=VARCHAR}
			, #{p_shift_cd,              mode=IN,  jdbcType=VARCHAR}
			, #{p_work_person,           mode=IN,  jdbcType=VARCHAR}
			, #{p_good_qty,              mode=IN,  jdbcType=VARCHAR}
			, #{p_bad_qty,               mode=IN,  jdbcType=VARCHAR}
			, #{p_description,           mode=IN,  jdbcType=VARCHAR}
			, #{p_close_flag,            mode=IN,  jdbcType=VARCHAR}
			, #{p_badcode,               mode=IN,  jdbcType=VARCHAR}
			, #{p_destination,           mode=IN,  jdbcType=VARCHAR}
			, #{p_update_by,             mode=IN,  jdbcType=VARCHAR}
			, #{p_short_sn,              mode=IN,  jdbcType=VARCHAR}
			, #{p_long_sn,               mode=IN,  jdbcType=VARCHAR}
			, #{p_work_day,              mode=IN,  jdbcType=VARCHAR}
			, #{p_starttime,             mode=IN,  jdbcType=VARCHAR}
			, #{p_ctqty,                 mode=IN,  jdbcType=VARCHAR}
			, #{p_labeltype,             mode=IN,  jdbcType=VARCHAR}
			, #{p_packflag,              mode=IN,  jdbcType=VARCHAR}
			, #{p_ganbanseq,             mode=IN,  jdbcType=VARCHAR}
			, #{p_resource_cd,           mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_polandpopworesultnew_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_POP_CREATE_PRD_WO_RESULT (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_enddate,               mode=OUT, jdbcType=VARCHAR}
            , #{p_ctprintno,             mode=OUT, jdbcType=VARCHAR}
            , #{p_pre_item_id,           mode=OUT, jdbcType=VARCHAR}
            , #{p_serialnumber,          mode=IN,  jdbcType=VARCHAR}
			, #{p_division_cd,           mode=IN,  jdbcType=VARCHAR}
			, #{p_company_cd,            mode=IN,  jdbcType=VARCHAR}
			, #{p_work_order_id,         mode=IN,  jdbcType=VARCHAR}
			, #{p_wo_state,              mode=IN,  jdbcType=VARCHAR}
			, #{p_shift_cd,              mode=IN,  jdbcType=VARCHAR}
			, #{p_work_person,           mode=IN,  jdbcType=VARCHAR}
			, #{p_good_qty,              mode=IN,  jdbcType=VARCHAR}
			, #{p_bad_qty,               mode=IN,  jdbcType=VARCHAR}
			, #{p_description,           mode=IN,  jdbcType=VARCHAR}
			, #{p_close_flag,            mode=IN,  jdbcType=VARCHAR}
			, #{p_badcode,               mode=IN,  jdbcType=VARCHAR}
			, #{p_destination,           mode=IN,  jdbcType=VARCHAR}
			, #{p_update_by,             mode=IN,  jdbcType=VARCHAR}
			, #{p_work_day,              mode=IN,  jdbcType=VARCHAR}
			, #{p_starttime,             mode=IN,  jdbcType=VARCHAR}
			, #{p_labeltype,             mode=IN,  jdbcType=VARCHAR}
			, #{p_resource_cd,           mode=IN,  jdbcType=VARCHAR}
			, #{p_equipment_cd,          mode=IN,  jdbcType=VARCHAR}
			, #{p_inline_flag,           mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="cancel_polandpopworesultnew_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_POP_CANCEL_PRD_WO_RESULT (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_enddate,               mode=OUT, jdbcType=VARCHAR}
            , #{p_serialnumber,          mode=IN,  jdbcType=VARCHAR}
			, #{p_division_cd,           mode=IN,  jdbcType=VARCHAR}
			, #{p_company_cd,            mode=IN,  jdbcType=VARCHAR}
			, #{p_work_order_id,         mode=IN,  jdbcType=VARCHAR}
			, #{p_update_by,             mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_polandpopwoupdate_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_WO_UPDATE (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_runCount,              mode=OUT, jdbcType=VARCHAR}
            , #{p_ctnumber,              mode=OUT, jdbcType=VARCHAR}
            , #{P_DIVISION_CD,           mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,            mode=IN,  jdbcType=VARCHAR}
			, #{P_WORK_ORDER_ID,         mode=IN,  jdbcType=VARCHAR}
			, #{P_NOWSTATE,              mode=IN,  jdbcType=VARCHAR}
			, #{P_PRESTATE,              mode=IN,  jdbcType=VARCHAR}
			, #{P_ITEM_ID,               mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,             mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="set_onlineGanban_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_ONLINEGANBAN_CREATE (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_runCount,              mode=OUT, jdbcType=VARCHAR}
            , #{p_ctnumber,              mode=OUT, jdbcType=VARCHAR}
            , #{P_DIVISION_CD,           mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,            mode=IN,  jdbcType=VARCHAR}
			, #{P_WORK_ORDER_ID,         mode=IN,  jdbcType=VARCHAR}
			, #{P_GANBANQTY,             mode=IN,  jdbcType=VARCHAR}
			, #{P_RESOURCE_CD,           mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,             mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_ctmapping_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_CTMAPPING (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_runCount,              mode=OUT, jdbcType=VARCHAR}
            , #{P_DIVISION_CD,           mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,            mode=IN,  jdbcType=VARCHAR}
			, #{P_SN,                    mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,             mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<insert id="create_ct_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_POLANDPOP.P_CT_POLAND (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_runCount,              mode=OUT, jdbcType=VARCHAR}
            , #{P_DIVISION_CD,           mode=IN,  jdbcType=VARCHAR}
			, #{P_COMPANY_CD,            mode=IN,  jdbcType=VARCHAR}
			, #{P_SN,                    mode=IN,  jdbcType=VARCHAR}
			, #{P_CREATE_BY,             mode=IN,  jdbcType=VARCHAR}
			, #{P_RESOURCE_CD,           mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 출하처리  -->
	<insert id="create_shipment_proc" statementType="CALLABLE">
	{
        CALL SP_MOM_SALES_ORDER_PKG.P_CREATE_SHIP_RESULT_POP (
              #{p_err_code,              mode=OUT, jdbcType=VARCHAR}
            , #{p_err_msg,               mode=OUT, jdbcType=VARCHAR}
            , #{p_division_cd,           mode=IN,  jdbcType=VARCHAR}
			, #{p_company_cd,            mode=IN,  jdbcType=VARCHAR}
			, #{p_bar_code,              mode=IN,  jdbcType=VARCHAR}
			, #{p_modifier,              mode=IN,  jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<!-- 라벨리스트 정보 insert -->
	<insert id="update_labellistExcel" parameterType="java.util.HashMap">
		UPDATE MOM_POP_LABELLIST SET (
		   UPDATE_DATE = SYSDATE 
		   , UPDATE_BY       = #{CREATE_BY,      jdbcType=VARCHAR} 
		   , ID_RULE         = #{ID_RULE,        jdbcType=VARCHAR}
		   , EXCEL_FILE      = #{EXCEL_FILE,     jdbcType=VARCHAR} 
		   , EXCEL_LANDSCAFE = #{EXCEL_LANDSCAFE jdbcType=VARCHAR}
		WHERE LABEL_ID = #{LABEL_ID,       jdbcType=VARCHAR}
    </insert>
	
	
	
	<resultMap id="imageDownloadMap" type="HashMap">
      <result property="ATTACHNAME1" column="ATTACH_NAME1"/>
      <result property="ATTACH1" column="ATTACH1" jdbcType="CLOB" javaType="java.lang.String"/>
      <result property="ATTACHNAME2" column="ATTACH_NAME2"/>
      <result property="ATTACH2" column="ATTACH2" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    
	<select id="get_image_download" resultMap="imageDownloadMap" parameterType="java.util.HashMap">
	    SELECT 
	    	A.ATTACH1, 
	    	A.ATTACH_NAME1,
	    	A.ATTACH2, 
	    	A.ATTACH_NAME2
	    FROM MOM_ITEM_DEFINITION A
	    WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
	    AND A.COMPANY_CD    = #{COMPANY_CD,  jdbcType=VARCHAR}
		AND A.ITEM_ID       = #{ITEM_ID,     jdbcType=VARCHAR}
    </select>
	
	
	<resultMap id="excelDownloadMap" type="HashMap">
	  <result property="EXCELID" column="EXCEL_ID"/>
      <result property="EXCELFILENAME" column="EXCEL_FILE_NAME"/>
      <result property="EXCELFILE" column="EXCEL_FILE" jdbcType="CLOB" javaType="java.lang.String"/>
    </resultMap>
    
	<select id="get_excel_download" resultMap="excelDownloadMap" parameterType="java.util.HashMap">
	    SELECT A.EXCEL_ID
	             , A.EXCEL_FILE_NAME
	             , A.EXCEL_FILE
	          FROM MOM_EXCEL A
	         WHERE A.DIVISION_CD = #{DIVISION_CD, jdbcType=VARCHAR}
	           AND A.COMPANY_CD  = #{COMPANY_CD,  jdbcType=VARCHAR}
	           AND A.EXCEL_ID    = #{EXCEL_ID,    jdbcType=VARCHAR}
    </select>
</mapper>


