<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.workOrder.jobCurrentSituation">
	<select id="get_jobCurrentSituation_list" resultType="camelMap" parameterType="java.util.HashMap">
		WITH TEMP1 AS (
		   SELECT B.WORK_ORDER_ID
		        , B.DESCRIPTION
		        , B.ITEM_ID
		        , C.ITEM_NAME
		        , B.PRODUCT_ORDER_ID
		        , DECODE (NVL (B.WORK_ORDER_TYPE, 'N'), 'N', 'SYSTEM', UPPER (B.WORK_ORDER_TYPE)) WORK_ORDER_TYPE
		        , B.WO_STATE
		        , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (B.DIVISION_CD
		                                                 , B.COMPANY_CD
		                                                 , 'WORK_ORDER_STATE'
		                                                 , B.WO_STATE)
		             FROM DUAL) AS STATE_NAME
		        , B.PRIORITY
		        , NVL (B.PLAN_QTY, 0) AS PLAN_QTY
		        , NVL (B.CONFIRM_QTY, 0) RESULT_QTY
		        , NVL (B.GOOD_QTY, 0) QTY
		        , NVL (B.BAD_QTY, 0) BAD_QTY
		        , NVL (B.CANCEL_QTY, 0) CANCEL_QTY
				, NVL (B.GOOD_QTY, 0) + DECODE(MP.DEFECT_QTY_USE_FLAG, 'Y', NVL (B.BAD_QTY, 0), 0) AS TOTAL_END_QTY
                , CASE WHEN MP.DEFECT_QTY_USE_FLAG = 'Y' THEN 
                  	 NVL (B.CONFIRM_QTY, 0) - (NVL (B.GOOD_QTY, 0) + NVL (B.BAD_QTY, 0) + NVL (B.CANCEL_QTY, 0))
                  ELSE
                     NVL (B.CONFIRM_QTY, 0) - (NVL (B.GOOD_QTY, 0) + NVL (B.CANCEL_QTY, 0))
                  END 
                  	 REMAIN_QTY
		        , B.RESOURCE_CD
		        , ME.RESOURCE_NAME AS RESOURCE_NAME
		        , B.OUT_RESOURCE_CD
		        , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_NAME (B.DIVISION_CD, B.COMPANY_CD, B.OUT_RESOURCE_CD) FROM DUAL) AS OUT_EQUIPMENT_NAME
		        , ME.LOCATION_CD
		        , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (ME.DIVISION_CD, ME.COMPANY_CD, ME.LOCATION_CD) FROM DUAL) LOCATION_NAME
		        , TO_CHAR (B.PLAN_START_TIME, 'YYYY-MM-DD') PLAN_START_TIME
		        , TO_CHAR (B.PLAN_END_TIME, 'YYYY-MM-DD') PLAN_END_TIME
		        , TO_CHAR (B.START_TIME, 'YYYY-MM-DD') START_TIME
		        , TO_CHAR (B.END_TIME, 'YYYY-MM-DD') END_TIME
		        , B.UPDATE_BY AS MODIFIER_ID
		        , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME (B.DIVISION_CD, B.COMPANY_CD, B.UPDATE_BY) FROM DUAL) AS UPDATE_USER_NAME
		        , TO_CHAR (B.UPDATE_DATE, 'YYYY-MM-DD HH24:mi:ss') AS UPDATE_DATE
		        , C.VENDOR_CD
		        , C.ITEM_NAME AS PRODUCT_NAME
		        , C.SPECIFICATION
		        , C.ITEM_TYPE
		        , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (C.DIVISION_CD
		                                                 , C.COMPANY_CD
		                                                 , 'ITEM_TYPE'
		                                                 , C.ITEM_TYPE)
		             FROM DUAL)  AS ITEM_TYPE_NAME
		        , B.CREATE_BY AS CREATOR_AW_ID
		        , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME (B.DIVISION_CD, B.COMPANY_CD, B.CREATE_BY) FROM DUAL) AS CREATOR_AW
		        , TO_CHAR (B.CREATE_DATE, 'YYYY-MM-DD HH24:mi:ss') AS CREATE_TIME_AW
		        , B.RESULT_UPDATE_BY 
		        , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(B.DIVISION_CD, B.COMPANY_CD, B.RESULT_UPDATE_BY) FROM DUAL) AS MODIFIER_RHEW
		        , TO_CHAR (B.RESULT_UPDATE_DATE, 'YYYY-MM-DD HH24:mi:ss') AS MODIFY_TIME_RHEW
		        , DECODE(B.ORDER_FLAG, 'IN', ME.GOOD_LOCATION_CD, C.IN_LOCATION_ID) AS GOOD_LOCATION_CD
                , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (ME.DIVISION_CD, ME.COMPANY_CD, DECODE(B.ORDER_FLAG, 'IN', ME.GOOD_LOCATION_CD, C.IN_LOCATION_ID)) FROM DUAL) AS GOOD_LOCATION_NAME
                , DECODE(B.ORDER_FLAG, 'IN', ME.BAD_LOCATION_CD, C.IN_LOCATION_ID) AS BAD_LOCATION_CD
                , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (ME.DIVISION_CD, ME.COMPANY_CD, DECODE(B.ORDER_FLAG, 'IN', ME.BAD_LOCATION_CD, C.IN_LOCATION_ID)) FROM DUAL) AS BAD_LOCATION_NAME
		        , C.ITEM_GROUP_LARGE
		        , C.ITEM_GROUP_MEDIUM
		        , C.ITEM_GROUP_SMALL
		        , B.CUSTOMER_LINE_CD
		        , TO_CHAR (B.CUSTOMER_DUE_DATE, 'YYYY-MM-DD') CUSTOMER_DUE_DATE
		        , NVL (B.MES_GOOD_QTY, 0) AS MES_GOOD_QTY
		        , NVL (B.MES_BAD_QTY, 0) AS MES_BAD_QTY
		        , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_GROUP_NAME (ME.DIVISION_CD, ME.COMPANY_CD, ME.RESOURCE_GROUP_CD) FROM DUAL) AS RESOURCE_GROUP_NAME
		        , B.ORDER_FLAG
            	, (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'WO_FLAG', B.ORDER_FLAG) FROM DUAL) AS ORDER_FLAG_NAME
            	, B.PRODUCT_ORDER_TYPE AS WO_TYPE
                , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'PRODUCT_ORDER_TYPE', B.PRODUCT_ORDER_TYPE) FROM DUAL) AS WO_TYPE_NAME
                , C.POP_CT_QTY
		     FROM (SELECT /*+ ORDERED*/
		                 A.*, RESULT_UPDATE_BY, RESULT_UPDATE_DATE
		             FROM MOM_WORK_ORDER A
		                , (  SELECT MAX (UPDATE_BY) RESULT_UPDATE_BY, MAX (UPDATE_DATE) RESULT_UPDATE_DATE, WORK_ORDER_ID
		                       FROM MOM_WORK_ORDER_RESULT
		                      WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} 
		                      AND COMPANY_CD =  #{companyCd, jdbcType=VARCHAR} 
		                      	<choose>
		                      		<when test="dateCombo == 'WORK_DATE'">
		                      		 AND trunc(update_date) BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR} , 'YYYY-MM-DD') AND TO_DATE(#{toDate, jdbcType=VARCHAR} , 'YYYY-MM-DD')
		                     		</when>
		                     	</choose>
		                             AND STATE = 'E'
		                      GROUP BY WORK_ORDER_ID) RHEW
		                     	<choose>
		                     	   <when test="dateCombo == 'WORK_DATE'">
		                     		WHERE A.WORK_ORDER_ID = RHEW.WORK_ORDER_ID
		                     	   </when>
		                     	   <otherwise>
		                     	    WHERE A.WORK_ORDER_ID = RHEW.WORK_ORDER_ID(+)
		                     	   </otherwise>
		                        </choose>	
		         ) B
		       , MOM_ITEM_DEFINITION C
		       , MOM_RESOURCE ME
		       , MOM_PARAMETER MP
		   WHERE 1 = 1
		     AND B.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} 
		     AND B.COMPANY_CD = #{companyCd, jdbcType=VARCHAR} 
		     AND B.DIVISION_CD = C.DIVISION_CD(+)
		     AND B.COMPANY_CD = C.COMPANY_CD(+)
		     AND B.ITEM_ID = C.ITEM_ID(+)
		     AND B.DIVISION_CD = ME.DIVISION_CD(+)
		     AND B.COMPANY_CD = ME.COMPANY_CD(+)
		     AND B.RESOURCE_CD = ME.RESOURCE_CD(+)
		     AND B.DIVISION_CD = MP.DIVISION_CD(+)
		     AND B.COMPANY_CD = MP.COMPANY_CD(+)
		   	<choose>
	        	<when test="dateCombo == 'SCHEDULE_START_TIME'">
    				AND B.PLAN_START_TIME BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
		   		</when>
		   		<when test="dateCombo == 'MODIFY_TIME'">
	    			AND B.UPDATE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
		   		</when>
		   	</choose>
		     <if test="locationCd != null and locationCd != ''">
		     AND ME.LOCATION_CD = #{locationCd, jdbcType=VARCHAR}
		     </if>
		     <if test="resourceCd != null and resourceCd != ''">
		     AND B.RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		     </if>
		     <if test="state != null and state != ''">
		     AND B.WO_STATE IN (${state})
		     </if>
		     <if test="orderType != null and orderType != ''">
		     AND B.WORK_ORDER_TYPE = #{orderType, jdbcType=VARCHAR}
		     </if>
		     <if test="completeBy != null and completeBy != ''">
		     AND (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(B.DIVISION_CD, B.COMPANY_CD, B.RESULT_UPDATE_BY) FROM DUAL) = #{completeBy, jdbcType=VARCHAR}
		     </if>
		     <if test="searchKeyWord != null and searchKeyWord != ''">
		     	<choose>
		     		<when test="searchJobTerms == 'WO_PO_ID'">
		     		 AND (B.WORK_ORDER_ID LIKE '%' || UPPER(#{searchKeyWord, jdbcType=VARCHAR}) || '%'
		     		  OR B.PRODUCT_ORDER_ID LIKE '%' || UPPER(#{searchKeyWord, jdbcType=VARCHAR}) || '%')
		     		</when>
		     		<when test="searchJobTerms == 'PRODUCT_DEFINITION_ID'">
		     		 AND (B.ITEM_ID LIKE '%' || UPPER(#{searchKeyWord, jdbcType=VARCHAR}) || '%'
		     		  OR UPPER(C.ITEM_NAME) LIKE '%' || UPPER(#{searchKeyWord, jdbcType=VARCHAR}) || '%'
		     		  OR UPPER(C.SPECIFICATION) LIKE '%' || UPPER(#{searchKeyWord, jdbcType=VARCHAR}) || '%')
		     		</when>
		     	</choose>
		     </if>
		     <if test ="orderFlag != null and orderFlag != ''">
		     AND B.ORDER_FLAG = #{orderFlag, jdbcType=VARCHAR}
		     </if>
		ORDER BY B.RESOURCE_CD, TO_CHAR (B.PLAN_START_TIME, 'YYYY-MM-DD'), B.PRIORITY)
		    SELECT A.*
		         , B.CNT
		         , B.SUM_QTY
		         , B.SUM_RESULT_QTY
		         , B.SUM_CANCEL_QTY
		      FROM (SELECT A.*
		                 , ROWNUM JQGRIDROW
		            FROM TEMP1 A) A
		         , (SELECT COUNT(*)        AS CNT
		                 , SUM(QTY)        AS SUM_QTY
		                 , SUM(RESULT_QTY) AS SUM_RESULT_QTY
		                 , SUM(CANCEL_QTY) AS SUM_CANCEL_QTY
		            FROM TEMP1) B
	</select>
	
    <select id="get_materialDeduction_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.WORK_ORDER_ID
		     , MWO.ITEM_ID AS  PRODUCT_ITEM_ID
		     , A.ITEM_ID     MATERIAL_ITEM_ID
		     , B.ITEM_NAME   MATERIAL_ITEM_NAME
		     , B.SPECIFICATION
		     , B.UNIT
		     , A.QTY
		     , A.LOCATION_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(A.DIVISION_CD, A.COMPANY_CD, A.LOCATION_CD) FROM DUAL) AS LOCATION_NAME
		     , TO_CHAR(A.IO_TIME, 'YYYY-MM-DD') AS STATE_TIME
		     , A.UPDATE_BY
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME (A.DIVISION_CD, A.COMPANY_CD, A.UPDATE_BY) FROM DUAL) AS UPDATE_USER_NAME
		     , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
		     , A.ITEM_STOCK_INOUT_ID
		  FROM MOM_ITEM_STOCK_INOUT A
		     , MOM_ITEM_DEFINITION B
		     , MOM_WORK_ORDER MWO
		 WHERE 1 = 1
		   AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.DIVISION_CD = B.DIVISION_CD(+)
		   AND A.COMPANY_CD = B.COMPANY_CD(+)
		   AND A.DIVISION_CD = MWO.DIVISION_CD
		   AND A.COMPANY_CD = MWO.COMPANY_CD
		   AND A.WORK_ORDER_ID = MWO.WORK_ORDER_ID
		   AND A.ITEM_ID = B.ITEM_ID(+)
		   AND A.IO_TYPE = 'O'
		   AND A.IO_CATEGORY IN ('MC001', 'MCC001')
		  <if test="workOrderId != null and workOrderId != ''">
		   AND A.WORK_ORDER_ID = #{workOrderId, jdbcType=VARCHAR} 
		  </if>
		 ORDER BY A.ITEM_ID, A.ITEM_STOCK_INOUT_ID DESC
	</select>
	
</mapper>