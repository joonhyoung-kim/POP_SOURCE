<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.price.materialPrice"> 
	<select id="get_materialPrice_list" resultType="camelMap" parameterType="java.util.HashMap">
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		WITH TEMP1 AS (
		</if>
			SELECT A.DIVISION_CD
		         , A.COMPANY_CD
		         , A.INOUT_FLAG
		         , A.VENDOR_CD
		         , A.VENDOR_CD AS VENDOR_CD2
		         , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME( A.DIVISION_CD
		                                                    , A.COMPANY_CD  
		                                                    , A.VENDOR_CD)
		              FROM DUAL) AS VENDOR_NAME
		         , A.ITEM_ID
		         , A.ITEM_ID AS ITEM_ID2
		         , B.ITEM_NAME
		         , TO_CHAR(A.START_DATE, 'YYYY-MM-DD')   AS START_DATE
		         , TO_CHAR(A.END_DATE, 'YYYY-MM-DD')     AS END_DATE     
		         , A.UNIT_PRICE
		         , '' AS MODIFY_UNIT_PRICE
		         , A.MARKET_CD
		         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                                  , A.COMPANY_CD  
		                                                  , 'MARKET_CODE'
		                                                  , A.MARKET_CD)
		              FROM DUAL) AS MARKET_NAME
		         , A.CURRENCY_CD
		         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                                  , A.COMPANY_CD  
		                                                  , 'CURRENCY_CODE'
		                                                  , A.CURRENCY_CD)
		              FROM DUAL) AS CURRENCY_NAME     
		         , A.USE_YN
		         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                                  , A.COMPANY_CD  
		                                                  , 'USE_FLAG'
		                                                  , A.USE_YN)
		              FROM DUAL) AS USE_YN_NAME 
		         , A.DESCRIPTION
		         , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
		         , A.CREATE_BY
		         , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
		                                                  , A.COMPANY_CD  
		                                                  , A.CREATE_BY)
		              FROM DUAL) AS CREATE_USER_NAME          
		         , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE          
		         , A.UPDATE_BY
		         , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
		                                                  , A.COMPANY_CD  
		                                                  , A.UPDATE_BY)
		              FROM DUAL) AS UPDATE_USER_NAME
		         , B.ITEM_TYPE   
		         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( B.DIVISION_CD
		                                                  , B.COMPANY_CD  
		                                                  , 'ITEM_TYPE'
		                                                  , B.ITEM_TYPE)
		              FROM DUAL) AS ITEM_TYPE_NAME
		         , B.SPECIFICATION
		         , B.UNIT
		         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( B.DIVISION_CD
			                                              , B.COMPANY_CD  
			                                              , 'ITEM_UNIT'
			                                              , B.UNIT)
			          FROM DUAL) AS UNIT_NAME
		         , NVL(LEAD(A.UNIT_PRICE) OVER(PARTITION BY A.VENDOR_CD
		         	                                      , A.ITEM_ID
		              	                                  , A.MARKET_CD 
		                   		               ORDER BY A.VENDOR_CD DESC
			                                          , A.MARKET_CD
			                                          , A.ITEM_ID ASC
			                                          , A.START_DATE DESC), 0)  AS  PREV_PRICE 
		      FROM    MOM_ITEM_PRICE A
		           ,  MOM_ITEM_DEFINITION B
		     WHERE    A.DIVISION_CD = B.DIVISION_CD(+)
		       AND    A.COMPANY_CD  = B.COMPANY_CD (+)
		       AND    A.ITEM_ID     = B.ITEM_ID(+)
		       AND    A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		       AND    A.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	        <if test="inoutFlag != null and inoutFlag != '' and itemType != 'EM'">
	           AND    A.INOUT_FLAG  = #{inoutFlag, jdbcType=VARCHAR}
	        </if>
	        <if test="inoutFlag != null and inoutFlag != '' and itemType == 'EM'">
	           AND    A.INOUT_FLAG  = #{inoutFlag, jdbcType=VARCHAR}
	           AND    B.ITEM_TYPE = #{itemType, jdbcType=VARCHAR}
	        </if>
		    <if test="itemName != null and itemName != ''">
		       AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%' 
		           OR UPPER(B.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%')
		    </if> 
		    <if test="vendorName != null and vendorName != ''">
		       AND  A.VENDOR_CD = #{vendorName, jdbcType=VARCHAR}  
		    </if> 
            <if test="fromDate != null and fromDate != ''">
               AND TO_DATE(#{fromDate, jdbcType=VARCHAR},'YYYY-MM-DD') BETWEEN A.START_DATE AND A.END_DATE       
            </if>
	     ORDER BY VENDOR_NAME
	            , A.ITEM_ID
	            , A.MARKET_CD
	            , A.CURRENCY_CD
	            , A.START_DATE 
	    <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		        ) 
		SELECT 	A.* , 
        		B.ROW_COUNT 
   		FROM (	SELECT 	A.* , 
          				ROWNUM GRIDROW 
           		FROM TEMP1 A) A , 
        	 (	SELECT COUNT(*) ROW_COUNT 
           		FROM TEMP1) B
        WHERE GRIDROW BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
		</if>  
	</select>
	
	<delete id="remove_materialPriceTemp" parameterType="java.util.HashMap">
		DELETE 
		  FROM MOM_ITEM_PRICE_TMP
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND INOUT_FLAG = #{inoutFlag, jdbcType=VARCHAR}
	</delete>
	
	<select id="get_materialPriceTemp" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT *
		  FROM MOM_ITEM_PRICE_TMP
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND INOUT_FLAG = #{inoutFlag, jdbcType=VARCHAR}
		   AND CUD_FLAG = #{cudFlag, jdbcType=VARCHAR}
	</select>
	
	<insert id="create_materialPriceTemp" parameterType="java.util.HashMap">
		INSERT INTO MOM_ITEM_PRICE_TMP (
			DIVISION_CD,
			COMPANY_CD,
			INOUT_FLAG,
			VENDOR_CD,
			ITEM_ID,
			START_DATE,
			UNIT_PRICE,
			MARKET_CD,
			CURRENCY_CD,
			CUD_FLAG,
			USE_YN,
			DESCRIPTION,
			CREATE_DATE,
			CREATE_BY,
			UPDATE_DATE,
			UPDATE_BY
		) 
		VALUES (
			#{divisionCd, jdbcType=VARCHAR},
			#{companyCd, jdbcType=VARCHAR},
			#{inoutFlag, jdbcType=VARCHAR},
			UPPER(TRIM(#{vendorCd, jdbcType=VARCHAR})),
			UPPER(TRIM(#{itemId, jdbcType=VARCHAR})),
			TO_DATE(#{startDate, jdbcType=VARCHAR}, 'YYYY-MM-DD'),
			#{unitPrice, jdbcType=INTEGER},
			#{marketCd, jdbcType=VARCHAR},
			UPPER(TRIM(#{currencyCd, jdbcType=VARCHAR})),
			#{cudFlag, jdbcType=VARCHAR},
			NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})),'Y'),
			#{description, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{createBy, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{createBy, jdbcType=VARCHAR}
		)
	</insert>
	
	<update id="modify_materialPriceTemp" parameterType="java.util.HashMap">
		UPDATE MOM_ITEM_PRICE_TMP
		   SET UNIT_PRICE = #{unitPrice, jdbcType=INTEGER}
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		AND INOUT_FLAG 	= #{inoutFlag, jdbcType=VARCHAR}
		AND VENDOR_CD	= UPPER(TRIM(#{vendorCd, jdbcType=VARCHAR}))
		AND ITEM_ID		= UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		AND TRUNC(START_DATE) = TO_DATE(#{startDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
		AND MARKET_CD	= #{marketCd, jdbcType=VARCHAR}
		AND CURRENCY_CD	= UPPER(TRIM(#{currencyCd, jdbcType=VARCHAR}))
		AND CUD_FLAG	= #{cudFlag, jdbcType=VARCHAR}		
	</update>
	
	<insert id="create_materialPrice" statementType="CALLABLE">
	{
        CALL P_ITEM_PRICE_UPSERT (
             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
           , #{inoutFlag, mode=IN, jdbcType=VARCHAR}
           , #{cudFlag, mode=IN, jdbcType=VARCHAR}
        )
    }
	</insert>
	
</mapper>