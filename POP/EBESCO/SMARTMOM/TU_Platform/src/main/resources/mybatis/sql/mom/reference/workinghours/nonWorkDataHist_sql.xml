<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.workinghours.nonWorkDataHist">
	<select id="get_nonWorkDataHist_list" resultType="camelMap" parameterType="java.util.HashMap">
	WITH TEMP1 AS (
		SELECT TO_CHAR(A.WORK_DATE, 'YYYY-MM-DD') AS WORK_DATE
		     , A.RESOURCE_CD
		     , A.RESOURCE_CD AS RESOURCE_CD_DISP
		     , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_NAME(A.DIVISION_CD, A.COMPANY_CD, A.RESOURCE_CD) FROM DUAL) AS RESOURCE_NAME
		     , A.NON_CLASS_ID
		     , A.NON_CLASS_ID AS NON_CLASS_ID_DISP
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'NON_WORK_CLASS', A.NON_CLASS_ID) FROM DUAL) AS NON_CLASS_NAME
		     , A.NON_WORK_CD
		     , A.NON_WORK_CD AS NON_WORK_CODE_DISP
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'NON_WORK_CODE', A.NON_WORK_CD) FROM DUAL) AS NON_WORK_NAME
		     , A.NON_TYPE
		     , A.NON_TYPE AS NON_TYPE_DISP
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'NON_WORK_TYPE', A.NON_TYPE) FROM DUAL) AS NON_WORK_TYPE_NAME
		     , A.NON_OPERATION_TYPE
		     , A.NON_OPERATION_TYPE AS NON_OPERATION_TYPE_DISP
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'NON_OPERATION_TYPE', A.NON_OPERATION_TYPE) FROM DUAL) AS NON_OPERATION_TYPE_NAME
		     , SUBSTR(A.START_TIME,0,4)||'-'|| SUBSTR(A.START_TIME,5,2) ||'-'|| SUBSTR(A.START_TIME,7,2) || ' ' ||
             	SUBSTR(A.START_TIME,9,2) || ':' || SUBSTR(A.START_TIME,11,2) ||  ':' || SUBSTR(A.START_TIME,13,2) AS START_TIME
		     , SUBSTR(A.END_TIME,0,4)||'-'|| SUBSTR(A.END_TIME,5,2) ||'-'|| SUBSTR(A.END_TIME,7,2) || ' ' ||
             	SUBSTR(A.END_TIME,9,2) || ':' || SUBSTR(A.END_TIME,11,2) ||  ':' || SUBSTR(A.END_TIME,13,2) AS END_TIME
		     , A.FAULT_DEPT
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'DEPT_CD', A.FAULT_DEPT) FROM DUAL) AS FAULT_DEPT_NAME
		     , A.TXN_DESC
		     , A.DESCRIPTION
		     , A.CREATE_DATE
		     , A.CREATE_BY
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(A.DIVISION_CD, A.COMPANY_CD, A.CREATE_BY) FROM DUAL) AS CREATE_NAME
		     , A.ATTACH_FILE
		     , A.WORK_ORDER_ID
		     , A.WORK_ORDER_RESULT_ID
		     , A.LOSS_TIME
		  FROM MOM_NON_WORK_DATA A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		  <if test="sNonWorkDate != null and sNonWorkDate != ''">
           AND A.WORK_DATE = TO_DATE(#{sNonWorkDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
          </if>
          <if test="sNonWorkResource != null and sNonWorkResource != ''">
           AND A.RESOURCE_CD = #{sNonWorkResource, jdbcType=VARCHAR}
          </if>
          <if test="sNonWorkClassId != null and sNonWorkClassId != ''">
           AND A.NON_CLASS_ID = #{sNonWorkClassId, jdbcType=VARCHAR}
          </if>
          <if test="sNonWorkCode != null and sNonWorkCode != ''">
           AND A.NON_WORK_CD = #{sNonWorkCode, jdbcType=VARCHAR}
          </if>
          <if test="sNonWorkType != null and sNonWorkType != ''">
           AND A.NON_TYPE = #{sNonWorkType, jdbcType=VARCHAR}
          </if>
          <if test="sNonOperationType != null and sNonOperationType != ''">
           AND A.NON_OPERATION_TYPE = #{sNonOperationType, jdbcType=VARCHAR}
          </if>
		 ORDER BY A.WORK_DATE, A.RESOURCE_CD )
     SELECT A.*
          , B.ROW_COUNT
     FROM (SELECT A.*
                , ROWNUM GRIDROW
             FROM TEMP1 A) A
        , (SELECT COUNT(*) ROW_COUNT
             FROM TEMP1) B 
    <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
     WHERE GRIDROW BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
    </if>
	</select>
	
	<select id="get_nonWorkCode_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT DISTINCT NON_WORK_CD AS CODE
		     , NON_WORK_CD_NAME AS NAME
		  FROM MOM_NON_WORK
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NON_CLASS_ID = #{nonClassId, jdbcType=VARCHAR}
	</select>
	
	<select id="get_nonWorkType_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT DISTINCT NON_TYPE AS CODE
     		 , NON_TYPE_NAME AS NAME
		  FROM MOM_NON_WORK
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NON_CLASS_ID = #{nonClassId, jdbcType=VARCHAR}
		   AND NON_WORK_CD = #{nonWorkCd, jdbcType=VARCHAR}
	</select>
	
	<select id="get_nonWorkOperationType_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT DISTINCT NON_OPERATION_TYPE AS CODE
     		 , NON_OPERATION_TYPE_NAME AS NAME
		  FROM MOM_NON_WORK
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND NON_CLASS_ID = #{nonClassId, jdbcType=VARCHAR}
		   AND NON_WORK_CD = #{nonWorkCd, jdbcType=VARCHAR}
		   AND NON_TYPE = #{nonType, jdbcType=VARCHAR}
	</select>
	
	<insert id="create_nonWorkDataHist" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
		INSERT INTO MOM_NON_WORK_DATA (
	    	DIVISION_CD
		  , COMPANY_CD
		  , WORK_DATE
		  , RESOURCE_CD
		  , NON_CLASS_ID
		  , NON_WORK_CD
		  , NON_TYPE
		  , NON_OPERATION_TYPE
		  , START_TIME
		  , END_TIME
		  , FAULT_DEPT
		  , TXN_DESC
		  , DESCRIPTION
		  , CREATE_DATE
		  , CREATE_BY
		  , UPDATE_DATE
		  , UPDATE_BY
		  , ATTACH_FILE
		  , WORK_ORDER_ID
		  , WORK_ORDER_RESULT_ID
		  , LOSS_TIME
			)
			VALUES (
			#{divisionCd, jdbcType=VARCHAR},
			#{companyCd, jdbcType=VARCHAR},
			TO_DATE(#{workDate, jdbcType=VARCHAR}, 'YYYY-MM-DD'),
			UPPER(TRIM(#{resourceCd, jdbcType=VARCHAR})),
			UPPER(TRIM(#{nonClassId, jdbcType=VARCHAR})),
			UPPER(TRIM(#{nonWorkCd, jdbcType=VARCHAR})),
			UPPER(TRIM(#{nonType, jdbcType=VARCHAR})),
			UPPER(TRIM(#{nonOperationType, jdbcType=VARCHAR})),
			#{startTime, jdbcType=VARCHAR},
			#{endTime, jdbcType=VARCHAR},
			#{faultDept, jdbcType=VARCHAR},
			#{txnDesc, jdbcType=VARCHAR},
			#{description, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{updateBy, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{updateBy, jdbcType=VARCHAR},
			#{attachFile, jdbcType=CLOB},
			UPPER(TRIM(#{workOrderId, jdbcType=VARCHAR})),
			#{workOrderResultId, jdbcType=VARCHAR},
			'10' 
		)
	   ;
	   
		INSERT INTO MOM_NON_WORK_DATA_HIST (
			   LAST_EVENT_SEQ
		     , DIVISION_CD
		  	 , COMPANY_CD
			 , CUD_FLAG
			 , WORK_DATE
			 , RESOURCE_CD
			 , NON_CLASS_ID
			 , NON_WORK_CD
			 , NON_TYPE
			 , NON_OPERATION_TYPE
			 , START_TIME
			 , END_TIME
			 , FAULT_DEPT
			 , TXN_DESC
			 , DESCRIPTION
			 , CREATE_DATE
			 , CREATE_BY
			 , UPDATE_DATE
			 , UPDATE_BY
			 , ATTACH_FILE
			 , WORK_ORDER_ID
			 , WORK_ORDER_RESULT_ID
		     , LOSS_TIME
		)
		SELECT S_SS_SEQ.NEXTVAL
			 , DIVISION_CD
			 , COMPANY_CD
			 , 'C'
			 , WORK_DATE
			 , RESOURCE_CD
			 , NON_CLASS_ID
			 , NON_WORK_CD
			 , NON_TYPE
			 , NON_OPERATION_TYPE
			 , START_TIME
			 , END_TIME
			 , FAULT_DEPT
			 , TXN_DESC
			 , DESCRIPTION
			 , CREATE_DATE
			 , CREATE_BY
			 , UPDATE_DATE
			 , UPDATE_BY
			 , ATTACH_FILE
			 , WORK_ORDER_ID
			 , WORK_ORDER_RESULT_ID
		     , LOSS_TIME
		 FROM MOM_NON_WORK_DATA
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		  AND START_TIME = #{startTime, jdbcType=VARCHAR}
	  ;
	  
		SELECT
			CASE 
				WHEN COUNT(NON_CLASS_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		  FROM MOM_NON_WORK_DATA
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		   AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		   AND START_TIME = #{startTime, jdbcType=VARCHAR}
		;
	 END
	}
	</insert>	
	
	<update id="modify_nonWorkDataHist" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
	  UPDATE MOM_NON_WORK_DATA
		 SET FAULT_DEPT = #{faultDept, jdbcType=VARCHAR},
		     TXN_DESC = #{txnDesc, jdbcType=VARCHAR},
			 DESCRIPTION =  #{description, jdbcType=VARCHAR},
			 ATTACH_FILE = #{attachFile, jdbcType=CLOB},
			 WORK_ORDER_ID = UPPER(TRIM(#{workOrderId, jdbcType=VARCHAR})),
			 WORK_ORDER_RESULT_ID = #{workOrderResultId, jdbcType=VARCHAR}
	   WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		 AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		 AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		 AND START_TIME = #{startTime, jdbcType=VARCHAR}
	  ;
	  
	  INSERT INTO MOM_NON_WORK_DATA_HIST (
			   LAST_EVENT_SEQ
		     , DIVISION_CD
		  	 , COMPANY_CD
			 , CUD_FLAG
			 , WORK_DATE
			 , RESOURCE_CD
			 , NON_CLASS_ID
			 , NON_WORK_CD
			 , NON_TYPE
			 , NON_OPERATION_TYPE
			 , START_TIME
			 , END_TIME
			 , FAULT_DEPT
			 , TXN_DESC
			 , DESCRIPTION
			 , CREATE_DATE
			 , CREATE_BY
			 , UPDATE_DATE
			 , UPDATE_BY
			 , ATTACH_FILE
			 , WORK_ORDER_ID
			 , WORK_ORDER_RESULT_ID
		     , LOSS_TIME
		)
		SELECT S_SS_SEQ.NEXTVAL
			 , DIVISION_CD
			 , COMPANY_CD
			 , 'U'
			 , WORK_DATE
			 , RESOURCE_CD
			 , NON_CLASS_ID
			 , NON_WORK_CD
			 , NON_TYPE
			 , NON_OPERATION_TYPE
			 , START_TIME
			 , END_TIME
			 , FAULT_DEPT
			 , TXN_DESC
			 , DESCRIPTION
			 , CREATE_DATE
			 , CREATE_BY
			 , UPDATE_DATE
			 , UPDATE_BY
			 , ATTACH_FILE
			 , WORK_ORDER_ID
			 , WORK_ORDER_RESULT_ID
		     , LOSS_TIME
		 FROM MOM_NON_WORK_DATA
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		  AND START_TIME = #{startTime, jdbcType=VARCHAR}
	  ;
	  	
	  SELECT
		  CASE 
			  WHEN COUNT(NON_CLASS_ID) = 0 THEN 'E'
			  ELSE 'S' 
		  END  
		  INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_NON_WORK_DATA
	   WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		 AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		 AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		 AND START_TIME = #{startTime, jdbcType=VARCHAR}
	  ;
	  END
	}	
	</update>
	
	<delete id="remove_nonWorkDataHist" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
	  INSERT INTO MOM_NON_WORK_DATA_HIST (
			   LAST_EVENT_SEQ
		     , DIVISION_CD
		  	 , COMPANY_CD
			 , CUD_FLAG
			 , WORK_DATE
			 , RESOURCE_CD
			 , NON_CLASS_ID
			 , NON_WORK_CD
			 , NON_TYPE
			 , NON_OPERATION_TYPE
			 , START_TIME
			 , END_TIME
			 , FAULT_DEPT
			 , TXN_DESC
			 , DESCRIPTION
			 , CREATE_DATE
			 , CREATE_BY
			 , UPDATE_DATE
			 , UPDATE_BY
			 , ATTACH_FILE
			 , WORK_ORDER_ID
			 , WORK_ORDER_RESULT_ID
		     , LOSS_TIME
		)
		SELECT S_SS_SEQ.NEXTVAL
			 , DIVISION_CD
			 , COMPANY_CD
			 , 'D'
			 , WORK_DATE
			 , RESOURCE_CD
			 , NON_CLASS_ID
			 , NON_WORK_CD
			 , NON_TYPE
			 , NON_OPERATION_TYPE
			 , START_TIME
			 , END_TIME
			 , FAULT_DEPT
			 , TXN_DESC
			 , 'Delete Data'
			 , CREATE_DATE
			 , CREATE_BY
			 , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			 , #{updateBy, jdbcType=VARCHAR}
			 , ATTACH_FILE
			 , WORK_ORDER_ID
			 , WORK_ORDER_RESULT_ID
		     , LOSS_TIME
		 FROM MOM_NON_WORK_DATA
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		  AND START_TIME = #{startTime, jdbcType=VARCHAR}
	  ;
	   
	  DELETE FROM MOM_NON_WORK_DATA
	   WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		 AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		 AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		 AND START_TIME = #{startTime, jdbcType=VARCHAR}
	  ;
	  	
		SELECT
			CASE 
				WHEN COUNT(NON_CLASS_ID) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		  FROM MOM_NON_WORK_DATA
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		   AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		   AND START_TIME = #{startTime, jdbcType=VARCHAR}
		;
	 END
	}
	</delete>
	
</mapper>
