<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.addition.dashboardDisplay">
	<select id="get_statusBoard1_list" resultType="camelMap" parameterType="java.util.HashMap">
		WITH C_DAY AS ( SELECT SUM(B.DAY_PLAN_QTY) AS DAY_PLAN_QTY
		                     , SUM(B.DAY_OUTPUT)   AS DAY_OUTPUT_QTY
		                     , CASE WHEN SUM (B.BAD_QTY) = 0 THEN '0.00%'
		                       ELSE TO_CHAR(NVL(SUM(B.BAD_QTY)/NULLIF(SUM(B.DAY_OUTPUT), 0),0), '90.99') || '%'
		                       END   AS DAY_NG
		                     , MIN (RESOURCE_CD) AS RESOURCE_CD
		                     , MIN (RESOURCE_NAME) AS RESOURCE_NAME
		                FROM   (SELECT NVL(A.CONFIRM_QTY - NVL(PAST_GOOD_QTY, 0),0) AS DAY_PLAN_QTY
		                             , A.CURR_GOOD_QTY                              AS DAY_OUTPUT
		                             , A.BAD_QTY
		                             , A.RESOURCE_CD
		                             , A.RESOURCE_NAME
		                        FROM   (SELECT (SELECT MOM_COMMON_PKG.FN_GET_PAST_RESULT_QTY( WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, P.CURRENT_DATE)
		                                         FROM   DUAL)  AS PAST_GOOD_QTY
		                                      , (SELECT MOM_COMMON_PKG.FN_GET_RESULT_QTY( WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, P.CURRENT_DATE)
		                                         FROM   DUAL)    AS CURR_GOOD_QTY
		                                      , (SELECT MOM_COMMON_PKG.FN_GET_BAD_QTY( WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, P.CURRENT_DATE)
		                                         FROM   DUAL) AS BAD_QTY
		                                      , WO.CONFIRM_QTY
		                                      , P.RESOURCE_CD
		                                      , P.RESOURCE_NAME
		                                FROM   (SELECT P.DIVISION_CD  
		                                             , P.COMPANY_CD
		                                             , R.RESOURCE_CD
		                                             , R.RESOURCE_NAME
		                                             , (SELECT TRUNC(MOM_COMMON_PKG.FN_GET_CURRENT_DATE( P.DIVISION_CD, P.COMPANY_CD)) FROM DUAL) AS CURRENT_DATE
		                                        FROM   MOM_PARAMETER P
		                                             , MOM_RESOURCE R
					                            WHERE P.DIVISION_CD = R.DIVISION_CD
					                            AND   P.COMPANY_CD  = R.COMPANY_CD
							                    AND   P.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		                                        AND   P.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR} 
		                                        AND   R.RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR} ) P
		                                     ,  MOM_WORK_ORDER WO
		                                WHERE   P.DIVISION_CD = WO.DIVISION_CD(+)
		                                AND     P.COMPANY_CD  = WO.COMPANY_CD(+)
		                                AND     P.RESOURCE_CD = WO.RESOURCE_CD(+)
		                                AND     WO.WO_STATE(+)    <![CDATA[<>]]> 'C'     
		                                AND     P.CURRENT_DATE BETWEEN WO.PLAN_START_TIME(+) AND WO.PLAN_END_TIME(+))  A) B)
		SELECT C.DAY_PLAN_QTY
		     , C.DAY_OUTPUT_QTY
		     , C.DAY_NG
		     , TO_CHAR(NVL((C.DAY_OUTPUT_QTY / NULLIF(C.DAY_PLAN_QTY,0)),0) * 100, '900.99') || '%' AS DAY_PROGRESS
		     , WO.PART_NO
		     , WO.MODEL
		     , WO.DESCRIPTION
		     , WO.WORK_ORDER
		     , WO.PLAN_QTY      AS PLAN_QTY
		     , WO.OUTPUT_QTY    AS OUTPUT_QTY
		     , CASE WHEN WO.OUTPUT_QTY / WO.PLAN_QTY = 1 THEN '100' || '%'
		       ELSE TO_CHAR(NVL((WO.OUTPUT_QTY / NULLIF(WO.PLAN_QTY,0)),0) * 100, '90.9') || '%'
		       END   AS PROGRESS
		     , CASE WHEN WO.BAD_QTY = 0 THEN '0.00%'
		       ELSE TO_CHAR(NVL(WO.BAD_QTY / NULLIF(WO.OUTPUT_QTY, 0),0), '90.99') || '%'  
		       END   AS NG_RATE
		     , WO.WO_STATE
		     , C.RESOURCE_CD
		     , WO.WORK_ORDER_ID
		     , WO.TARGET_QTY AS CURR_TARGET
		     , C.RESOURCE_NAME
		FROM   C_DAY C
		     , (SELECT MWO.PART_NO
		             , MWO.MODEL
		             , MWO.DESCRIPTION
		             , MWO.WORK_ORDER
		             , MWO.CONFIRM_QTY
		             , PAST_GOOD_QTY
		             , MWO.CONFIRM_QTY - MWO.PAST_GOOD_QTY AS PLAN_QTY
		             , MWO.WO_STATE
		             , MWO.WORK_ORDER_ID
		             , MWO.OUTPUT_QTY
		             , MWO.RESULT_TIME
		             , TACT_TIME
		             , ROUND(NVL(3600/(MWO.RESULT_TIME/NULLIF(MWO.OUTPUT_QTY, 0)),0))|| ' / '|| ROUND(NVL((3600 / NULLIF(MWO.TACT_TIME, 0)),0)) AS TARGET_QTY
		             , MWO.RESOURCE_CD
		             , MWO.BAD_QTY
		        FROM (SELECT WO.ITEM_ID AS PART_NO
		                   , WD.ITEM_GROUP_CODE AS MODEL
		                   , WD.LABELDESC AS DESCRIPTION
		                   , WO.PRODUCT_ORDER_ID AS WORK_ORDER
		                   , WO.CONFIRM_QTY
		                   , (SELECT MOM_COMMON_PKG.FN_GET_PAST_RESULT_QTY(WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, A.CURRENT_DATE)
		                      FROM   DUAL) AS PAST_GOOD_QTY
		                   , WO.WO_STATE
		                   , WO.RESOURCE_CD
		                   , WO.WORK_ORDER_ID
		                   , (SELECT MOM_COMMON_PKG.FN_GET_RESULT_QTY(WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, A.CURRENT_DATE)
		                      FROM   DUAL) AS OUTPUT_QTY
		                   , (SELECT MOM_COMMON_PKG.FN_GET_RESULT_QTY_TIME(WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, A.CURRENT_DATE)
		                      FROM   DUAL) AS RESULT_TIME
		                   , (SELECT MOM_COMMON_PKG.FN_GET_TACT_TIME(WO.DIVISION_CD, WO.COMPANY_CD, WO.ITEM_ID, WO.RESOURCE_CD)
		                      FROM   DUAL) AS TACT_TIME
		                   , (SELECT MOM_COMMON_PKG.FN_GET_BAD_QTY(WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, A.CURRENT_DATE)
		                      FROM   DUAL) AS BAD_QTY
		              FROM   (SELECT P.DIVISION_CD  
		                           , P.COMPANY_CD
		                           , R.RESOURCE_CD
		                           , (SELECT TRUNC(MOM_COMMON_PKG.FN_GET_CURRENT_DATE( P.DIVISION_CD, P.COMPANY_CD)) FROM DUAL) AS CURRENT_DATE
		                      FROM   MOM_PARAMETER P
		                           , MOM_RESOURCE R
                             WHERE P.DIVISION_CD = R.DIVISION_CD
                             AND   P.COMPANY_CD  = R.COMPANY_CD
		                     AND   P.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                             AND   P.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR} 
                             AND   R.RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR} 
		                      ) A
		                   , MOM_WORK_ORDER WO
		                   , MOM_ITEM_DEFINITION WD
		              WHERE  WO.DIVISION_CD     = A.DIVISION_CD
		              AND    WO.COMPANY_CD      = A.COMPANY_CD
		              AND    WO.RESOURCE_CD     = A.RESOURCE_CD
		              AND    WO.PLAN_START_TIME = A.CURRENT_DATE
		              AND    WO.WO_STATE        = 'R'
		              AND    WO.DIVISION_CD     = WD.DIVISION_CD
		              AND    WO.COMPANY_CD      = WD.COMPANY_CD
		              AND    WO.ITEM_ID         = WD.ITEM_ID
		              AND    ROWNUM             = 1) MWO
		        WHERE MWO.CONFIRM_QTY - MWO.PAST_GOOD_QTY > 0) WO
		WHERE  C.RESOURCE_CD = WO.RESOURCE_CD(+)   
	</select>
	
	<select id="get_statusBoard2_list" resultType="camelMap" parameterType="java.util.HashMap">
	WITH R_RES AS ( SELECT MUR.DIVISION_CD
		                     , MUR.COMPANY_CD
		                     , MUR.RESOURCE_CD
		                     , MUR.SEQ
		                     , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_NAME( MUR.DIVISION_CD, MUR.COMPANY_CD, MUR.RESOURCE_CD)
		                        FROM DUAL)     AS RESOURCE_NAME
		                     , (SELECT TRUNC(MOM_COMMON_PKG.FN_GET_CURRENT_DATE( MUR.DIVISION_CD, MUR.COMPANY_CD)) FROM DUAL) AS CURRENT_DATE
		                FROM   MOM_USER_RESOURCE MUR
		                WHERE  MUR.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		                AND    MUR.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		                AND    MUR.MENU_ID     = 'MOMKA001_2'
		                AND    MUR.BOARD_TYPE  = #{boardType, jdbcType=VARCHAR}
		                ORDER BY SEQ)
		SELECT A.RESOURCE_NAME
		     , A.RESOURCE_CD
		     , A.MODEL
		     , A.CONFIRM_QTY
		     , (A.CONFIRM_QTY - A.PAST_GOOD_QTY) AS ORDER_QTY
		     , ROUND(NVL((3600 / NULLIF(A.TACT_TIME, 0)),0)) AS TARGET_QTY
		     , ROUND(NVL(3600/ NULLIF(( A.RESULT_TIME/ NULLIF(A.CURR_GOOD_QTY, 0)), 0),0)) AS CUR_TARGET_QTY
		     , A.CURR_GOOD_QTY      AS OK_QTY
		     , A.BAD_QTY            AS NG_QTY
		     , 0                    AS NON_OPE_QTY
		     , TO_CHAR(A.CURR_GOOD_QTY / NULLIF((A.CONFIRM_QTY - A.PAST_GOOD_QTY), 0), '90.9')|| '%' AS PLAN_RATE
		     , TO_CHAR(ROUND((A.CURR_GOOD_QTY * A.TACT_TIME))/ NULLIF(ROUND(((A.CONFIRM_QTY - A.PAST_GOOD_QTY) * A.TACT_TIME)), 0), '90.9')|| '%' AS TARGET_RATE
		     , TO_CHAR((A.BAD_QTY / NULLIF((A.CURR_GOOD_QTY + A.BAD_QTY), 0)), '90.9') || '%' AS NG_RATE
		     , A.SEQ
		     , '' AS NON_WORK_TYPE
		     , '' AS NON_WORK_NAME
		FROM   (SELECT (SELECT MOM_COMMON_PKG.FN_GET_TACT_TIME(WO.DIVISION_CD, WO.COMPANY_CD, WO.ITEM_ID, WO.RESOURCE_CD)
		                FROM   DUAL)   AS TACT_TIME
		             , D.ITEM_GROUP_CODE AS MODEL
		             , R.RESOURCE_CD
		             , (SELECT MOM_COMMON_PKG.FN_GET_PAST_RESULT_QTY(WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, R.CURRENT_DATE)
		                FROM   DUAL)  AS PAST_GOOD_QTY
		             , (SELECT MOM_COMMON_PKG.FN_GET_RESULT_QTY(WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, R.CURRENT_DATE)
		                FROM   DUAL)  AS CURR_GOOD_QTY
		             , (SELECT MOM_COMMON_PKG.FN_GET_BAD_QTY(WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, R.CURRENT_DATE)
		                FROM DUAL)    AS BAD_QTY
		             , (SELECT MOM_COMMON_PKG.FN_GET_RESULT_QTY_TIME(WO.DIVISION_CD, WO.COMPANY_CD, WO.WORK_ORDER_ID, R.CURRENT_DATE)
		                FROM DUAL)    AS RESULT_TIME
		             , WO.CONFIRM_QTY
		             , R.RESOURCE_NAME
		             , R.SEQ
		        FROM   R_RES R
		             , MOM_WORK_ORDER WO
		             , MOM_ITEM_DEFINITION D
		        WHERE  R.DIVISION_CD = WO.DIVISION_CD
		        AND    R.COMPANY_CD = WO.COMPANY_CD
		        AND    R.RESOURCE_CD = WO.RESOURCE_CD
		        AND    WO.DIVISION_CD = D.DIVISION_CD
		        AND    WO.COMPANY_CD = D.COMPANY_CD
		        AND    WO.ITEM_ID = D.ITEM_ID
		        AND    WO.WO_STATE = 'R'
		        AND    TRUNC(R.CURRENT_DATE) BETWEEN TRUNC(WO.PLAN_START_TIME)
		                                     AND     TRUNC (WO.PLAN_END_TIME)
		        UNION ALL
		        SELECT 0               AS TACT_TIME
		             , ''              AS MODEL
		             , R.RESOURCE_CD   AS RESOURCE_CD
		             , 0               AS PAST_GOOD_QTY
		             , 0               AS CURR_GOOD_QTY
		             , 0               AS BAD_QTY
		             , 0               AS RESULT_TIME
		             , 0               AS CONFIRM_QTY
		             , R.RESOURCE_NAME
		             , R.SEQ
		        FROM   R_RES R
		        WHERE  NOT EXISTS (SELECT '*'
		                           FROM   MOM_WORK_ORDER MWO
		                           WHERE  MWO.DIVISION_CD = R.DIVISION_CD
		                           AND    MWO.COMPANY_CD = R.COMPANY_CD
		                           AND    MWO.RESOURCE_CD = R.RESOURCE_CD
		                           AND    MWO.WO_STATE = 'R'
		                           AND    TRUNC(R.CURRENT_DATE) BETWEEN TRUNC(MWO.PLAN_START_TIME)
		                                                        AND     TRUNC(MWO.PLAN_END_TIME))) A
		ORDER BY A.SEQ
	</select>
	
	<select id="get_statusBoard3_list" resultType="camelMap" parameterType="java.util.HashMap">
	    WITH R_RES AS ( SELECT MUR.DIVISION_CD
		                     , MUR.COMPANY_CD
		                     , MUR.RESOURCE_CD
		                     , MUR.SEQ
		                     , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_NAME( MUR.DIVISION_CD
		                                                                  , MUR.COMPANY_CD
		                                                                  , MUR.RESOURCE_CD)
		                        FROM DUAL)  AS RESOURCE_NAME
		                     , TRUNC(MOM_COMMON_PKG.FN_GET_CURRENT_DATE(MUR.DIVISION_CD, MUR.COMPANY_CD)) AS CURRENT_DATE
		                FROM   MOM_USER_RESOURCE MUR
		                WHERE  MUR.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		                AND    MUR.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		                AND    MUR.MENU_ID     = 'MOMKA001_3'
		                AND    MUR.BOARD_TYPE  = #{boardType, jdbcType=VARCHAR}
		         ORDER BY SEQ)
		SELECT WO.RESOURCE_CD AS RESOURCE_CD
		     , MIN(WO.RESOURCE_NAME) AS RESOURCE_NAME
		     , SUM(WO.DAY_PLAN_QTY) AS DAY_PLAN_QTY
		     , SUM(WO.CURR_GOOD_QTY) AS CURR_GOOD_QTY
		     , SUM(WO.TARGET_QTY) AS TARGET_QTY
		     , TO_CHAR(ROUND((SUM(WO.CURR_GOOD_QTY)/DECODE(SUM(WO.TARGET_QTY), 0, NULL, SUM(WO.TARGET_QTY)))* 100))      AS ACHIEVE_RATE
		     , TO_CHAR(ROUND((SUM(WO.CURR_GOOD_QTY)/DECODE(SUM(WO.DAY_PLAN_QTY), 0, NULL, SUM (WO.DAY_PLAN_QTY)))* 100)) AS PROGRESS_RATE
		     , (SELECT MOM_COMMON_PKG.FN_GET_NON_WORK_STOP_CNT(WO.DIVISION_CD, WO.COMPANY_CD, WO.CURRENT_DATE, WO.RESOURCE_CD)
		       FROM   DUAL )     AS STOP_CNT
		FROM ( SELECT A.RESOURCE_CD
		            , MIN(A.RESOURCE_NAME) AS RESOURCE_NAME
		            , A.WORK_ORDER_ID
		            , SUM(A.CONFIRM_QTY - PAST_GOOD_QTY) AS DAY_PLAN_QTY
		            , SUM(CURR_GOOD_QTY) AS CURR_GOOD_QTY
		            , MIN(ROUND( A.CURR_GOOD_QTY / DECODE (TACT_TIME, 0, NULL, TACT_TIME))) AS TARGET_QTY
		            , A.SEQ
		            , A.DIVISION_CD
		            , A.COMPANY_CD
		            , A.CURRENT_DATE
		       FROM ( SELECT R.RESOURCE_CD
		                   , MIN(R.RESOURCE_NAME)  AS RESOURCE_NAME
		                   , WO.WORK_ORDER_ID
		                   , (SELECT MOM_COMMON_PKG.FN_GET_PAST_RESULT_QTY(R.DIVISION_CD, R.COMPANY_CD, WO.WORK_ORDER_ID, R.CURRENT_DATE) 
		                      FROM   DUAL)  AS PAST_GOOD_QTY
		                   , (SELECT MOM_COMMON_PKG.FN_GET_RESULT_QTY(R.DIVISION_CD, R.COMPANY_CD, WO.WORK_ORDER_ID, R.CURRENT_DATE)
		                      FROM   DUAL)  AS CURR_GOOD_QTY
		                   , (SELECT MOM_COMMON_PKG.FN_GET_RESULT_QTY_TIME(R.DIVISION_CD, R.COMPANY_CD, WO.WORK_ORDER_ID, R.CURRENT_DATE)
		                      FROM   DUAL)  AS CURR_RESULT_TIME
		                   , MIN (WO.CONFIRM_QTY) AS CONFIRM_QTY
		                   , (SELECT MOM_COMMON_PKG.FN_GET_TACT_TIME(R.DIVISION_CD, R.COMPANY_CD, WO.ITEM_ID, R.RESOURCE_CD)
		                      FROM DUAL)    AS TACT_TIME
		                   , R.DIVISION_CD
		                   , R.COMPANY_CD  
		                   , R.SEQ  
		                   , R.CURRENT_DATE 
		              FROM   R_RES R
		                   , MOM_WORK_ORDER WO
		              WHERE  WO.DIVISION_CD(+) = R.DIVISION_CD
		              AND    WO.COMPANY_CD(+) = R.COMPANY_CD
		              AND    WO.RESOURCE_CD(+) = R.RESOURCE_CD
		              AND    WO.WO_STATE(+) <![CDATA[<>]]> 'C'
		              AND    TRUNC(R.CURRENT_DATE) BETWEEN TRUNC(WO.PLAN_START_TIME(+))
		                                           AND     TRUNC(WO.PLAN_END_TIME(+))
		              GROUP BY R.DIVISION_CD
		                     , R.COMPANY_CD
		                     , R.RESOURCE_CD
		                     , WO.ITEM_ID
		                     , WO.WORK_ORDER_ID
		                     , R.CURRENT_DATE
		                     , R.SEQ) A
		       GROUP BY A.SEQ, A.RESOURCE_CD, A.WORK_ORDER_ID , A.DIVISION_CD, A.COMPANY_CD, A.CURRENT_DATE) WO
		GROUP BY WO.SEQ, WO.RESOURCE_CD, WO.DIVISION_CD, WO.COMPANY_CD, WO.CURRENT_DATE
		ORDER BY WO.SEQ
	</select>
	
	<select id="get_statusBoard4_list" resultType="camelMap" parameterType="java.util.HashMap">
	WITH H_DATA AS (SELECT A.UPDATE_DATE AS S1_H
			             , NULL AS S2_H
			             , NULL AS S3_H
			             , NULL AS S4_H
			             , DIVISION_CD
                         , COMPANY_CD
			          FROM TU_OPC_S1 A
			         WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			           AND A.SCENARIO_TYPE = 'S1_H'
			         UNION ALL
			SELECT NULL AS S1_H
			             , A.UPDATE_DATE AS S2_H
			             , NULL AS S3_H
			             , NULL AS S4_H
			             , DIVISION_CD
                         , COMPANY_CD
			          FROM TU_OPC_S2 A
			         WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			           AND A.SCENARIO_TYPE = 'S2_H'
			         UNION ALL
			SELECT NULL AS S1_H
			             , NULL AS S2_H
			             , A.UPDATE_DATE AS S3_H
			             , NULL AS S4_H
			             , DIVISION_CD
                         , COMPANY_CD
			          FROM TU_OPC_S3 A
			         WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			           AND A.SCENARIO_TYPE = 'S3_H'
			         UNION ALL
			SELECT NULL AS S1_H
			             , NULL AS S2_H
			             , NULL AS S3_H
			             , A.UPDATE_DATE AS S4_H
			             , DIVISION_CD
                         , COMPANY_CD
			          FROM TU_OPC_S4 A
			         WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			           AND A.SCENARIO_TYPE = 'S4_H')
			     , R_DATE AS (
			        SELECT DECODE (SCENARIO_TYPE, 'S1_R1', A.UPDATE_DATE, '') AS S1_R1
			             , DECODE (SCENARIO_TYPE, 'S1_R2', A.UPDATE_DATE, '') AS S1_R2
			             , DECODE (SCENARIO_TYPE, 'S1_R3', A.UPDATE_DATE, '') AS S1_R3
			             , DECODE (SCENARIO_TYPE, 'S1_R4', A.UPDATE_DATE, '') AS S1_R4
			             , DECODE (SCENARIO_TYPE, 'S1_R5', A.UPDATE_DATE, '') AS S1_R5
			             , NULL AS S2_U
			             , NULL AS S3_U
			             , NULL AS S4_U
			          FROM TU_OPC_S1 A
			         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			           AND SCENARIO_TYPE IN ('S1_R1'
			                     , 'S1_R2'
			                     , 'S1_R3'
			                     , 'S1_R4'
			                     , 'S1_R5')
			         UNION ALL
			        SELECT NULL AS S1_R1
			             , NULL AS S1_R2
			             , NULL AS S1_R3
			             , NULL AS S1_R4
			             , NULL AS S1_R5
			             , DECODE (SCENARIO_TYPE, 'S2_U', A.UPDATE_DATE, '') AS S2_U
			             , NULL AS S3_U
			             , NULL AS S4_U
			          FROM TU_OPC_S2 A
			         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			           AND SCENARIO_TYPE IN ('S2_U')
			         UNION ALL
			        SELECT NULL AS S1_R1
			             , NULL AS S1_R2
			             , NULL AS S1_R3
			             , NULL AS S1_R4
			             , NULL AS S1_R5
			             , NULL AS S2_U
			             , DECODE (SCENARIO_TYPE, 'S3_U', A.UPDATE_DATE, '') AS S3_U
			             , NULL AS S4_U
			          FROM TU_OPC_S3 A
			         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			           AND SCENARIO_TYPE IN ('S3_U')
			         UNION ALL
			        SELECT NULL AS S1_R1
			             , NULL AS S1_R2
			             , NULL AS S1_R3
			             , NULL AS S1_R4
			             , NULL AS S1_R5
			             , NULL AS S2_U
			             , NULL AS S3_U
			             , DECODE (SCENARIO_TYPE, 'S4_U', A.UPDATE_DATE, '') AS S4_U
			          FROM TU_OPC_S4 A
			         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			           AND SCENARIO_TYPE IN ('S4_U'))
			     , A_DATA AS (
			        SELECT CASE  WHEN TO_NUMBER (ALARM_CODE) BETWEEN 111 AND 120 THEN ALARM_NAME
		                         ELSE NULL
		                       END A1
			             , CASE  WHEN TO_NUMBER (ALARM_CODE) BETWEEN 121 AND 130 THEN ALARM_NAME
		                         ELSE NULL
		                       END A2
			             , CASE  WHEN TO_NUMBER (ALARM_CODE) BETWEEN 131 AND 140 THEN ALARM_NAME
		                         ELSE NULL
		                       END A3
			             , CASE  WHEN TO_NUMBER (ALARM_CODE) BETWEEN 141 AND 150 THEN ALARM_NAME
		                         ELSE NULL
		                       END A4
		                 , DIVISION_CD
                         , COMPANY_CD
			          FROM TU_ALARM
			         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR} )
			SELECT CASE
			         WHEN S1_H = 'Y' AND S1_R1 = 'Y' THEN 'GREEN'
			         WHEN S1_H = 'Y' AND S1_R1 = 'N' THEN 'YELLOW'
			         ELSE 'RED'
			       END AS S1_R1
			     , CASE
			         WHEN S1_H = 'Y' AND S1_R2 = 'Y' THEN 'GREEN'
			         WHEN S1_H = 'Y' AND S1_R2 = 'N' THEN 'YELLOW'
			         ELSE 'RED'
			       END AS S1_R2
			     , CASE
			         WHEN S1_H = 'Y' AND S1_R3 = 'Y' THEN 'GREEN'
			         WHEN S1_H = 'Y' AND S1_R3 = 'N' THEN 'YELLOW'
			         ELSE 'RED'
			       END AS S1_R3
			     , CASE
			         WHEN S1_H = 'Y' AND S1_R4 = 'Y' THEN 'GREEN'
			         WHEN S1_H = 'Y' AND S1_R4 = 'N' THEN 'YELLOW'
			         ELSE 'RED'
			       END AS S1_R4
			     , CASE
			         WHEN S1_H = 'Y' AND S1_R5 = 'Y' THEN 'GREEN'
			         WHEN S1_H = 'Y' AND S1_R5 = 'N' THEN 'YELLOW'
			         ELSE 'RED'
			       END AS S1_R5
			     , CASE
			         WHEN S2_H = 'Y' AND S2_U = 'Y' THEN 'GREEN'
			         WHEN S2_H = 'Y' AND S2_U = 'N' THEN 'YELLOW'
			         ELSE 'RED'
			       END AS S2
			     , CASE
			         WHEN S3_H = 'Y' AND S3_U = 'Y' THEN 'GREEN'
			         WHEN S3_H = 'Y' AND S3_U = 'N' THEN 'YELLOW'
			         ELSE 'RED'
			       END AS S3
			     , CASE
			         WHEN S4_H = 'Y' AND S4_U = 'Y' THEN 'GREEN'
			         WHEN S4_H = 'Y' AND S4_U = 'N' THEN 'YELLOW'
			         ELSE 'RED'
			       END AS S4
			     , A1
			     , A2
			     , A3
			     , A4
			  FROM (SELECT CASE
		                         WHEN MAX (S1_H) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S1_H
			             , CASE
		                         WHEN MAX (S1_R1) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S1_R1
			             , CASE
		                         WHEN MAX (S1_R2) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S1_R2
			             , CASE
		                         WHEN MAX (S1_R3) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S1_R3
			             , CASE
		                         WHEN MAX (S1_R4) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S1_R4
			             , CASE
		                         WHEN MAX (S1_R5) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S1_R5
			             , CASE
		                         WHEN MAX (S2_H) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S2_H
			             , CASE
		                         WHEN MAX (S2_U) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S2_U
			             , CASE
		                         WHEN MAX (S3_H) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S3_H
			             , CASE
		                         WHEN MAX (S3_U) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S3_U
			             , CASE
		                         WHEN MAX (S4_H) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S4_H
			             , CASE
		                         WHEN MAX (S4_U) BETWEEN MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) - 5 / 24 / 60 AND MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}) THEN 'Y'
		                         ELSE 'N'
		                       END AS S4_U
			             , MAX (A1) AS A1
			             , MAX (A2) AS A2
			             , MAX (A3) AS A3
			             , MAX (A4) AS A4
			          FROM H_DATA AA
			             , R_DATE BB
			             , A_DATA CC
			         WHERE 1 = 1
			           AND AA.DIVISION_CD = CC.DIVISION_CD(+)
                       AND AA.COMPANY_CD= CC.COMPANY_CD(+))
			 WHERE 1 = 1
	</select>
	
	<select id="get_dashboardUserResource_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT R.MENU_ID  
			 , R.BOARD_TYPE
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(R.DIVISION_CD, R.COMPANY_CD, 'DASHBOARD_TYPE', R.BOARD_TYPE) FROM DUAL) AS BOARD_TYPE_NAME
		     , R.RESOURCE_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_NAME(R.DIVISION_CD, R.COMPANY_CD, R.RESOURCE_CD)
		        FROM   DUAL )  AS RESOURCE_NAME
		     , R.SEQ    
		FROM   MOM_USER_RESOURCE R
		WHERE  R.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    R.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		AND    R.MENU_ID = #{menuId, jdbcType=VARCHAR}
		ORDER BY R.BOARD_TYPE, R.SEQ
	</select>
	
	<delete id="remove_dashboardUserResource" parameterType="java.util.HashMap">
		DELETE FROM MOM_USER_RESOURCE
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND MENU_ID = #{menuId, jdbcType=VARCHAR}
		   AND BOARD_TYPE = #{boardType, jdbcType=VARCHAR}
		   AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
	</delete>
	
	<insert id="create_dashboardUserResource" parameterType="java.util.HashMap">
		INSERT INTO MOM_USER_RESOURCE
		(
			DIVISION_CD,
			COMPANY_CD,
			MENU_ID,
			BOARD_TYPE,
			RESOURCE_CD,
			SEQ,
			DESCRIPTION,
			CREATE_DATE,
			CREATE_BY,
			UPDATE_DATE,
			UPDATE_BY,
			TID
		)
		VALUES
		(
			#{divisionCd, jdbcType=VARCHAR},
			#{companyCd, jdbcType=VARCHAR},
			#{menuId, jdbcType=VARCHAR},
			#{boardType, jdbcType=VARCHAR},
			#{resourceCd, jdbcType=VARCHAR},
			#{seq, jdbcType=NUMERIC},
			#{description, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{updateBy, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{updateBy, jdbcType=VARCHAR},
			#{tid, jdbcType=VARCHAR}
		)
	</insert>
	
	<update id="modify_dashboardUserResource" parameterType="java.util.HashMap">
		UPDATE MOM_USER_RESOURCE
		   SET RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
		     , SEQ = #{seq, jdbcType=NUMERIC}
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND MENU_ID = #{menuId, jdbcType=VARCHAR}
		   AND BOARD_TYPE = #{boardType, jdbcType=VARCHAR}
		   AND RESOURCE_CD = #{resourceCd, jdbcType=VARCHAR}
	</update>
	
	<select id="get_dashboardResource_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT RESOURCE_CD AS CODE
     		 , RESOURCE_CD || '(' || RESOURCE_NAME || ')' AS NAME
  		  FROM MOM_RESOURCE
 		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
   		   AND NVL(USE_YN, 'Y') = 'Y'
 		 ORDER BY RESOURCE_CD
	</select>
</mapper>