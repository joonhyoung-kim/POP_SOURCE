<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.itemInfo.qualityInfo">
	<select id="get_qualityInfo_list" resultType="camelMap" parameterType="java.util.HashMap">
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		WITH TEMP1 AS (	
	    </if>
		SELECT A.DIVISION_CD
			 , A.COMPANY_CD
			 , A.MEASURE_TYPE
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'MEASURE_TYPE', A.MEASURE_TYPE)
			      FROM DUAL) AS MEASURE_TYPE_NAME
			 , A.ITEM_ID
			 , A.ITEM_ID AS ITEM_ID2
			 , B.ITEM_NAME AS ITEM_NAME
		   	 , A.MEASURE_DETAIL_TYPE
			 , A.MEASURE_METHOD
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'MEASURE_METHOD', A.MEASURE_METHOD)
			      FROM DUAL) AS MEASURE_METHOD_NAME
			 , A.GAUGE_METHOD
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'GAUGE_METHOD', A.GAUGE_METHOD)
			      FROM DUAL) AS GAUGE_METHOD_NAME
			 , A.MEASURE_SPEC
			 , B.UNIT
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'ITEM_UNIT', B.UNIT)
			      FROM DUAL) AS UNIT_NAME
			 , A.CHECK_METHOD
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'CHECK_METHOD', A.CHECK_METHOD)
			      FROM DUAL) AS CHECK_METHOD_NAME
			 , A.SAMPLING_BASE
			 , A.CHECK_LEVEL
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'CHECK_LEVEL', A.CHECK_LEVEL)
			      FROM DUAL) AS CHECK_LEVEL_NAME
			 , A.SAMPLE_CNT
			 , A.SEQ
			 , DECODE(A.MEASURE_METHOD, 'count', '', NVL(A.TARGET_TYPE, 'ALL')) AS TARGET_TYPE
			 , A.TARGET
			 , A.USL
			 , A.LSL
			 , A.AQL
			 , A.USE_YN
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD, A.COMPANY_CD, 'USE_FLAG', A.USE_YN)
			      FROM DUAL) AS USE_YN_NAME
			 , A.DESCRIPTION
			 , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			 , A.CREATE_BY
			 , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD, A.COMPANY_CD, A.CREATE_BY)
			      FROM DUAL) AS CREATE_USER_NAME
			 , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			 , A.UPDATE_BY
			 , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD, A.COMPANY_CD, A.UPDATE_BY)
			      FROM DUAL) AS UPDATE_USER_NAME
			 , A.FP_PQC_FLAG
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD, A.COMPANY_CD, 'USE_FLAG', A.FP_PQC_FLAG)
			 	  FROM DUAL) AS FP_PQC_FLAG_NAME
			 , A.MP_PQC_FLAG
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD, A.COMPANY_CD, 'USE_FLAG', A.MP_PQC_FLAG)
			 	  FROM DUAL) AS MP_PQC_FLAG_NAME
			 , A.LP_PQC_FLAG
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD, A.COMPANY_CD, 'USE_FLAG', A.LP_PQC_FLAG)
			 	  FROM DUAL) AS LP_PQC_FLAG_NAME
		  FROM MOM_MEASURE_SPEC A
		  	 , MOM_ITEM_DEFINITION B
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID = B.ITEM_ID
		   AND NVL(B.USE_YN, 'Y') = 'Y'
		<if test="inMeasureType != null and inMeasureType != ''">
		   AND A.MEASURE_TYPE = #{inMeasureType, jdbcType=VARCHAR}
		</if>
		<if test="itemName != null and itemName != ''">
		   AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%'
		      OR UPPER(B.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%')
		</if>
		<if test="inUseYn != null and inUseYn != ''">
		   AND A.USE_YN = #{inUseYn, jdbcType=VARCHAR}
		</if>
		ORDER BY A.ITEM_ID, A.SEQ, A.GAUGE_METHOD
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
				)
	      SELECT A.*
	           , B.ROW_COUNT
	      FROM (SELECT A.*
	                 , ROWNUM GRIDROW
	              FROM TEMP1 A) A
	         , (SELECT COUNT(*) ROW_COUNT
	              FROM TEMP1) B 
	      WHERE GRIDROW BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
       </if>
	</select>

	<select id="get_qualityInfo" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT *
		  FROM MOM_MEASURE_SPEC
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND MEASURE_TYPE = #{measureType, jdbcType=VARCHAR}
		   AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
		   AND GAUGE_METHOD = #{gaugeMethod, jdbcType=VARCHAR}
	</select>

	<insert id="create_qualityInfo" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_MEASURE_SPEC(
				DIVISION_CD,
				COMPANY_CD,
				MEASURE_TYPE,
				MEASURE_DETAIL_TYPE,
				SAMPLE_CNT,
				ITEM_ID,
				SAMPLING_BASE,
				GAUGE_METHOD,
				CHECK_LEVEL,
				MEASURE_METHOD,
				AQL,
				MEASURE_SPEC,
				TARGET_TYPE,
				TARGET,
				CHECK_METHOD,
				USL,
				SEQ,
				LSL,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY,
				FP_PQC_FLAG,
				MP_PQC_FLAG,
				LP_PQC_FLAG
				)
		VALUES(
				#{divisionCd, jdbcType=VARCHAR},
				#{companyCd, jdbcType=VARCHAR},
				UPPER(TRIM(#{measureType, jdbcType=VARCHAR})),
				UPPER(TRIM(#{measureType, jdbcType=VARCHAR})),
				#{sampleCnt, jdbcType=INTEGER},
				UPPER(TRIM(#{itemId, jdbcType=VARCHAR})),
				UPPER(TRIM(#{samplingBase, jdbcType=VARCHAR})),
				UPPER(TRIM(#{gaugeMethod, jdbcType=VARCHAR})),
				UPPER(TRIM(#{checkLevel, jdbcType=VARCHAR})),
				UPPER(TRIM(#{measureMethod, jdbcType=VARCHAR})),
				#{aql, jdbcType=VARCHAR},
				#{measureSpec, jdbcType=VARCHAR},
				UPPER(TRIM(#{targetType, jdbcType=VARCHAR})),
				#{target, jdbcType=VARCHAR},
				UPPER(TRIM(#{checkMethod, jdbcType=VARCHAR})),
				#{usl, jdbcType=VARCHAR},
				#{seq, jdbcType=INTEGER},
				#{lsl, jdbcType=VARCHAR},
				NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})), 'Y'),
				#{description, jdbcType=VARCHAR},
				MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
				#{createBy, jdbcType=VARCHAR},
				MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
				#{updateBy, jdbcType=VARCHAR},
				NVL(UPPER(TRIM(#{fpPqcFlag, jdbcType=VARCHAR})), 'N'),
				NVL(UPPER(TRIM(#{mpPqcFlag, jdbcType=VARCHAR})), 'N'),
				NVL(UPPER(TRIM(#{lpPqcFlag, jdbcType=VARCHAR})), 'N')
		      );
		
		INSERT INTO MOM_MEASURE_SPEC_HIST(
				LAST_EVENT_SEQ,
				DIVISION_CD,
				COMPANY_CD,
				MEASURE_TYPE,
				MEASURE_DETAIL_TYPE,
				SAMPLE_CNT,
				ITEM_ID,
				SAMPLING_BASE,
				GAUGE_METHOD,
				CHECK_LEVEL,
				MEASURE_METHOD,
				AQL,
				MEASURE_SPEC,
				TARGET_TYPE,
				TARGET,
				CHECK_METHOD,
				USL,
				SEQ,
				LSL,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY,
				FP_PQC_FLAG,
				MP_PQC_FLAG,
				LP_PQC_FLAG
				)
		SELECT  s_order_seq.nextval,
				DIVISION_CD,
				COMPANY_CD,
				MEASURE_TYPE,
				MEASURE_DETAIL_TYPE,
				SAMPLE_CNT,
				ITEM_ID,
				SAMPLING_BASE,
				GAUGE_METHOD,
				CHECK_LEVEL,
				MEASURE_METHOD,
				AQL,
				MEASURE_SPEC,
				TARGET_TYPE,
				TARGET,
				CHECK_METHOD,
				USL,
				SEQ,
				LSL,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY,
				FP_PQC_FLAG,
				MP_PQC_FLAG,
				LP_PQC_FLAG
		FROM  MOM_MEASURE_SPEC
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND   COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND   MEASURE_TYPE = UPPER(TRIM(#{measureType, jdbcType=VARCHAR}))
		AND   ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		AND   GAUGE_METHOD = UPPER(TRIM(#{gaugeMethod, jdbcType=VARCHAR}))
		;
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_MEASURE_SPEC
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND MEASURE_TYPE = UPPER(TRIM(#{measureType, jdbcType=VARCHAR}))
			AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
			AND GAUGE_METHOD = UPPER(TRIM(#{gaugeMethod, jdbcType=VARCHAR}))
		;
	END
	}
	</insert>	

	<update id="modify_qualityInfo" statementType="CALLABLE" parameterType="java.util.HashMap">
	{CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		UPDATE MOM_MEASURE_SPEC
		   SET SAMPLE_CNT = #{sampleCnt, jdbcType=INTEGER},
			   MEASURE_METHOD = UPPER(TRIM(#{measureMethod, jdbcType=VARCHAR})),
			   TARGET_TYPE = UPPER(TRIM(#{targetType, jdbcType=VARCHAR})),
			   MEASURE_SPEC = #{measureSpec, jdbcType=VARCHAR},
			   TARGET = UPPER(TRIM(#{target, jdbcType=VARCHAR})),
			   CHECK_METHOD = UPPER(TRIM(#{checkMethod, jdbcType=VARCHAR})),
			   USL = #{usl, jdbcType=VARCHAR},
			   SEQ = #{seq, jdbcType=INTEGER},
			   LSL = #{lsl, jdbcType=VARCHAR},
			   USE_YN = NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})), 'Y'),
			   DESCRIPTION = #{description, jdbcType=VARCHAR},
			   UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   UPDATE_BY = #{updateBy, jdbcType=VARCHAR},
			   FP_PQC_FLAG = NVL(UPPER(TRIM(#{fpPqcFlag, jdbcType=VARCHAR})), 'N'),
			   MP_PQC_FLAG = NVL(UPPER(TRIM(#{mpPqcFlag, jdbcType=VARCHAR})), 'N'),
			   LP_PQC_FLAG = NVL(UPPER(TRIM(#{lpPqcFlag, jdbcType=VARCHAR})), 'N')
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND MEASURE_TYPE = UPPER(TRIM(#{measureType, jdbcType=VARCHAR}))
		AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		AND GAUGE_METHOD = UPPER(TRIM(#{gaugeMethod, jdbcType=VARCHAR}))
		;
		INSERT INTO MOM_MEASURE_SPEC_HIST(
					LAST_EVENT_SEQ,
					DIVISION_CD,
					COMPANY_CD,
					MEASURE_TYPE,
					MEASURE_DETAIL_TYPE,
					SAMPLE_CNT,
					ITEM_ID,
					SAMPLING_BASE,
					GAUGE_METHOD,
					CHECK_LEVEL,
					MEASURE_METHOD,
					AQL,
					MEASURE_SPEC,
					TARGET_TYPE,
					TARGET,
					CHECK_METHOD,
					USL,
					SEQ,
					LSL,
					USE_YN,
					DESCRIPTION,
					CREATE_DATE,
					CREATE_BY,
					UPDATE_DATE,
					UPDATE_BY,
					FP_PQC_FLAG,
					MP_PQC_FLAG,
					LP_PQC_FLAG
					)
			SELECT	s_order_seq.nextval,
					DIVISION_CD,
					COMPANY_CD,
					MEASURE_TYPE,
					MEASURE_DETAIL_TYPE,
					SAMPLE_CNT,
					ITEM_ID,
					SAMPLING_BASE,
					GAUGE_METHOD,
					CHECK_LEVEL,
					MEASURE_METHOD,
					AQL,
					MEASURE_SPEC,
					TARGET_TYPE,
					TARGET,
					CHECK_METHOD,
					USL,
					SEQ,
					LSL,
					USE_YN,
					DESCRIPTION,
					CREATE_DATE,
					CREATE_BY,
					UPDATE_DATE,
					UPDATE_BY,
					FP_PQC_FLAG,
					MP_PQC_FLAG,
					LP_PQC_FLAG
			FROM  MOM_MEASURE_SPEC
			WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND   COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			AND   MEASURE_TYPE = UPPER(TRIM(#{measureType, jdbcType=VARCHAR}))
			AND   ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
			AND   GAUGE_METHOD = UPPER(TRIM(#{gaugeMethod, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_MEASURE_SPEC
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND MEASURE_TYPE = UPPER(TRIM(#{measureType, jdbcType=VARCHAR}))
			AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
			AND GAUGE_METHOD = UPPER(TRIM(#{gaugeMethod, jdbcType=VARCHAR}))
		;
	END
	}
	</update>
	
	<delete id="remove_qualityInfo" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_MEASURE_SPEC_HIST(
					LAST_EVENT_SEQ,
					DIVISION_CD,
					COMPANY_CD,
					MEASURE_TYPE,
					MEASURE_DETAIL_TYPE,
					SAMPLE_CNT,
					ITEM_ID,
					SAMPLING_BASE,
					GAUGE_METHOD,
					CHECK_LEVEL,
					MEASURE_METHOD,
					AQL,
					MEASURE_SPEC,
					TARGET_TYPE,
					TARGET,
					CHECK_METHOD,
					USL,
					SEQ,
					LSL,
					USE_YN,
					DESCRIPTION,
					CREATE_DATE,
					CREATE_BY,
					UPDATE_DATE,
					UPDATE_BY,
					FP_PQC_FLAG,
					MP_PQC_FLAG,
					LP_PQC_FLAG
					)
			SELECT	s_order_seq.nextval,
					DIVISION_CD,
					COMPANY_CD,
					MEASURE_TYPE,
					MEASURE_DETAIL_TYPE,
					SAMPLE_CNT,
					ITEM_ID,
					SAMPLING_BASE,
					GAUGE_METHOD,
					CHECK_LEVEL,
					MEASURE_METHOD,
					AQL,
					MEASURE_SPEC,
					TARGET_TYPE,
					TARGET,
					CHECK_METHOD,
					USL,
					SEQ,
					LSL,
					USE_YN,
					'Delete Data',
					CREATE_DATE,
                    CREATE_BY,
					MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
                    #{userId, jdbcType=VARCHAR},
                    FP_PQC_FLAG,
					MP_PQC_FLAG,
					LP_PQC_FLAG
			FROM  MOM_MEASURE_SPEC
			WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND   COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			AND   MEASURE_TYPE = UPPER(#{measureType, jdbcType=VARCHAR})
			AND   ITEM_ID = UPPER(#{itemId, jdbcType=VARCHAR})
			AND   GAUGE_METHOD = UPPER(#{gaugeMethod, jdbcType=VARCHAR})
		;
		DELETE FROM MOM_MEASURE_SPEC
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND    MEASURE_TYPE = UPPER(#{measureType, jdbcType=VARCHAR})
		AND    ITEM_ID = UPPER(#{itemId, jdbcType=VARCHAR})
		AND    GAUGE_METHOD = UPPER(#{gaugeMethod, jdbcType=VARCHAR})
		;
		
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_MEASURE_SPEC
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND MEASURE_TYPE = UPPER(#{measureType, jdbcType=VARCHAR})
			AND ITEM_ID = UPPER(#{itemId, jdbcType=VARCHAR})
			AND GAUGE_METHOD = UPPER(#{gaugeMethod, jdbcType=VARCHAR})
		;
	END
	}
	</delete>
</mapper>