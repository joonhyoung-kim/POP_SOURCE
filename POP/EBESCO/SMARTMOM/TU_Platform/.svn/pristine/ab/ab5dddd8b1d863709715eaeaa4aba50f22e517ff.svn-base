<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.purchase.materialLedger.materialInputStatus">
	<select id="get_materialInputStatus_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.*
		  FROM (SELECT A.DIVISION_CD 
				     , A.COMPANY_CD
				     , A.ITEM_STOCK_INOUT_ID
				     , A.ITEM_STOCK_ID
				     , A.ITEM_ORDER_ID
				     , A.IO_TYPE
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
				                                              , A.COMPANY_CD
				                                              , 'IO_TYPE'
				                                              , A.IO_TYPE ) 
				        FROM   DUAL )  AS  IO_TYPE_NAME
				     , A.IO_CATEGORY
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
				                                              , A.COMPANY_CD
				                                              , 'IO_CATEGORY'
				                                              , A.IO_CATEGORY ) 
				        FROM   DUAL )  AS  IO_CATEGORY_NAME     
				     , A.ITEM_ID
				     , D.ITEM_NAME
				     , D.SPECIFICATION
				     , D.ITEM_TYPE
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( D.DIVISION_CD
				                                              , D.COMPANY_CD
				                                              , 'ITEM_TYPE'
				                                              , D.ITEM_TYPE ) 
				        FROM   DUAL )  AS  ITEM_TYPE_NAME       
				     , D.UNIT
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( D.DIVISION_CD
				                                              , D.COMPANY_CD
				                                              , 'ITEM_UNIT'
				                                              , D.UNIT ) 
				        FROM   DUAL )  AS  ITEM_UNIT_NAME        
				     , D.ITEM_USER_ID
				     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( D.DIVISION_CD
				                                              , D.COMPANY_CD
				                                              , D.ITEM_USER_ID ) 
				            FROM   DUAL )  AS  ITEM_USER_NAME        
				     , A.ITEM_DEPARTURE_ID
				     , A.ITEM_INPUT_ID
				     , A.QTY
				     , ABS(A.CANCEL_QTY)  AS CANCEL_QTY
				     , (A.QTY + NVL(A.CANCEL_QTY,0))  AS REMAIN_QTY
				     , A.DEPARTURE_QTY
				     , A.VENDOR_CD
				     , V.VENDOR_NAME
				     , V.DEPARTURE_FLAG
				     , A.LOCATION_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD 
				                                                  , A.COMPANY_CD
				                                                  , A.LOCATION_CD )
				        FROM   DUAL ) AS LOCATION_NAME                                                     
				     , A.IO_TIME
				     , A.DESCRIPTION
				     , A.MARKET_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
				                                              , A.COMPANY_CD
				                                              , 'MARKET_CODE'
				                                              , A.MARKET_CD ) 
				        FROM   DUAL )  AS  MARKET_NAME 
				     , A.CURRENCY_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
				                                              , A.COMPANY_CD
				                                              , 'CURRENCY_CODE'
				                                              , A.CURRENCY_CD ) 
				        FROM   DUAL )  AS  CURRENCY_NAME      
				     , A.UNIT_PRICE
				     , A.VENDOR_LOT
				     , (A.QTY + NVL (A.CANCEL_QTY, 0)) * NVL(A.EXCHANGE_RATE, 1) * A.UNIT_PRICE AS INOUT_PRICE
				     , A.FOREIGN_UNIT_PRICE
				     , (A.QTY + NVL (A.CANCEL_QTY, 0)) * A.FOREIGN_UNIT_PRICE AS FOREIGN_TOTAL_PRICE
				     , A.EXCHANGE_RATE
				     , A.CREATE_BY
				     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
				                                              , A.COMPANY_CD
				                                              , A.CREATE_BY ) 
				            FROM   DUAL )  AS  CREATE_BY_NAME   
				     , A.CREATE_DATE
				     , O.ORDER_QTY 
				     , O.ORDER_GROUP_ID 
				     , O.ORDER_STATE          
				     , O.DEPARTURE_VENDOR_CD
				     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME( O.DIVISION_CD 
				                                                , O.COMPANY_CD
				                                                , O.DEPARTURE_VENDOR_CD)
				        FROM   DUAL ) AS DEPARTURE_VENDOR_NAME
				     , O.MATERIAL_ORDER_ID
				     , TO_CHAR(A.CANCEL_DATE, 'YYYY-MM-DD') AS  CANCEL_DATE
				     , A.EXCEPTION_INOUT_CD
		             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
		                                                      , A.COMPANY_CD
		                                                      , 'EXCEPTION_IN_FLAG'
		                                                      , A.EXCEPTION_INOUT_CD ) 
		                FROM   DUAL )  AS  EXCEPTION_INOUT_NAME
		             , O.ORDER_FLAG
			         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (O.DIVISION_CD
			                                                  , O.COMPANY_CD
			                                                  , 'ORDER_FLAG'
			                                                  , O.ORDER_FLAG)
			              FROM DUAL)                          AS ORDER_FLAG_NAME 
			         , A.CONVERSION_UNIT_QTY
			         , A.CONVERSION_UNIT_PRICE
		             , D.CONVERSION_UNIT
		             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (D.DIVISION_CD
			                                                  , D.COMPANY_CD
			                                                  , 'ITEM_UNIT'
			                                                  , D.CONVERSION_UNIT)
			              FROM DUAL)                          AS CONVERSION_UNIT_NAME 
			         , D.ITEM_GROUP_LARGE
			         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(D.DIVISION_CD
			         										 , D.COMPANY_CD
			         										 , 'ITEM_GROUP_LARGE'
			         										 , D.ITEM_GROUP_LARGE) 
			         	  FROM DUAL) 						 AS ITEM_GROUP_LARGE_NAME
			         , D.ITEM_GROUP_MEDIUM
			         , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(D.DIVISION_CD
			         										 , D.COMPANY_CD
			         										 , 'ITEM_GROUP_MEDIUM'
			         										 , D.ITEM_GROUP_MEDIUM) 
			         	  FROM DUAL) 						 AS ITEM_GROUP_MEDIUM_NAME
			         , A.TRANSACTION_SEQ
			         , CASE WHEN A.QTY = A.END_QTY THEN 'Y' 
				            ELSE 'N' 
				        END AS END_FLAG
				     , CASE WHEN A.QTY = ABS(A.CANCEL_QTY) THEN 'Y' 
				            ELSE 'N' 
				        END AS CANCEL_FLAG
				FROM   (SELECT A.DIVISION_CD
				             , A.COMPANY_CD 
				             , A.ITEM_STOCK_INOUT_ID
				             , A.ITEM_STOCK_ID
				             , A.ITEM_ORDER_ID
				             , A.IO_TYPE
				             , A.IO_CATEGORY
				             , A.ITEM_ID 
				             , A.ITEM_DEPARTURE_ID
				             , A.ITEM_INPUT_ID
				             , A.QTY
				             , A.VENDOR_CD 
				             , A.LOCATION_CD 
				             , TO_CHAR(A.IO_TIME, 'YYYY-MM-DD') AS IO_TIME
				             , A.DESCRIPTION
				             , A.MARKET_CD 
				             , A.CURRENCY_CD 
				             , A.UNIT_PRICE
				             , A.VENDOR_LOT
				             , A.INOUT_PRICE
				             , A.FOREIGN_UNIT_PRICE
				             , A.FOREIGN_TOTAL_PRICE
				             , A.EXCHANGE_RATE
				             , A.CREATE_BY
				             , TO_CHAR(A.CREATE_DATE , 'YYYY-MM-DD HH24:MI:SS')  AS CREATE_DATE
				             , NVL((SELECT SUM(QTY)
				                    FROM   MOM_ITEM_STOCK_INOUT IC
				                    WHERE  IC.DIVISION_CD = A.DIVISION_CD
				                    AND    IC.COMPANY_CD  = A.COMPANY_CD
				                    AND    IC.IO_CATEGORY IN ('IC001', 'RC004')
				                    AND    IC.PREV_STOCK_INOUT_ID = A.ITEM_STOCK_INOUT_ID
				                    GROUP BY IC.PREV_STOCK_INOUT_ID), 0) AS CANCEL_QTY
				             , (SELECT SUM(MD.DEPARTURE_QTY)
				                FROM   MOM_MATERIAL_DEPARTURE MD
				                WHERE  MD.DIVISION_CD = A.DIVISION_CD  
				                AND    MD.COMPANY_CD  = A.COMPANY_CD
				                AND    MD.MATERIAL_DEPARTURE_ID = A.ITEM_DEPARTURE_ID)  AS DEPARTURE_QTY
				             , (SELECT MIN(IO_TIME)
		                          FROM MOM_ITEM_STOCK_INOUT
		                         WHERE IO_CATEGORY IN ('IC001','RC004')
		                           AND DIVISION_CD = A.DIVISION_CD
		                           AND COMPANY_CD = A.COMPANY_CD
		                           AND PREV_STOCK_INOUT_ID = A.ITEM_STOCK_INOUT_ID
		                        GROUP BY PREV_STOCK_INOUT_ID) AS CANCEL_DATE
		                     , A.EXCEPTION_INOUT_CD
		                     , NVL(A.CONVERSION_UNIT_QTY, 1) AS CONVERSION_UNIT_QTY
		                     , NVL(A.CONVERSION_UNIT_QTY, 1) * A.UNIT_PRICE AS CONVERSION_UNIT_PRICE
		                     , A.TRANSACTION_SEQ
		                     , NVL((SELECT SUM(QTY) 
			                          FROM MOM_ITEM_LAST 
			                         WHERE DIVISION_CD = A.DIVISION_CD 
			                           AND COMPANY_CD = A.COMPANY_CD 
			                           AND ITEM_STOCK_INOUT_ID = A.ITEM_STOCK_INOUT_ID)
			                       , 0) AS END_QTY
				        FROM   MOM_ITEM_STOCK_INOUT A
				        WHERE  1 = 1 
				        AND    A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
				        AND    A.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
				        AND    A.IO_TYPE = 'I'
				        AND    A.WORK_ORDER_ID IS NULL 
				        AND    A.ITEM_STOCK_TYPE IS NULL 
				        AND    A.IO_CATEGORY IN ( SELECT C.CODE_ID
				                                  FROM   MOM_CODE C
				                                  WHERE  C.DIVISION_CD = A.DIVISION_CD
				                                  AND    C.COMPANY_CD  = A.COMPANY_CD
				                                  AND    C.CODE_CLASS_ID = 'IO_CATEGORY'
				                                  AND    C.USE_YN = 'Y'
				                                  AND    C.ATTRIBUTE4 = 'Y' )
				        <if test="dateCombo == 'STATE_TIME'">                          
					        AND   A.IO_TIME BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
					        				AND     TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997 / 24
				        </if>
				        <if test="dateCombo == 'CREATE_TIME'">
					        AND   A.CREATE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
					        					AND     TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997 / 24
				        </if>
				        ) A
				     , MOM_MATERIAL_ORDER   O
				     , MOM_ITEM_DEFINITION  D
				     , MOM_VENDOR           V
				WHERE  1 = 1 
				AND    A.DIVISION_CD   = O.DIVISION_CD(+)
				AND    A.COMPANY_CD    = O.COMPANY_CD(+)
				AND    A.ITEM_ORDER_ID = O.MATERIAL_ORDER_ID(+)
				AND    A.DIVISION_CD   = D.DIVISION_CD(+)
				AND    A.COMPANY_CD    = D.COMPANY_CD(+)
				AND    A.ITEM_ID       = D.ITEM_ID
				AND    A.DIVISION_CD   = V.DIVISION_CD(+)
				AND    A.COMPANY_CD    = V.COMPANY_CD(+)
				AND    A.VENDOR_CD     = V.VENDOR_CD(+) 
			   <if test="itemId != null and itemId != ''">
				AND    (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%' 
		         OR     UPPER(D.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%')
			   </if>
			   <if test="itemName != null and itemName != ''">
				AND    (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%' 
		         OR     UPPER(D.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%')
			   </if> 
			   <if test="locationCd != null and locationCd != ''">
				AND    A.LOCATION_CD     = #{locationCd, jdbcType=VARCHAR}
			   </if>
			   <if test="locationName != null and locationName != ''">
				AND    A.LOCATION_CD     = #{locationName, jdbcType=VARCHAR}
			   </if> 
			   <if test="itemInputId != null and itemInputId != ''">
				AND    A.ITEM_INPUT_ID LIKE '%' || TRIM(UPPER(#{itemInputId, jdbcType=VARCHAR})) || '%'
			   </if>
			   <if test="itemStockId != null and itemStockId != ''">
				AND    A.ITEM_INPUT_ID LIKE '%' || TRIM(UPPER(#{itemStockId, jdbcType=VARCHAR})) || '%'
			   </if> 
			   <if test="itemOrderId != null and itemOrderId != ''">
				AND    A.ITEM_ORDER_ID LIKE '%' || TRIM(UPPER(#{itemOrderId, jdbcType=VARCHAR})) || '%'     
			   </if>
			   <if test="orderId != null and orderId != ''">
				AND    A.ITEM_ORDER_ID LIKE '%' || TRIM(UPPER(#{orderId, jdbcType=VARCHAR})) || '%'     
			   </if>
			   <if test="ioCategory != null and ioCategory != ''">
			    AND	   A.IO_CATEGORY = #{ioCategory, jdbcType=VARCHAR}
			   </if>
			   <if test="inputType != null and inputType != ''">
			    AND	   A.IO_CATEGORY = #{inputType, jdbcType=VARCHAR}
			   </if>
			   <if test="orderFlag != null and orderFlag != ''">
		      	AND    O.ORDER_FLAG = #{orderFlag, jdbcType=VARCHAR}
			   </if>
			   <if test="orderType != null and orderType != ''">
		      	AND    O.ORDER_FLAG = #{orderType, jdbcType=VARCHAR}
			   </if>  
			   <if test="itemType != null and itemType != ''">
			    AND    D.ITEM_TYPE = #{itemType, jdbcType=VARCHAR}
			    </if>
			   <if test="marketCd != null and marketCd != ''">
		        AND    A.MARKET_CD = #{marketCd, jdbcType=VARCHAR}
		       </if>
		       <if test="priceFlag != null and priceFlag != ''">
		        AND    A.MARKET_CD = #{priceFlag, jdbcType=VARCHAR}
		       </if>
			  ) A
		 WHERE 1 = 1
		 <if test="vendorCombo == 'VENDOR'">
			 <if test="vendorCd != null and vendorCd != ''">
			   AND A.VENDOR_CD = #{vendorCd, jdbcType=VARCHAR}
			 </if> 
		 </if>
		 <if test="vendorCombo == 'VENDOR'">
			 <if test="vendorName != null and vendorName != ''">
			   AND A.VENDOR_CD = #{vendorName, jdbcType=VARCHAR}
			 </if> 
		 </if>
		 <if test="vendorCombo == 'DEPARTURE_VENDOR'">
			 <if test="vendorCd != null and vendorCd != ''">
			   AND A.DEPARTURE_VENDOR_CD = #{vendorCd, jdbcType=VARCHAR}
			 </if>
		 </if>
		 <if test="vendorCombo == 'DEPARTURE_VENDOR'">
			 <if test="vendorName != null and vendorName != ''">
			   AND A.DEPARTURE_VENDOR_CD = #{vendorName, jdbcType=VARCHAR}
			 </if>
		 </if>
		 <if test="endFlag != null and endFlag != ''">
           AND A.END_FLAG = #{endFlag, jdbcType=VARCHAR}
       	 </if>
       	 <if test="cancelFlag != null and cancelFlag != ''">
           AND A.CANCEL_FLAG = #{cancelFlag, jdbcType=VARCHAR}
       	 </if>
       	 ORDER BY A.CREATE_DATE, A.ITEM_STOCK_INOUT_ID, A.TRANSACTION_SEQ
	</select>
	
	<select id="get_materialInputExcelPrint_list" resultType="camelMap" parameterType="java.util.HashMap">
		WITH TEMP1
		     AS ( SELECT A.VENDOR_CD AS 업체코드
					   , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME (A.DIVISION_CD, A.COMPANY_CD, A.VENDOR_CD)
                      		FROM DUAL) AS 업체명
		               , TO_CHAR (A.IO_TIME, 'YYYY-MM-DD') AS 입고일
		               , A.ITEM_INPUT_ID AS 입고번호
		               , '*' || A.ITEM_INPUT_ID || '*' AS 입고번호_BAR128
		               , NVL (V.VENDOR_NAME, '-') AS 상호
		               , NVL (V.MANAGER_NAME, '-') AS 담당자
		               , NVL (V.TEL_NO, '-') AS TEL
		               , NVL (V.FAX_NO, '-') AS FAX
		               , NVL (V.BUSINESS_NO, '-') AS 등록번호
		               , NVL (V.ADDRESS, '-') AS 주소
		               , NVL (V.CEO_NAME, '-') AS 대표
		               , NVL (MV.MANAGER_NAME, '-') AS 납품업체_담당자
                	   , NVL (MV.TEL_NO, '-') AS 납품업체_TEL
		               , A.ITEM_ID AS PLIST_ITEM_ID
		               , D.ITEM_NAME AS PLIST_ITEM_NAME
		               , A.QTY AS PLIST_INPUT_QTY
					   , (A.QTY + NVL ( (SELECT SUM (QTY)
		                                   FROM MOM_ITEM_STOCK_INOUT IC
		                                  WHERE IC.DIVISION_CD = A.DIVISION_CD
		                                    AND IC.COMPANY_CD = A.COMPANY_CD
		                                    AND IC.IO_CATEGORY IN ('IC001', 'RC004')
		                                    AND IC.PREV_STOCK_INOUT_ID = A.ITEM_STOCK_INOUT_ID
		                                  GROUP BY IC.PREV_STOCK_INOUT_ID), 0) ) AS PLIST_REMAIN_QTY
		               , NVL (A.CONVERSION_UNIT_QTY, 1) AS PLIST_CONVERSION_UNIT_QTY
		               , D.UNIT AS PLIST_UNIT
		               , A.DESCRIPTION AS PLIST_DESCRIPTION
		               , A.DIVISION_CD
		               , A.COMPANY_CD
		               , A.ITEM_INPUT_ID
		               , A.CREATE_DATE
		               , A.ITEM_STOCK_INOUT_ID
		               , A.TRANSACTION_SEQ
		            FROM MOM_ITEM_STOCK_INOUT A
		               , MOM_MATERIAL_ORDER O
		               , MOM_ITEM_DEFINITION D
		               , MOM_VENDOR V
		               , MOM_VENDOR MV 
		           WHERE 1 = 1
		             AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		             AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		             AND A.IO_TYPE = 'I'
				     AND A.ITEM_INPUT_ID IN (${itemInputIds})
		             AND A.WORK_ORDER_ID IS NULL
		             AND A.ITEM_STOCK_TYPE IS NULL
		             AND A.IO_CATEGORY IN
		                    (SELECT C.CODE_ID
		                       FROM MOM_CODE C
		                      WHERE C.DIVISION_CD = A.DIVISION_CD
	                            AND C.COMPANY_CD = A.COMPANY_CD
	                            AND C.CODE_CLASS_ID = 'IO_CATEGORY'
	                            AND C.USE_YN = 'Y'
	                            AND C.ATTRIBUTE4 = 'Y')
		             AND NOT EXISTS (SELECT '*'
                                       FROM MOM_ITEM_STOCK_INOUT MIC
                                      WHERE MIC.DIVISION_CD = A.DIVISION_CD
                                        AND MIC.COMPANY_CD = A.COMPANY_CD
                                        AND MIC.IO_TYPE = 'I'
                                        AND MIC.PREV_STOCK_INOUT_ID = A.ITEM_STOCK_INOUT_ID)
		             AND A.DIVISION_CD = O.DIVISION_CD(+)
		             AND A.COMPANY_CD = O.COMPANY_CD(+)
		             AND A.ITEM_ORDER_ID = O.MATERIAL_ORDER_ID(+)
		             AND A.DIVISION_CD = D.DIVISION_CD(+)
		             AND A.COMPANY_CD = D.COMPANY_CD(+)
		             AND A.ITEM_ID = D.ITEM_ID
		             AND A.DIVISION_CD = V.DIVISION_CD(+)
		             AND A.COMPANY_CD = V.COMPANY_CD(+)
					 AND A.DIVISION_CD = V.VENDOR_CD(+)
					 AND A.DIVISION_CD = MV.DIVISION_CD(+)
                  	 AND A.COMPANY_CD = MV.COMPANY_CD(+)
                  	 AND A.VENDOR_CD = MV.VENDOR_CD(+)
		           )
		SELECT A.*
		     , CASE
		          WHEN MOD (PLIST_CELLROW, LIST_ALLCOUNT) = 1
		          THEN
		             (CEIL (PLIST_CELLROW / LIST_ALLCOUNT)) || '/' || (CEIL (GROUP_COUNT / LIST_ALLCOUNT))
		          ELSE
		             ''
		       END
		          AS PLIST_PAGING
		  FROM (SELECT A.*
		             , ROW_NUMBER() OVER(PARTITION BY A.ITEM_INPUT_ID ORDER BY A.CREATE_DATE, A.ITEM_STOCK_INOUT_ID, A.TRANSACTION_SEQ) PLIST_CELLROW
		  			 , COUNT(*) OVER(PARTITION BY A.ITEM_INPUT_ID) AS GROUP_COUNT
		  			 , (SELECT LIST_ALLCOUNT
			              FROM MOM_EXCEL
			             WHERE DIVISION_CD = A.DIVISION_CD
			               AND COMPANY_CD = A.COMPANY_CD
			               AND EXCEL_ID = #{excelId, jdbcType=VARCHAR}) AS LIST_ALLCOUNT
		          FROM TEMP1 A
		       ) A
	</select>
	
	<insert id="create_cancelMaterialInput" statementType="CALLABLE">
	{
        CALL SP_MOM_MATERIAL_PKG.P_CANCEL_MATERIAL_GOOD_RECEIPT (
             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
           , #{menuId, mode=IN, jdbcType=VARCHAR}
           , #{tableId, mode=IN, jdbcType=VARCHAR}
           , #{createBy, mode=IN, jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<update id="modify_materialInputStatusSave" parameterType="java.util.HashMap">
		UPDATE MOM_ITEM_STOCK_INOUT
		SET 
			CURRENCY_CD = #{currencyCd, jdbcType=VARCHAR}, 
			MARKET_CD = #{marketCd, jdbcType=VARCHAR}, 
			CONVERSION_UNIT_QTY = #{conversionUnitQty, jdbcType=NUMERIC}, 
			EXCHANGE_RATE = #{exchangeRate, jdbcType=NUMERIC},
			DESCRIPTION = #{description, jdbcType=VARCHAR},
			UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			UPDATE_BY = #{userId, jdbcType=VARCHAR}
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			AND ITEM_STOCK_INOUT_ID = #{itemStockInoutId, jdbcType=VARCHAR}
	</update>
	
<!-- 	<update id="modify_materialInputStatus" parameterType="java.util.HashMap"> -->
<!-- 		UPDATE MOM_ITEM_STOCK_INOUT -->
<!-- 		SET  -->
<!-- 			CURRENCY_CD = #{currencyCd, jdbcType=VARCHAR},  -->
<!-- 			MARKET_CD = #{marketCd, jdbcType=VARCHAR},  -->
<!-- 			CONVERSION_UNIT_QTY = #{conversionUnitQty, jdbcType=NUMERIC},  -->
<!-- 			EXCHANGE_RATE = #{exchangeRate, jdbcType=NUMERIC}, -->
<!-- 			DESCRIPTION = #{description, jdbcType=VARCHAR}, -->
<!-- 			UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}), -->
<!-- 			UPDATE_BY = #{userId, jdbcType=VARCHAR} -->
<!-- 		WHERE  -->
<!-- 			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} -->
<!-- 			AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR} -->
<!-- 			AND ITEM_STOCK_INOUT_ID = #{itemStockInoutId, jdbcType=VARCHAR} -->
<!-- 	</update> -->
	
	<select id="get_materialInputExcelPrintCount_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT COUNT(*) AS ROW_COUNT
		  FROM MOM_ITEM_STOCK_INOUT A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.ITEM_INPUT_ID IN(${itemInputIds})
		   AND NOT EXISTS (SELECT '*'
		   					 FROM MOM_ITEM_STOCK_INOUT IC
		   					WHERE IC.DIVISION_CD = A.DIVISION_CD
		   					  AND IC.COMPANY_CD = A.COMPANY_CD
		   					  AND IC.IO_TYPE = 'I'
		   					  AND IC.PREV_STOCK_INOUT_ID = A.ITEM_STOCK_INOUT_ID)
	</select>
	
</mapper>