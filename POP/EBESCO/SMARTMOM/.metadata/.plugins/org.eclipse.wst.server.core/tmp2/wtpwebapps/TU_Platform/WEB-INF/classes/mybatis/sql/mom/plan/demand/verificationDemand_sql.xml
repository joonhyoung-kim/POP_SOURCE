<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.plan.demand.verificationDemand">
	<select id="get_verificationDemand_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.ITEM_ID
		     , MIN(B.ITEM_NAME ) AS ITEM_NAME
		     , MIN(B.SPECIFICATION) AS SPECIFICATION
		     , MIN(B.ITEM_TYPE)   AS ITEM_TYPE   
		     , MIN((SELECT MOM_COMMON_PKG. FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'ITEM_TYPE', B.ITEM_TYPE)
		            FROM    DUAL))  AS ITEM_TYPE_NAME
		     , A.RESOURCE_ID
		     , MIN((SELECT MOM_COMMON_PKG.FN_GET_RESOURCE_NAME( A.MASTER_ID, #{companyCd, jdbcType=VARCHAR}, A.RESOURCE_ID) 
		            FROM   DUAL) ) AS RESOURCE_NAME
		     , MIN(DECODE(CHECK_ITEM_MAP, 'Y', 'NO ITEM MAPPING', '')) AS NO_ITEM_MAP
		     , MIN(DECODE(CHECK_BOR, 'Y', 'NO BOR', ''))               AS NO_BOR
		     , MIN(DECODE(CHECK_BOM, 'Y', 'NO BOM', ''))               AS NO_BOM
		     , MIN(DECODE(CHECK_ITEM, 'Y', 'NO ITEM', ''))             AS NO_ITEM
		     , MIN(DECODE(CHECK_SHIFT, 'Y', 'NO SHIFT SCHEDULE', ''))  AS NO_SHIFT
		FROM   TH_MST_DEMAND_VALIDATION A
		     , MOM_ITEM_DEFINITION B
		     , MOM_PRODUCT_CLASS_REL_EXPT C
		WHERE  A.MASTER_ID = B.DIVISION_CD (+)
		AND    A.ITEM_ID   = B.ITEM_ID (+)
		AND    A.MASTER_ID = C.DIVISION_CD(+)
		AND    A.ITEM_ID   = C.PRODUCT_CLASS_ID(+) 
		AND    A.MASTER_ID = #{divisionCd, jdbcType=VARCHAR}
		AND    nvl(C.USE_YN, 'N') = 'N'
	   <if test="planId != null and planId != ''">
		AND    A.PLAN_ID   = #{planId, jdbcType=VARCHAR}
	   </if>
	   <if test="itemName != null and itemName != ''">
	    AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%' 
            OR UPPER(B.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%')
	   </if>
	   <if test="itemId != null and itemId != ''">
	    AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%' 
            OR UPPER(B.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%')
	   </if>
	   <if test="checkType != null and checkType != ''">
		   <choose>
		   <when test='checkType.equals("ITEM_MAPPING")'>
		   	AND	A.CHECK_ITEM_MAP = 'Y'
		   </when>
		   <when test='checkType.equals("ITEM")'>
			AND	A.CHECK_ITEM = 'Y'
		   </when>
		   <when test='checkType.equals("BOM")'>
			AND	A.CHECK_BOM = 'Y'
		   </when>
		   <when test='checkType.equals("BOR")'>
			AND	A.CHECK_BOR = 'Y'
		   </when>
		   <when test='checkType.equals("SHIFT_SCHEDULE")'>
			AND	A.CHECK_SHIFT = 'Y'
		   </when>
		   </choose>
	   </if>
		GROUP BY A.MASTER_ID, A.PLAN_ID, A.ITEM_ID, A.RESOURCE_ID 
		ORDER BY A.ITEM_ID, A.RESOURCE_ID
	</select>
	
	<select id="get_itemExceptionChk_list" resultType="camelMap" parameterType="java.util.HashMap">
	SELECT COUNT(*) AS CNT
	  FROM MOM_PRODUCT_CLASS_REL_EXPT
	 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	 AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	 AND PRODUCT_CLASS_ID =  #{itemId, jdbcType=VARCHAR}
	</select>
	
	<insert id="create_itemException" statementType="CALLABLE" parameterType="java.util.HashMap">
	INSERT INTO MOM_PRODUCT_CLASS_REL_EXPT (
				DIVISION_CD,
				COMPANY_CD,
				PRODUCT_CLASS_ID,
				USE_YN,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY,
				TID
				)
			VALUES(
				#{divisionCd, jdbcType=VARCHAR},
				#{companyCd, jdbcType=VARCHAR},
				TRIM(UPPER(#{itemId, jdbcType=VARCHAR})),
				'Y',
				MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
				#{userId, jdbcType=VARCHAR},
				MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
				#{userId, jdbcType=VARCHAR},
				#{tid, jdbcType=VARCHAR}
				)
	</insert>
	
	<update id="modify_itemException" statementType="CALLABLE" parameterType="java.util.HashMap">
	UPDATE MOM_PRODUCT_CLASS_REL_EXPT
	SET     USE_YN 		     =  'Y'
		  , UPDATE_DATE 	 = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
		  , UPDATE_BY		 = #{userId, jdbcType=VARCHAR}
	WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	AND    COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	AND    PRODUCT_CLASS_ID = TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))
	</update>
</mapper>
