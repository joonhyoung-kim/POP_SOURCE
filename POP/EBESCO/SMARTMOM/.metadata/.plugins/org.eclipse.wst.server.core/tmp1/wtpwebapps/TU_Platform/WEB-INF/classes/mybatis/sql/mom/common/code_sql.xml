<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.common">
<!-- MICA 조회 쿼리 -->
	<select id="get_comCodeClass_list" resultType="camelMap" parameterType="java.util.HashMap">
	  SELECT ROWNUM JQGRIDROW
	       , CODE_CLASS_ID
	       , CODE_CLASS_NAME
	       , DESCRIPTION
	       , IS_SYSTEM
	       , USE_YN
	       , UPDATE_BY
	       , TO_CHAR(UPDATE_DATE, 'yyyy-mm-dd') AS UPDATE_DATE
	       , CODE_TYPE
	       , CODE_CLASS_GROUP
	    FROM MOM_CODE_CLASS
	   WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	     AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	    <if test = "codeClassId != '' and codeClassId != null">
	     AND (UPPER(CODE_CLASS_ID) LIKE '%'||UPPER(#{codeClassId, jdbcType=VARCHAR})||'%'
	      OR UPPER(CODE_CLASS_NAME) LIKE '%'||UPPER(#{codeClassId, jdbcType=VARCHAR})||'%')
	    </if>
	   ORDER BY CODE_CLASS_ID ASC
	</select>	

	<select id="get_comCodeDetail_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT ROWNUM JQGRIDROW
		     , A.*
		  FROM (SELECT B.CODE_CLASS_ID 
		             , A.CODE_CLASS_GROUP
		             , A.CODE_TYPE
		             , B.CODE_ID
		             , B.CODE_NAME
		             , B.CODE_VALUES
		             , B.PARENT_ID
		             , B.DESCRIPTION
		             , B.UI_SEQUENCE
		             , B.USE_YN
		             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.USE_YN) FROM DUAL) USE_YN_NAME
		             , B.IS_SYSTEM
		             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.IS_SYSTEM) FROM DUAL) IS_SYSTEM_NAME
		             , B.UPDATE_BY
		             , TO_CHAR(B.UPDATE_DATE,'YYYY-MM-DD') AS UPDATE_DATE
		             , B.ATTRIBUTE1
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE1) FROM DUAL), B.ATTRIBUTE1) AS ATTRIBUTE1_NAME
		             , B.ATTRIBUTE2
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE2) FROM DUAL), B.ATTRIBUTE2) AS ATTRIBUTE2_NAME
		             , B.ATTRIBUTE3
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE3) FROM DUAL), B.ATTRIBUTE3) AS ATTRIBUTE3_NAME
		             , B.ATTRIBUTE4
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE4) FROM DUAL), B.ATTRIBUTE4) AS ATTRIBUTE4_NAME
		             , B.ATTRIBUTE5
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE5) FROM DUAL), B.ATTRIBUTE5) AS ATTRIBUTE5_NAME
		             , B.ATTRIBUTE6
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE6) FROM DUAL), B.ATTRIBUTE6) AS ATTRIBUTE6_NAME
		             , B.ATTRIBUTE7
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE7) FROM DUAL), B.ATTRIBUTE7) AS ATTRIBUTE7_NAME
		             , B.ATTRIBUTE8
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE8) FROM DUAL), B.ATTRIBUTE8) AS ATTRIBUTE8_NAME
		             , B.ATTRIBUTE9
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE9) FROM DUAL), B.ATTRIBUTE9) AS ATTRIBUTE9_NAME
		             , B.ATTRIBUTE10
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE10) FROM DUAL), B.ATTRIBUTE10) AS ATTRIBUTE10_NAME
		             , B.ATTRIBUTE11
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE11) FROM DUAL), B.ATTRIBUTE11) AS ATTRIBUTE11_NAME
		             , B.ATTRIBUTE12
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE12) FROM DUAL), B.ATTRIBUTE12) AS ATTRIBUTE12_NAME
		             , B.ATTRIBUTE13
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE13) FROM DUAL), B.ATTRIBUTE13) AS ATTRIBUTE13_NAME
		             , B.ATTRIBUTE14
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE14) FROM DUAL), B.ATTRIBUTE14) AS ATTRIBUTE14_NAME
		             , B.ATTRIBUTE15
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE15) FROM DUAL), B.ATTRIBUTE15) AS ATTRIBUTE15_NAME
		             , B.ATTRIBUTE16
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE16) FROM DUAL), B.ATTRIBUTE16) AS ATTRIBUTE16_NAME
		             , B.ATTRIBUTE17
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE17) FROM DUAL), B.ATTRIBUTE17) AS ATTRIBUTE17_NAME
		             , B.ATTRIBUTE18
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE18) FROM DUAL), B.ATTRIBUTE18) AS ATTRIBUTE18_NAME
		             , B.ATTRIBUTE19
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE19) FROM DUAL), B.ATTRIBUTE19) AS ATTRIBUTE19_NAME
		             , B.ATTRIBUTE20
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE20) FROM DUAL), B.ATTRIBUTE20) AS ATTRIBUTE20_NAME
		             , B.ATTRIBUTE21
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE21) FROM DUAL), B.ATTRIBUTE21) AS ATTRIBUTE21_NAME
                     , B.ATTRIBUTE22
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE22) FROM DUAL), B.ATTRIBUTE22) AS ATTRIBUTE22_NAME
                     , B.ATTRIBUTE23
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE23) FROM DUAL), B.ATTRIBUTE23) AS ATTRIBUTE23_NAME
                     , B.ATTRIBUTE24
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE24) FROM DUAL), B.ATTRIBUTE24) AS ATTRIBUTE24_NAME
                     , B.ATTRIBUTE25
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE25) FROM DUAL), B.ATTRIBUTE25) AS ATTRIBUTE25_NAME
                     , B.ATTRIBUTE26
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE26) FROM DUAL), B.ATTRIBUTE26) AS ATTRIBUTE26_NAME
                     , B.ATTRIBUTE27
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE27) FROM DUAL), B.ATTRIBUTE27) AS ATTRIBUTE27_NAME
                     , B.ATTRIBUTE28
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE28) FROM DUAL), B.ATTRIBUTE28) AS ATTRIBUTE28_NAME
                     , B.ATTRIBUTE29
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE29) FROM DUAL), B.ATTRIBUTE29) AS ATTRIBUTE29_NAME
                     , B.ATTRIBUTE30
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE30) FROM DUAL), B.ATTRIBUTE30) AS ATTRIBUTE30_NAME
		          FROM MOM_CODE_CLASS A
		             , MOM_CODE B
		         WHERE B.CODE_CLASS_ID = A.CODE_CLASS_ID(+)
		           AND B.CODE_CLASS_ID = #{codeClassId, jdbcType=VARCHAR}
		           AND B.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		           AND B.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		           AND B.DIVISION_CD = A.DIVISION_CD (+)
		           AND B.COMPANY_CD = A.COMPANY_CD (+)
		           ORDER BY B.CODE_CLASS_ID, B.UI_SEQUENCE, B.CODE_ID ) A
	</select>	
	
	<!-- 2020.04.16 박연주 XMOM 조회 쿼리 -->
	<select id="get_codeGroup_list" resultType="camelMap" parameterType="java.util.HashMap">
	  SELECT ROWNUM JQGRIDROW
	       , CODE_CLASS_ID
	       , CODE_CLASS_NAME
	       , DESCRIPTION
	       , IS_SYSTEM
	       , USE_YN
	       , UPDATE_BY
	       , TO_CHAR(UPDATE_DATE, 'yyyy-mm-dd') AS UPDATE_DATE
	       , CODE_TYPE
	       , CODE_CLASS_GROUP
	    FROM MOM_CODE_CLASS
	   WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	     AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	    <if test = "codeClassId != '' and codeClassId != null">
	     AND (UPPER(CODE_CLASS_ID) LIKE '%'||UPPER(#{codeClassId, jdbcType=VARCHAR})||'%'
	      OR UPPER(CODE_CLASS_NAME) LIKE '%'||UPPER(#{codeClassId, jdbcType=VARCHAR})||'%')
	    </if>
	   ORDER BY CODE_CLASS_ID ASC
	</select>	

	<select id="get_codeDetail_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT ROWNUM JQGRIDROW
		     , A.*
		  FROM (SELECT B.CODE_CLASS_ID 
		             , A.CODE_CLASS_GROUP
		             , A.CODE_TYPE
		             , B.CODE_ID
		             , B.CODE_NAME
		             , B.CODE_VALUES
		             , B.PARENT_ID
		             , B.DESCRIPTION
		             , B.UI_SEQUENCE
		             , B.USE_YN
		             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.USE_YN) FROM DUAL) USE_YN_NAME
		             , B.IS_SYSTEM
		             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.IS_SYSTEM) FROM DUAL) IS_SYSTEM_NAME
		             , B.UPDATE_BY
		             , TO_CHAR(B.UPDATE_DATE,'YYYY-MM-DD') AS UPDATE_DATE
		             , B.ATTRIBUTE1
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE1) FROM DUAL), B.ATTRIBUTE1) AS ATTRIBUTE1_NAME
		             , B.ATTRIBUTE2
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE2) FROM DUAL), B.ATTRIBUTE2) AS ATTRIBUTE2_NAME
		             , B.ATTRIBUTE3
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE3) FROM DUAL), B.ATTRIBUTE3) AS ATTRIBUTE3_NAME
		             , B.ATTRIBUTE4
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE4) FROM DUAL), B.ATTRIBUTE4) AS ATTRIBUTE4_NAME
		             , B.ATTRIBUTE5
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE5) FROM DUAL), B.ATTRIBUTE5) AS ATTRIBUTE5_NAME
		             , B.ATTRIBUTE6
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE6) FROM DUAL), B.ATTRIBUTE6) AS ATTRIBUTE6_NAME
		             , B.ATTRIBUTE7
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE7) FROM DUAL), B.ATTRIBUTE7) AS ATTRIBUTE7_NAME
		             , B.ATTRIBUTE8
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE8) FROM DUAL), B.ATTRIBUTE8) AS ATTRIBUTE8_NAME
		             , B.ATTRIBUTE9
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE9) FROM DUAL), B.ATTRIBUTE9) AS ATTRIBUTE9_NAME
		             , B.ATTRIBUTE10
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE10) FROM DUAL), B.ATTRIBUTE10) AS ATTRIBUTE10_NAME
		             , B.ATTRIBUTE11
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE11) FROM DUAL), B.ATTRIBUTE11) AS ATTRIBUTE11_NAME
		             , B.ATTRIBUTE12
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE12) FROM DUAL), B.ATTRIBUTE12) AS ATTRIBUTE12_NAME
		             , B.ATTRIBUTE13
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE13) FROM DUAL), B.ATTRIBUTE13) AS ATTRIBUTE13_NAME
		             , B.ATTRIBUTE14
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE14) FROM DUAL), B.ATTRIBUTE14) AS ATTRIBUTE14_NAME
		             , B.ATTRIBUTE15
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE15) FROM DUAL), B.ATTRIBUTE15) AS ATTRIBUTE15_NAME
		             , B.ATTRIBUTE16
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE16) FROM DUAL), B.ATTRIBUTE16) AS ATTRIBUTE16_NAME
		             , B.ATTRIBUTE17
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE17) FROM DUAL), B.ATTRIBUTE17) AS ATTRIBUTE17_NAME
		             , B.ATTRIBUTE18
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE18) FROM DUAL), B.ATTRIBUTE18) AS ATTRIBUTE18_NAME
		             , B.ATTRIBUTE19
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE19) FROM DUAL), B.ATTRIBUTE19) AS ATTRIBUTE19_NAME
		             , B.ATTRIBUTE20
		             , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE20) FROM DUAL), B.ATTRIBUTE20) AS ATTRIBUTE20_NAME
		             , B.ATTRIBUTE21
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE21) FROM DUAL), B.ATTRIBUTE21) AS ATTRIBUTE21_NAME
                     , B.ATTRIBUTE22
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE22) FROM DUAL), B.ATTRIBUTE22) AS ATTRIBUTE22_NAME
                     , B.ATTRIBUTE23
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE23) FROM DUAL), B.ATTRIBUTE23) AS ATTRIBUTE23_NAME
                     , B.ATTRIBUTE24
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE24) FROM DUAL), B.ATTRIBUTE24) AS ATTRIBUTE24_NAME
                     , B.ATTRIBUTE25
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE25) FROM DUAL), B.ATTRIBUTE25) AS ATTRIBUTE25_NAME
                     , B.ATTRIBUTE26
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE26) FROM DUAL), B.ATTRIBUTE26) AS ATTRIBUTE26_NAME
                     , B.ATTRIBUTE27
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE27) FROM DUAL), B.ATTRIBUTE27) AS ATTRIBUTE27_NAME
                     , B.ATTRIBUTE28
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE28) FROM DUAL), B.ATTRIBUTE28) AS ATTRIBUTE28_NAME
                     , B.ATTRIBUTE29
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE29) FROM DUAL), B.ATTRIBUTE29) AS ATTRIBUTE29_NAME
                     , B.ATTRIBUTE30
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD, B.COMPANY_CD, 'USE_FLAG', B.ATTRIBUTE30) FROM DUAL), B.ATTRIBUTE30) AS ATTRIBUTE30_NAME
		          FROM MOM_CODE_CLASS A
		             , MOM_CODE B
		         WHERE B.CODE_CLASS_ID = A.CODE_CLASS_ID(+)
		           AND B.CODE_CLASS_ID = #{codeClassId, jdbcType=VARCHAR}
		           AND B.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		           AND B.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		           AND B.DIVISION_CD = A.DIVISION_CD (+)
		           AND B.COMPANY_CD = A.COMPANY_CD (+)
		           ORDER BY B.CODE_CLASS_ID, B.UI_SEQUENCE, B.CODE_ID ) A
	</select>	

    <insert id="create_codeGroup" parameterType="java.util.HashMap">
        INSERT INTO MOM_CODE_CLASS
		            ( DIVISION_CD       
					, COMPANY_CD        
					, CODE_CLASS_ID     
					, CODE_CLASS_NAME   
					, CODE_TYPE         
					, CODE_CLASS_GROUP  
					, UI_SEQUENCE       
					, USE_YN            
					, IS_SYSTEM         
					, DESCRIPTION       
					, CREATE_DATE       
					, CREATE_BY         
					, UPDATE_DATE       
					, UPDATE_BY         
		            )
        VALUES
	              ( #{divisionCd, jdbcType=VARCHAR}
	              , #{companyCd, jdbcType=VARCHAR}
	              , UPPER(#{codeClassId, jdbcType=VARCHAR})
	              , #{codeClassName, jdbcType=VARCHAR}
	              , #{codeType, jdbcType=VARCHAR}
	              , #{codeClassGroup, jdbcType=VARCHAR}
	              , 0
	              , #{useYn, jdbcType=VARCHAR}
	              , 'N'
	              , #{description, jdbcType=VARCHAR}
	              , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
	              , #{updateBy,jdbcType=VARCHAR}
	              , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
	              , #{updateBy,jdbcType=VARCHAR}
	              )
    </insert>
    
    <update id="modify_codeGroup" parameterType="java.util.HashMap">
        UPDATE MOM_CODE_CLASS
           SET CODE_CLASS_NAME  = #{codeClassName, jdbcType=VARCHAR}
             , CODE_TYPE        = #{codeType, jdbcType=VARCHAR}
             , USE_YN           = #{useYn, jdbcType=VARCHAR}
             , DESCRIPTION      = #{description, jdbcType=VARCHAR}
             , UPDATE_DATE      = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
             , UPDATE_BY        = #{updateBy, jdbcType=VARCHAR}
         WHERE DIVISION_CD      = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD       = #{companyCd, jdbcType=VARCHAR}
           AND CODE_CLASS_ID    = #{codeClassId, jdbcType=VARCHAR}
    </update>
    
    <delete id="remove_codeGroup" parameterType="java.util.HashMap">
        DELETE 
          FROM MOM_CODE_CLASS
         WHERE DIVISION_CD = #{divisionCd,jdbcType=VARCHAR}
          AND COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
          AND CODE_CLASS_ID = #{codeClassId,jdbcType=VARCHAR}
    </delete>
    
    <insert id="create_codeDetail" parameterType="java.util.HashMap">
        INSERT INTO MOM_CODE
				( DIVISION_CD    
				, COMPANY_CD     
				, CODE_CLASS_ID  
				, CODE_ID        
				, CODE_NAME      
				, CODE_VALUES    
				, PARENT_ID      
				, IS_SYSTEM      
				, UI_SEQUENCE    
				, USE_YN         
				, DESCRIPTION    
				, CREATE_DATE    
				, CREATE_BY      
				, UPDATE_DATE    
				, UPDATE_BY      
				, ATTRIBUTE1     
				, ATTRIBUTE2     
				, ATTRIBUTE3     
				, ATTRIBUTE4     
				, ATTRIBUTE5     
				, ATTRIBUTE6     
				, ATTRIBUTE7     
				, ATTRIBUTE8     
				, ATTRIBUTE9     
				, ATTRIBUTE10
				, ATTRIBUTE11
				, ATTRIBUTE12
				, ATTRIBUTE13
				, ATTRIBUTE14
				, ATTRIBUTE15
				, ATTRIBUTE16
				, ATTRIBUTE17
				, ATTRIBUTE18
				, ATTRIBUTE19
				, ATTRIBUTE20
				, ATTRIBUTE21
                , ATTRIBUTE22
                , ATTRIBUTE23
                , ATTRIBUTE24
                , ATTRIBUTE25
                , ATTRIBUTE26
                , ATTRIBUTE27
                , ATTRIBUTE28
                , ATTRIBUTE29
                , ATTRIBUTE30
				)
        VALUES
                ( #{divisionCd, jdbcType=VARCHAR}
                , #{companyCd, jdbcType=VARCHAR}
                , #{codeClassId, jdbcType=VARCHAR}
                , UPPER(#{codeId, jdbcType=VARCHAR})
                , #{codeName, jdbcType=VARCHAR}
                , #{codeValues, jdbcType=VARCHAR}
                , UPPER(#{parentId, jdbcType=VARCHAR})
                , 'N'
                , #{uiSequence, jdbcType=NUMERIC}
                , #{useYn, jdbcType=VARCHAR}
                , #{description, jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
                , #{updateBy,jdbcType=VARCHAR}
                , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
                , #{updateBy,jdbcType=VARCHAR}
                , UPPER(#{attribute1,jdbcType=VARCHAR})
                , UPPER(#{attribute2,jdbcType=VARCHAR})
                , UPPER(#{attribute3,jdbcType=VARCHAR})
                , UPPER(#{attribute4,jdbcType=VARCHAR})
                , UPPER(#{attribute5,jdbcType=VARCHAR})
                , UPPER(#{attribute6,jdbcType=VARCHAR})
                , UPPER(#{attribute7,jdbcType=VARCHAR})
                , UPPER(#{attribute8,jdbcType=VARCHAR})
                , UPPER(#{attribute9,jdbcType=VARCHAR})
                , UPPER(#{attribute10,jdbcType=VARCHAR})
                , UPPER(#{attribute11,jdbcType=VARCHAR})
                , UPPER(#{attribute12,jdbcType=VARCHAR})
                , UPPER(#{attribute13,jdbcType=VARCHAR})
                , UPPER(#{attribute14,jdbcType=VARCHAR})
                , UPPER(#{attribute15,jdbcType=VARCHAR})
                , UPPER(#{attribute16,jdbcType=VARCHAR})
                , UPPER(#{attribute17,jdbcType=VARCHAR})
                , UPPER(#{attribute18,jdbcType=VARCHAR})
                , UPPER(#{attribute19,jdbcType=VARCHAR})
                , UPPER(#{attribute20,jdbcType=VARCHAR})
                , UPPER(#{attribute21,jdbcType=VARCHAR})
                , UPPER(#{attribute22,jdbcType=VARCHAR})
                , UPPER(#{attribute23,jdbcType=VARCHAR})
                , UPPER(#{attribute24,jdbcType=VARCHAR})
                , UPPER(#{attribute25,jdbcType=VARCHAR})
                , UPPER(#{attribute26,jdbcType=VARCHAR})
                , UPPER(#{attribute27,jdbcType=VARCHAR})
                , UPPER(#{attribute28,jdbcType=VARCHAR})
                , UPPER(#{attribute29,jdbcType=VARCHAR})
                , UPPER(#{attribute30,jdbcType=VARCHAR})
                )
    </insert>
    
    <update id="modify_codeDetail" parameterType="java.util.HashMap">
        UPDATE MOM_CODE
           SET CODE_NAME        = #{codeName, jdbcType=VARCHAR}
             , CODE_VALUES      = #{codeValues, jdbcType=VARCHAR}
             , PARENT_ID        = UPPER(#{parentId, jdbcType=VARCHAR})
             , USE_YN           = #{useYn, jdbcType=VARCHAR}
             , UI_SEQUENCE      = #{uiSequence, jdbcType=NUMERIC}
             , DESCRIPTION      = #{description, jdbcType=VARCHAR}
             , ATTRIBUTE1       = UPPER(#{attribute1, jdbcType=VARCHAR})
             , ATTRIBUTE2       = UPPER(#{attribute2, jdbcType=VARCHAR})
             , ATTRIBUTE3       = UPPER(#{attribute3, jdbcType=VARCHAR})
             , ATTRIBUTE4       = UPPER(#{attribute4, jdbcType=VARCHAR})
             , ATTRIBUTE5       = UPPER(#{attribute5, jdbcType=VARCHAR})
             , ATTRIBUTE6       = UPPER(#{attribute6, jdbcType=VARCHAR})
             , ATTRIBUTE7       = UPPER(#{attribute7, jdbcType=VARCHAR})
             , ATTRIBUTE8       = UPPER(#{attribute8, jdbcType=VARCHAR})
             , ATTRIBUTE9       = UPPER(#{attribute9, jdbcType=VARCHAR})
             , ATTRIBUTE10      = UPPER(#{attribute10, jdbcType=VARCHAR})
             , ATTRIBUTE11      = UPPER(#{attribute11, jdbcType=VARCHAR})
             , ATTRIBUTE12      = UPPER(#{attribute12, jdbcType=VARCHAR})
             , ATTRIBUTE13      = UPPER(#{attribute13, jdbcType=VARCHAR})
             , ATTRIBUTE14      = UPPER(#{attribute14, jdbcType=VARCHAR})
             , ATTRIBUTE15      = UPPER(#{attribute15, jdbcType=VARCHAR})
             , ATTRIBUTE16      = UPPER(#{attribute16, jdbcType=VARCHAR})
             , ATTRIBUTE17      = UPPER(#{attribute17, jdbcType=VARCHAR})
             , ATTRIBUTE18      = UPPER(#{attribute18, jdbcType=VARCHAR})
             , ATTRIBUTE19      = UPPER(#{attribute19, jdbcType=VARCHAR})
             , ATTRIBUTE20      = UPPER(#{attribute20, jdbcType=VARCHAR})
             , ATTRIBUTE21      = UPPER(#{attribute21, jdbcType=VARCHAR})
             , ATTRIBUTE22      = UPPER(#{attribute22, jdbcType=VARCHAR})
             , ATTRIBUTE23      = UPPER(#{attribute23, jdbcType=VARCHAR})
             , ATTRIBUTE24      = UPPER(#{attribute24, jdbcType=VARCHAR})
             , ATTRIBUTE25      = UPPER(#{attribute25, jdbcType=VARCHAR})
             , ATTRIBUTE26      = UPPER(#{attribute26, jdbcType=VARCHAR})
             , ATTRIBUTE27      = UPPER(#{attribute27, jdbcType=VARCHAR})
             , ATTRIBUTE28      = UPPER(#{attribute28, jdbcType=VARCHAR})
             , ATTRIBUTE29      = UPPER(#{attribute29, jdbcType=VARCHAR})
             , ATTRIBUTE30      = UPPER(#{attribute30, jdbcType=VARCHAR})
             , UPDATE_DATE      = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
             , UPDATE_BY        = #{updateBy, jdbcType=VARCHAR}
         WHERE DIVISION_CD      = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD       = #{companyCd, jdbcType=VARCHAR}
           AND CODE_CLASS_ID    = #{codeClassId, jdbcType=VARCHAR}
           AND CODE_ID          = #{codeId, jdbcType=VARCHAR}
    </update>
    
    <delete id="remove_codeDetail" statementType="CALLABLE" parameterType="java.util.HashMap">
    { CALL
	  DECLARE
	  BEGIN
		#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
		
      DELETE 
      FROM MOM_CODE
      WHERE DIVISION_CD      = #{divisionCd,jdbcType=VARCHAR}
        AND COMPANY_CD       = #{companyCd,jdbcType=VARCHAR}
        AND CODE_CLASS_ID    = #{codeClassId,jdbcType=VARCHAR}
      <if test = "codeId != '' and codeId != null">
        AND CODE_ID          = #{codeId, jdbcType=VARCHAR}
      </if>
        ;
           
        SELECT
			CASE WHEN COUNT(CODE_ID) = 0 THEN 'S'
		         ELSE 'E'
		    END
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_CODE
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND CODE_CLASS_ID    = #{codeClassId,jdbcType=VARCHAR}
	  <if test = "codeId != '' and codeId != null">
	    AND CODE_ID    = #{codeId,jdbcType=VARCHAR}
	  </if>
		   ;
		  END
		}
    </delete>
	
</mapper>