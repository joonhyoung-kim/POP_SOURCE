<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.cell.lineCell"> 
	<select id="get_lineCell_list" resultType="camelMap" parameterType="java.util.HashMap">
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		WITH TEMP1 AS (	
	    </if>
		SELECT TO_CHAR(MLC.WORK_DATE, 'YYYY-MM-DD') AS WORK_DATE
		     , MLC.LINE
		     , MLC.CELL_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CELL_NAME(MLC.DIVISION_CD
		     										 , MLC.COMPANY_CD
		     										 , MLC.CELL_CD)
		          FROM DUAL) AS CELL_NAME
		     , MLC.SEQ
		     , MLC.WORKER_CD
		     , MLC.USE_YN
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( MLC.DIVISION_CD 
		                                              , MLC.COMPANY_CD 
		                                              , 'USE_FLAG' 
		                                              , MLC.USE_YN)
		          FROM DUAL) AS USE_YN_NAME
		  FROM MOM_LINE_CELL_MASTER MLC
		 WHERE MLC.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND MLC.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND MLC.WORK_DATE  BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
		                          AND     TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997 / 24
		   <if test="line != null and line !=''">
		   AND MLC.LINE = #{line, jdbcType=VARCHAR}
		   </if>                       
		   <if test="cell != null and cell !=''">
		   AND MLC.CELL_CD = #{cell, jdbcType=VARCHAR}
		   </if>
		ORDER BY MLC.WORK_DATE DESC, MLC.LINE, MLC.SEQ 
	     <if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
				)
	      SELECT A.*
	           , B.ROW_COUNT
	      FROM (SELECT A.*
	                 , ROWNUM GRIDROW
	              FROM TEMP1 A) A
	         , (SELECT COUNT(*) ROW_COUNT
	              FROM TEMP1) B 
	      WHERE GRIDROW BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
       </if>
	</select>
	
	<insert id="create_lineCell" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE	  	
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
		INSERT INTO MOM_LINE_CELL_MASTER(
			  DIVISION_CD
			, COMPANY_CD
			, WORK_DATE
			, LINE
			, CELL_CD
			, SEQ
			, WORKER_CD
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY

			)
			VALUES(
			  #{divisionCd, jdbcType=VARCHAR}
			, #{companyCd, jdbcType=VARCHAR}
			, #{workDate, jdbcType=VARCHAR}
			, #{line, jdbcType=VARCHAR}
			, #{cellCd, jdbcType=VARCHAR}
			, #{seq, jdbcType=INTEGER}
			, #{workerCd, jdbcType=VARCHAR}
			, NVL(#{useYn, jdbcType=VARCHAR}, 'Y')
			, #{description, jdbcType=VARCHAR}
			, MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			, #{userId, jdbcType=VARCHAR}
			, MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			, #{userId, jdbcType=VARCHAR}
		)
	   ;
	   
	   INSERT INTO MOM_LINE_CELL_MASTER_HIST (
		   	  LAST_EVENT_SEQ
			, DIVISION_CD
			, COMPANY_CD
			, WORK_DATE
			, LINE
			, CELL_CD
			, SEQ
			, WORKER_CD
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
	   )
	   SELECT S_ORDER_SEQ.NEXTVAL
	   		, DIVISION_CD
			, COMPANY_CD
			, WORK_DATE
			, LINE
			, CELL_CD
			, SEQ
			, WORKER_CD
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		 FROM MOM_LINE_CELL_MASTER
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND WORK_DATE = #{workDate, jdbcType=VARCHAR}
		  AND LINE = #{line, jdbcType=VARCHAR}
		  AND CELL_CD = #{cellCd, jdbcType=VARCHAR}
		 ;
		 		 
		SELECT
			CASE 
				WHEN COUNT(LINE) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_LINE_CELL_MASTER
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND WORK_DATE = #{workDate, jdbcType=VARCHAR}
			AND LINE = #{line, jdbcType=VARCHAR}
			AND CELL_CD = #{cellCd, jdbcType=VARCHAR}
		;
	 END
	}
	</insert>	
	
	<update id="modify_lineCell" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE	  	
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
		UPDATE MOM_LINE_CELL_MASTER
		SET    WORKER_CD    = #{workerCd, jdbcType=VARCHAR},
			   USE_YN	         = NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})), 'Y'),
			   UPDATE_DATE 	 = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   UPDATE_BY 		 = #{userId, jdbcType=VARCHAR},
			   DESCRIPTION		 = #{description, jdbcType=VARCHAR}
		WHERE  DIVISION_CD 	 = #{divisionCd, jdbcType=VARCHAR}     
  		AND    COMPANY_CD 		 = #{companyCd,jdbcType=VARCHAR}       
  		AND    WORK_DATE = #{workDate, jdbcType=VARCHAR}
		AND    LINE = #{line, jdbcType=VARCHAR}
		AND    CELL_CD = #{cellCd, jdbcType=VARCHAR}
  	  ;
  	  
  	  INSERT INTO MOM_LINE_CELL_MASTER_HIST (
		   	LAST_EVENT_SEQ
			, DIVISION_CD
			, COMPANY_CD
			, WORK_DATE
			, LINE
			, CELL_CD
			, SEQ
			, WORKER_CD
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
	   )
	   SELECT S_ORDER_SEQ.NEXTVAL
	   		, DIVISION_CD
			, COMPANY_CD
			, WORK_DATE
			, LINE
			, CELL_CD
			, SEQ
			, WORKER_CD
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		 FROM MOM_LINE_CELL_MASTER
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND WORK_DATE = #{workDate, jdbcType=VARCHAR}
		  AND LINE = #{line, jdbcType=VARCHAR}
		  AND CELL_CD = #{cellCd, jdbcType=VARCHAR}
		 ;
		
		SELECT
			CASE 
				WHEN COUNT(LINE) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_LINE_CELL_MASTER
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND WORK_DATE = #{workDate, jdbcType=VARCHAR}
		    AND LINE = #{line, jdbcType=VARCHAR}
		    AND CELL_CD = #{cellCd, jdbcType=VARCHAR}
		;
	 END
	}
	</update>
	
	<delete id="remove_lineCell" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
	  INSERT INTO MOM_LINE_CELL_MASTER_HIST (
		   	  LAST_EVENT_SEQ
			, DIVISION_CD
			, COMPANY_CD
			, WORK_DATE
			, LINE
			, CELL_CD
			, SEQ
			, WORKER_CD
			, USE_YN
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
	   )
	   SELECT S_ORDER_SEQ.NEXTVAL
	   		, DIVISION_CD
			, COMPANY_CD
			, WORK_DATE
			, LINE
			, CELL_CD
			, SEQ
			, WORKER_CD
			, USE_YN
			, 'Delete Data'
			, CREATE_DATE
			, CREATE_BY
			, MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			, #{userId, jdbcType=VARCHAR}
		 FROM MOM_LINE_CELL_MASTER
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		  AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		  AND WORK_DATE = #{workDate, jdbcType=VARCHAR}
	      AND LINE = #{line, jdbcType=VARCHAR}
	      AND CELL_CD = #{cellCd, jdbcType=VARCHAR}
	  ;	  
	   	  
		DELETE FROM MOM_LINE_CELL_MASTER
	     WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
  		   AND  COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
  		   AND  WORK_DATE = #{workDate, jdbcType=VARCHAR}
           AND  LINE = #{line, jdbcType=VARCHAR}
           AND  CELL_CD = #{cellCd, jdbcType=VARCHAR}
  	  ;
  	 	
		SELECT
			CASE 
				WHEN COUNT(LINE) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_LINE_CELL_MASTER
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND WORK_DATE = #{workDate, jdbcType=VARCHAR}
	        AND LINE = #{line, jdbcType=VARCHAR}
	        AND CELL_CD = #{cellCd, jdbcType=VARCHAR}
		;
  	 END
  	}
	</delete>
</mapper>