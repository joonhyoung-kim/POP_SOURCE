<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.workOrder.sampleRequest">
	<select id="get_sampleRequest_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT MIS.LOCATION_CD
			 , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(MIS.DIVISION_CD, MIS.COMPANY_CD, MIS.LOCATION_CD) FROM DUAL) AS LOCATION_NAME
			 , MID.ITEM_TYPE
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MID.DIVISION_CD, MID.COMPANY_CD, 'ITEM_TYPE', MID.ITEM_TYPE) FROM DUAL) AS ITEM_TYPE_NAME
			 , MID.ITEM_ID
			 , MID.ITEM_NAME
			 , MID.SPECIFICATION
			 , MIS.CURRENT_QTY AS QTY
			 , MID.UNIT
	      FROM MOM_ITEM_STOCK MIS
			 , MOM_ITEM_DEFINITION MID
		 WHERE MIS.DIVISION_CD = MID.DIVISION_CD
		   AND MIS.COMPANY_CD = MID.COMPANY_CD
		   AND MIS.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND MIS.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND MIS.ITEM_ID = MID.ITEM_ID
		   AND MID.OTHER_REQ_FLAG = 'Y'
		<if test="locationName != null and locationName != ''">
		   AND MIS.LOCATION_CD = #{locationName, jdbcType=VARCHAR}
		</if>
		<if test="itemName != null and itemName != ''">
		   AND (MIS.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%'
			    OR MID.ITEM_NAME LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%')
		</if>
		<if test="itemType != null and itemType != ''">
		   AND MID.ITEM_TYPE = #{itemType, jdbcType=VARCHAR}
		</if>
		<if test="specification != null and specification != ''">
		   AND UPPER(MID.SPECIFICATION) LIKE TRIM(UPPER('%' || #{specification, jdbcType=VARCHAR} ||'%'))
		</if>
		<if test="stockQty != null and stockQty != ''">
			<choose>
                <when test='stockQty == "N"'>
                    AND MIS.QTY != 0
                </when>
                <when test="stockQty == 'MINUS'">
                    AND MIS.QTY <![CDATA[<]]> 0
                </when>
                <when test="stockQty == 'PLUS'">
                    AND MIS.QTY > 0
                </when>
            </choose>
		</if>
		ORDER BY MIS.ITEM_ID
	</select>
	
	<select id="get_materialRequestId_list" resultType="camelMap" parameterType="java.util.HashMap">
	SELECT MOM_COMMON_PKG.FN_GET_OTHER_REQ_ID(#{divisionCd, jdbcType=VARCHAR}
	                                         , #{companyCd, jdbcType=VARCHAR}
	                                         , TO_DATE(#{requestDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')) AS MATERIAL_REQUEST_ID
	FROM DUAL
	</select>
	
	<insert id="create_sampleRequestConfirm" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  	
	  BEGIN
	  	#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
			INSERT INTO MOM_MATERIAL_REQUEST 
						(DIVISION_CD
					   , COMPANY_CD
					   , MATERIAL_REQUEST_ID
					   , WORK_ORDER_ID
					   , ITEM_ID
					   , REQUEST_DATE
					   , REQUEST_QTY
					   , ISSUE_QTY
					   , CANCEL_QTY
					   , REQUEST_STATE
					   , IN_LOCATION_CD
					   , OUT_LOCATION_CD
					   , REQUEST_TYPE
					   , ISSUE_DATE
					   , UNIT_QTY
					   , ORIGIN_REQUEST_QTY
					   , REQUEST_GROUP_ID
					   , USE_YN
					   , DESCRIPTION
					   , REASON_CODE
					   , CREATE_DATE
					   , CREATE_BY
					   , UPDATE_DATE
					   , UPDATE_BY
					   , TID
					   , DEDUCT_FLAG
					   , REQUEST_CREATE_TYPE
					   , MARKET_CD
					   , CURRENCY_CD
					   , SALES_FREE_FLAG
						) 
				VALUES(
						 #{divisionCd, jdbcType=VARCHAR}
				       , #{companyCd, jdbcType=VARCHAR}
				       , S_ORDER_SEQ.NEXTVAL
				       , #{materialRequestId, jdbcType=VARCHAR}
				       , TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))
				       , TO_DATE(#{requestDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
				       , #{requestQty, jdbcType=INTEGER}
				       , NULL
				       , NULL
				       , 'W'
				       , TRIM(UPPER(#{locationCd, jdbcType=VARCHAR}))
				       , TRIM(UPPER(#{toLocationCd, jdbcType=VARCHAR}))
				       , 'O'
				       , NULL
				       , 1
				       , #{requestQty, jdbcType=INTEGER}
				       , NULL
				       , 'Y'
				       , NULL
				       , #{requestReason, jdbcType=VARCHAR}
				       , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
				       , #{userId, jdbcType=VARCHAR}
				       , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
				       , #{userId, jdbcType=VARCHAR}
				       , NULL
				       , 'N'
				       , 'MANUAL'
				       , #{marketCd, jdbcType=VARCHAR}
				       , TRIM(UPPER(#{currencyCd, jdbcType=VARCHAR}))
				       , TRIM(UPPER(#{salesFreeFlag, jdbcType=VARCHAR}))
						 )
						 ;
			
			INSERT INTO MOM_MATERIAL_REQUEST_HIST
						(LAST_EVENT_SEQ
					   , DIVISION_CD
					   , COMPANY_CD
					   , MATERIAL_REQUEST_ID
					   , WORK_ORDER_ID
					   , ITEM_ID
					   , REQUEST_DATE
					   , REQUEST_QTY
					   , ISSUE_QTY
					   , CANCEL_QTY
					   , REQUEST_STATE
					   , IN_LOCATION_CD
					   , OUT_LOCATION_CD
					   , REQUEST_TYPE
					   , ISSUE_DATE
					   , UNIT_QTY
					   , ORIGIN_REQUEST_QTY
					   , REQUEST_GROUP_ID
					   , USE_YN
					   , DESCRIPTION
					   , REASON_CODE
					   , CREATE_DATE
					   , CREATE_BY
					   , UPDATE_DATE
					   , UPDATE_BY
					   , TID
					   , DEDUCT_FLAG
					   , REQUEST_CREATE_TYPE
					   , MARKET_CD
					   , CURRENCY_CD
					   , SALES_FREE_FLAG
						) 
				SELECT   S_ORDER_SEQ.NEXTVAL
					   , DIVISION_CD
					   , COMPANY_CD
					   , MATERIAL_REQUEST_ID
					   , WORK_ORDER_ID
					   , ITEM_ID
					   , REQUEST_DATE
					   , REQUEST_QTY
					   , ISSUE_QTY
					   , CANCEL_QTY
					   , REQUEST_STATE
					   , IN_LOCATION_CD
					   , OUT_LOCATION_CD
					   , REQUEST_TYPE
					   , ISSUE_DATE
					   , UNIT_QTY
					   , ORIGIN_REQUEST_QTY
					   , REQUEST_GROUP_ID
					   , USE_YN
					   , DESCRIPTION
					   , REASON_CODE
					   , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
					   , #{userId, jdbcType=VARCHAR}
					   , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
					   , #{userId, jdbcType=VARCHAR}
					   , TID
					   , DEDUCT_FLAG
					   , REQUEST_CREATE_TYPE
					   , MARKET_CD
					   , CURRENCY_CD
					   , SALES_FREE_FLAG
				FROM	MOM_MATERIAL_REQUEST
				WHERE   DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			    AND 	COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			    AND 	WORK_ORDER_ID = #{materialRequestId, jdbcType=VARCHAR}
			    AND 	ITEM_ID = #{itemId, jdbcType=VARCHAR}
			    AND 	REQUEST_DATE = TO_DATE(#{requestDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
		        ;
			        
			SELECT
				CASE 
					WHEN count(1) = 0 THEN 'S'
					ELSE 'E' 
				END  
				INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
			FROM MOM_MATERIAL_REQUEST
			WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			AND WORK_ORDER_ID = #{materialRequestId, jdbcType=VARCHAR}
			AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
			AND REQUEST_DATE = TO_DATE(#{requestDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
			;
	END
	}
	</insert>
	
	 <update id="modify_sampleRequestConfirm" parameterType="java.util.HashMap">
    	UPDATE MOM_MATERIAL_REQUEST
    	SET UPDATE_BY = UPDATE_BY
    	WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND WORK_ORDER_ID = #{materialRequestId, jdbcType=VARCHAR}
		AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
		AND REQUEST_DATE = TO_DATE(#{requestDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
    </update>
</mapper>