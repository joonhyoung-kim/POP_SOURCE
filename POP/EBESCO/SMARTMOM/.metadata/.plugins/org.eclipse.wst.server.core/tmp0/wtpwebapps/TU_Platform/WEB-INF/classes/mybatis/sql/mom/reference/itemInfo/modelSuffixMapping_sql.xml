<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.itemInfo.modelSuffixMapping">
	<select id="get_modelSuffixMapping_list" resultType="camelMap" parameterType="java.util.HashMap">
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
		WITH TEMP1 AS (	
	    </if>
		SELECT ROWNUM AS NUM, A.*
  FROM (SELECT A.DIVISION_CD
			 , A.COMPANY_CD
			 , A.PRODUCT_CLASS_ID
			 , A.ITEM_ID
			 , A.ITEM_ID AS ITEM_ID2
			 , B.ITEM_NAME
			 , A.QTY
			 , A.CUSTOMER_CD
			 , A.CUSTOMER_CD AS CUSTOMER_CD2
			 , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME(A.DIVISION_CD, A.COMPANY_CD, A.CUSTOMER_CD)
			      FROM DUAL) AS CUSTOMER_NAME
			 , A.DESTINATION_CD
			 , A.DESTINATION_CD AS DESTINATION_CD2
			 , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME(A.DIVISION_CD, A.COMPANY_CD, A.DESTINATION_CD)
			      FROM DUAL) AS DESTINATION_NAME
			 , A.EARLY_PRODUCING_TERM
			 , A.EARLY_PRODUCING_TERM_UOM
			 , A.MARKET_CD
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'MARKET_CODE', A.MARKET_CD)
			      FROM DUAL) AS MARKET_NAME
			 , A.CURRENCY_CD
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'CURRENCY_CODE', A.CURRENCY_CD)
			      FROM DUAL) AS CURRENCY_NAME
		 	 , A.USE_YN
			 , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'USE_FLAG', A.USE_YN)
			      FROM DUAL) AS USE_YN_NAME
			 , A.DESCRIPTION
			 , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
			 , A.CREATE_BY
			 , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(A.DIVISION_CD, A.COMPANY_CD, A.CREATE_BY)
			      FROM DUAL) AS CREATE_USER_NAME
		 	 , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
			 , A.UPDATE_BY
			 , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(A.DIVISION_CD, A.COMPANY_CD, A.UPDATE_BY)
			      FROM DUAL) AS UPDATE_USER_NAME
		  FROM MOM_PRODUCT_CLASS_REL A
		     , MOM_ITEM_DEFINITION B
		 WHERE A.DIVISION_CD = B.DIVISION_CD(+)
		   AND A.COMPANY_CD = B.COMPANY_CD(+)
		   AND A.ITEM_ID = B.ITEM_ID(+)
		   AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		<if test="modelSuffx != null and modelSuffx != ''">
		   AND A.PRODUCT_CLASS_ID LIKE '%' || TRIM(UPPER(#{modelSuffx, jdbcType=VARCHAR})) || '%' 
		</if>
		<if test="itemName != null and itemName != ''">
		   AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%' 
		       OR UPPER(B.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%')
		</if>
		<if test="vendorName != null and vendorName != ''">
		   AND A.CUSTOMER_CD LIKE '%' || TRIM(UPPER(#{vendorName, jdbcType=VARCHAR})) || '%'
		</if>
		<if test="departureVendorName != null and departureVendorName != ''">
		   AND A.DESTINATION_CD LIKE '%' || TRIM(UPPER(#{departureVendorName, jdbcType=VARCHAR})) || '%'
		</if>
		<if test="useYn != null and useYn != ''">
		   AND A.USE_YN = #{useYn, jdbcType=VARCHAR}
		</if>
		ORDER BY A.PRODUCT_CLASS_ID, A.ITEM_ID) A
		<if test="startPage != null and startPage != '' and endPage != null and endPage != ''">
				)
	      SELECT A.*
	           , B.ROW_COUNT
	      FROM (SELECT A.*
	                 , ROWNUM GRIDROW
	              FROM TEMP1 A) A
	         , (SELECT COUNT(*) ROW_COUNT
	              FROM TEMP1) B 
	      WHERE GRIDROW BETWEEN #{startPage, jdbcType=INTEGER} AND #{endPage, jdbcType=INTEGER}
       </if>
	</select>

	<select id="get_modelSuffixMapping" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT *
		  FROM MOM_PRODUCT_CLASS_REL
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND PRODUCT_CLASS_ID = #{productClassId, jdbcType=VARCHAR}
		   AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
		   AND CUSTOMER_CD = #{customerCd, jdbcType=VARCHAR}
		   AND DESTINATION_CD = #{destinationCd, jdbcType=VARCHAR}
	</select>

	<insert id="create_modelSuffixMapping" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_PRODUCT_CLASS_REL(
				DIVISION_CD,
				COMPANY_CD,
				PRODUCT_CLASS_ID,
				ITEM_ID,
				CUSTOMER_CD,
				DESTINATION_CD,
				QTY,
				EARLY_PRODUCING_TERM,
				MARKET_CD,
				CURRENCY_CD,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY
				)
		VALUES(
				#{divisionCd, jdbcType=VARCHAR},
				#{companyCd, jdbcType=VARCHAR},
				UPPER(TRIM(#{productClassId, jdbcType=VARCHAR})),
				UPPER(TRIM(#{itemId, jdbcType=VARCHAR})),
				UPPER(TRIM(#{customerCd, jdbcType=VARCHAR})),
				UPPER(NVL(TRIM(#{destinationCd, jdbcType=VARCHAR}), TRIM(#{customerCd, jdbcType=VARCHAR}))),
				#{qty, jdbcType=INTEGER},
				#{earlyProductingTerm, jdbcType=INTEGER},
				#{marketCd, jdbcType=VARCHAR},
				#{currencyCd, jdbcType=VARCHAR},
				NVL(TRIM(UPPER(#{useYn, jdbcType=VARCHAR})), 'Y'),
				#{description, jdbcType=VARCHAR},
				MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
				#{createBy, jdbcType=VARCHAR},
				MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
				#{updateBy, jdbcType=VARCHAR}
		);
		
		INSERT INTO MOM_PRODUCT_CLASS_REL_HIST(
				LAST_EVENT_SEQ,
				DIVISION_CD,
				COMPANY_CD,
				PRODUCT_CLASS_ID,
				ITEM_ID,
				CUSTOMER_CD,
				DESTINATION_CD,
				QTY,
				EARLY_PRODUCING_TERM,
				MARKET_CD,
				CURRENCY_CD,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY
				)
		SELECT s_order_seq.nextval,
				DIVISION_CD,
				COMPANY_CD,
				PRODUCT_CLASS_ID,
				ITEM_ID,
				CUSTOMER_CD,
				DESTINATION_CD,
				QTY,
				EARLY_PRODUCING_TERM,
				MARKET_CD,
				CURRENCY_CD,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY
		FROM   MOM_PRODUCT_CLASS_REL
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND    PRODUCT_CLASS_ID = UPPER(TRIM(#{productClassId, jdbcType=VARCHAR}))
		AND    ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		AND    CUSTOMER_CD = UPPER(TRIM(#{customerCd, jdbcType=VARCHAR}))
		AND    DESTINATION_CD = UPPER(NVL(TRIM(#{destinationCd, jdbcType=VARCHAR}), TRIM(#{customerCd, jdbcType=VARCHAR})))
		;
		
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_PRODUCT_CLASS_REL
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND PRODUCT_CLASS_ID = UPPER(TRIM(#{productClassId, jdbcType=VARCHAR}))
			AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
			AND CUSTOMER_CD = UPPER(TRIM(#{customerCd, jdbcType=VARCHAR}))
			AND DESTINATION_CD = UPPER(NVL(TRIM(#{destinationCd, jdbcType=VARCHAR}), TRIM(#{customerCd, jdbcType=VARCHAR})))
		;
		
		END
		}
	</insert>

	<update id="modify_modelSuffixMapping" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		UPDATE MOM_PRODUCT_CLASS_REL
		SET	QTY = #{qty, jdbcType=INTEGER},
			EARLY_PRODUCING_TERM = #{earlyProductingTerm, jdbcType=INTEGER},
			MARKET_CD = TRIM(UPPER(#{marketCd, jdbcType=VARCHAR})),
			CURRENCY_CD = TRIM(UPPER(#{currencyCd, jdbcType=VARCHAR})),
			USE_YN = NVL(TRIM(UPPER(#{useYn, jdbcType=VARCHAR})), 'Y'),
			DESCRIPTION = #{description, jdbcType=VARCHAR},
			UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			UPDATE_BY = #{updateBy, jdbcType=VARCHAR}
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND PRODUCT_CLASS_ID = UPPER(TRIM(#{productClassId, jdbcType=VARCHAR}))
		AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		AND CUSTOMER_CD = UPPER(TRIM(#{customerCd, jdbcType=VARCHAR}))
		AND DESTINATION_CD = UPPER(TRIM(#{destinationCd, jdbcType=VARCHAR}))
			
		;
		INSERT INTO MOM_PRODUCT_CLASS_REL_HIST(
					LAST_EVENT_SEQ,
					DIVISION_CD,
					COMPANY_CD,
					PRODUCT_CLASS_ID,
					ITEM_ID,
					CUSTOMER_CD,
					DESTINATION_CD,
					QTY,
					EARLY_PRODUCING_TERM,
					MARKET_CD,
					CURRENCY_CD,
					USE_YN,
					DESCRIPTION,
					CREATE_DATE,
					CREATE_BY,
					UPDATE_DATE,
					UPDATE_BY
					)
	    SELECT s_order_seq.nextval,
			   DIVISION_CD,
			   COMPANY_CD,
			   PRODUCT_CLASS_ID,
			   ITEM_ID,
			   CUSTOMER_CD,
			   DESTINATION_CD,
			   QTY,
			   EARLY_PRODUCING_TERM,
			   MARKET_CD,
			   CURRENCY_CD,
			   USE_YN,
			   DESCRIPTION,
			   CREATE_DATE,
			   CREATE_BY,
			   UPDATE_DATE,
			   UPDATE_BY
		FROM   MOM_PRODUCT_CLASS_REL
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND    PRODUCT_CLASS_ID = UPPER(TRIM(#{productClassId, jdbcType=VARCHAR}))
		AND    ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		AND    CUSTOMER_CD = UPPER(TRIM(#{customerCd, jdbcType=VARCHAR}))
		AND    DESTINATION_CD = UPPER(TRIM(#{destinationCd, jdbcType=VARCHAR}))
		;
	
 		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_PRODUCT_CLASS_REL
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND PRODUCT_CLASS_ID = UPPER(TRIM(#{productClassId, jdbcType=VARCHAR}))
			AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
			AND CUSTOMER_CD = UPPER(TRIM(#{customerCd, jdbcType=VARCHAR}))
			AND DESTINATION_CD = UPPER(TRIM(#{destinationCd, jdbcType=VARCHAR}))
		;
	END
	}
	</update>
	
	<delete id="remove_modelSuffixMapping" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_PRODUCT_CLASS_REL_HIST(
				LAST_EVENT_SEQ,
				DIVISION_CD,
				COMPANY_CD,
				PRODUCT_CLASS_ID,
				ITEM_ID,
				CUSTOMER_CD,
				DESTINATION_CD,
				QTY,
				EARLY_PRODUCING_TERM,
				MARKET_CD,
				CURRENCY_CD,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY
				)
		SELECT s_order_seq.nextval,
			   DIVISION_CD,
			   COMPANY_CD,
			   PRODUCT_CLASS_ID,
			   ITEM_ID,
			   CUSTOMER_CD,
			   DESTINATION_CD,
			   QTY,
			   EARLY_PRODUCING_TERM,
			   MARKET_CD,
			   CURRENCY_CD,
			   USE_YN,
			   'Delete Data',
			   CREATE_DATE,
			   CREATE_BY,
			   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   #{userId, jdbcType=VARCHAR}
		FROM   MOM_PRODUCT_CLASS_REL
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND    PRODUCT_CLASS_ID = UPPER(#{productClassId, jdbcType=VARCHAR})
		AND    ITEM_ID = UPPER(#{itemId, jdbcType=VARCHAR})
		AND    CUSTOMER_CD = UPPER(#{customerCd, jdbcType=VARCHAR})
		AND    DESTINATION_CD = UPPER(#{destinationCd, jdbcType=VARCHAR})
		;
		
		DELETE FROM MOM_PRODUCT_CLASS_REL
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND    PRODUCT_CLASS_ID = UPPER(#{productClassId, jdbcType=VARCHAR})
		AND    ITEM_ID = UPPER(#{itemId, jdbcType=VARCHAR})
		AND    CUSTOMER_CD = UPPER(#{customerCd, jdbcType=VARCHAR})
		AND    DESTINATION_CD = UPPER(#{destinationCd, jdbcType=VARCHAR})
		;
		
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_PRODUCT_CLASS_REL
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND PRODUCT_CLASS_ID = UPPER(#{productClassId, jdbcType=VARCHAR})
			AND ITEM_ID = UPPER(#{itemId, jdbcType=VARCHAR})
			AND CUSTOMER_CD = UPPER(#{customerCd, jdbcType=VARCHAR})
			AND DESTINATION_CD = UPPER(#{destinationCd, jdbcType=VARCHAR})
		;
	END
	}
	</delete>
</mapper>
