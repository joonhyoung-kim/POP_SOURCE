<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.itemInfo.bom">
	<select id="get_bom_list" resultType="camelMap" parameterType="java.util.HashMap">
		WITH TEMP1 AS (
              SELECT *
                    FROM   MOM_BOM
                    WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                    AND    COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
                <if test="useYn != null and useYn != ''">
                    AND    USE_YN = #{useYn, jdbcType=VARCHAR}
                </if>
                <if test = "inDate != '' and inDate != null">
                    AND    TO_DATE(#{inDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') BETWEEN START_TIME AND END_TIME
                </if>
		)
		<if test = "itemId != 'ALL' and inDeployment == 'fullDeployment'">
		  ,  TEMP2 AS (SELECT CHILD_ITEM_ID
	                   FROM   TEMP1
	                   WHERE  PARENT_ITEM_ID = '-'
                       START WITH CHILD_ITEM_ID = TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))
                       CONNECT BY NOCYCLE PRIOR PARENT_ITEM_ID = CHILD_ITEM_Id  )   
        </if>
		SELECT  A.DIVISION_CD
			  , A.COMPANY_CD
			  , CONNECT_BY_ISCYCLE AS IS_CYCLE
			  , CASE
	                WHEN (LEVEL - 1) = 0 AND A.PARENT_ITEM_ID = '-' THEN '-'
	                WHEN (LEVEL - 1) = 0 THEN A.CHILD_ITEM_ID
	                ELSE A.PARENT_ITEM_ID
	            END HIGH_ITEM_ID
	          , CASE
	                WHEN (LEVEL - 1) = 0 AND A.PARENT_ITEM_ID = '-' THEN A.CHILD_ITEM_ID
	                WHEN (LEVEL - 1) > 0 THEN A.CHILD_ITEM_ID
	                ELSE '-'
	            END LOW_ITEM_ID
	          , A.CHILD_ITEM_ID
	          <choose>
		          <when test="inDeployment == 'UnDeployment'">
		          , A.CHILD_ITEM_ID ITEM_ID2
		          , B.ITEM_NAME AS ITEM_NAME2
		          </when>
		          <otherwise>
		          , LPAD('　┖ ', 4 * (LEVEL-1)) || A.CHILD_ITEM_ID ITEM_ID2
		          , CASE
		               WHEN (LEVEL-1) = 0 THEN B.ITEM_NAME
		               ELSE LPAD('　┖ ', 4 * (LEVEL-1)) || B.ITEM_NAME
		            END ITEM_NAME2
		          </otherwise>
	          </choose>
	          , A.CHILD_ITEM_ID                 AS ITEM_ID2
	          , B.ITEM_NAME          AS ITEM_NAME
	          , A.BOM_SEQ
	          , LEVEL                           AS ITEM_LEVEL
	          , A.PARENT_ITEM_ID
	          , C.ITEM_TYPE AS PARENT_ITEM_TYPE
              , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( C.DIVISION_CD
	                                                   , C.COMPANY_CD  
	                                                   , 'ITEM_TYPE'
	                                                   , C.ITEM_TYPE)
	               FROM DUAL) AS PARENT_ITEM_TYPE_NAME     
	          , A.QTY
	          , B.UNIT
	          , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( B.DIVISION_CD
	                                                   , B.COMPANY_CD  
	                                                   , 'ITEM_UNIT'
	                                                   , B.UNIT)
	            FROM DUAL) AS UNIT_NAME 
	          , TO_CHAR(A.START_TIME, 'YYYY-MM-DD')   AS START_TIME
	          , TO_CHAR(A.END_TIME, 'YYYY-MM-DD')     AS END_TIME
	          , A.USE_YN
	          , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
	                                                   , A.COMPANY_CD  
	                                                   , 'USE_FLAG'
	                                                   , A.USE_YN)
	            FROM DUAL) AS USE_YN_NM 
	          , A.MRP_FLAG
	          , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
	                                                   , A.COMPANY_CD  
	                                                   , 'USE_FLAG'
	                                                   , A.MRP_FLAG)
	            FROM DUAL) AS MRP_FLAG_NAME    
	          , A.RNP_FLAG
	          , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
	                                                   , A.COMPANY_CD  
	                                                   , 'USE_FLAG'
	                                                   , A.RNP_FLAG)
	            FROM DUAL) AS RNP_FLAG_NAME  
	          , A.IS_PHANTOM  
	          , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( A.DIVISION_CD
	                                                   , A.COMPANY_CD  
	                                                   , 'USE_FLAG'
	                                                   , A.IS_PHANTOM)
	            FROM DUAL) AS PHANTOM_FLAG_NAME                              
	          , A.CREATE_BY
	          , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
	                                                   , A.COMPANY_CD  
	                                                   , A.CREATE_BY)
	             FROM DUAL) AS CREATE_USER_NAME  
	          , A.UPDATE_BY    
	          , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
	                                                   , A.COMPANY_CD  
	                                                   , A.UPDATE_BY)
	             FROM DUAL) AS UPDATE_USER_NAME                
	          , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
	          , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATE_DATE
	          , A.DESCRIPTION
	          , B.ITEM_CATEGORY
	          , B.SPECIFICATION
	          , B.ITEM_TYPE
	          , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(B.DIVISION_CD
	                                                   ,B.COMPANY_CD  
	                                                   ,'ITEM_TYPE'
	                                                   ,B.ITEM_TYPE)
	             FROM DUAL) AS ITEM_TYPE_NAME
			  , (SELECT MOM_COMMON_PKG.FN_GET_PRIMARY_RESOURCE_CD( A.DIVISION_CD
			                                                     , A.COMPANY_CD
			                                                     , A.CHILD_ITEM_ID) 
			       FROM DUAL ) AS RESOURCE_CD
           	  , (SELECT MOM_COMMON_PKG.FN_GET_PRIMARY_RESOURCE_NAME( A.DIVISION_CD
           	                                                       , A.COMPANY_CD
           	                                                       , A.CHILD_ITEM_ID) 
           	       FROM DUAL) AS RESOURCE_NAME
			  , B.ATTRIBUTE1
	          , B.ATTRIBUTE2
	          , B.IN_LOCATION_ID
              , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( B.DIVISION_CD
                                                           , B.COMPANY_CD
                                                           , B.IN_LOCATION_ID) 
                   FROM DUAL) IN_LOCATION_NAME
	     FROM   TEMP1 A
	          , MOM_ITEM_DEFINITION B
	          , MOM_ITEM_DEFINITION C
	     WHERE  1 = 1
	     AND    A.DIVISION_CD = B.DIVISION_CD(+)
	     AND    A.COMPANY_CD  = B.COMPANY_CD(+)
	     AND    A.CHILD_ITEM_ID = B.ITEM_ID(+)
	     AND    A.DIVISION_CD = C.DIVISION_CD(+)
         AND    A.COMPANY_CD  = C.COMPANY_CD(+)
         AND    A.PARENT_ITEM_ID = C.ITEM_ID(+)
	     <if test = "itemId != '' and itemId != null">
	     <choose>
		     <when test = "itemId == 'ALL'">
		     START WITH A.PARENT_ITEM_ID = '-' 
		     CONNECT BY NOCYCLE PRIOR A.CHILD_ITEM_ID = A.PARENT_ITEM_ID
		     </when>
		     <otherwise>
				     <if test = "inDeployment == 'fullDeployment'">
				     START WITH A.PARENT_ITEM_ID = '-'
				            AND A.CHILD_ITEM_ID IN (SELECT CHILD_ITEM_ID 
				            						FROM   TEMP2 )
				     CONNECT BY NOCYCLE PRIOR A.CHILD_ITEM_ID = A.PARENT_ITEM_ID
				     </if>
					 <if test= "inDeployment == 'UnDeployment'">
				     AND    LEVEL != 1
				     START WITH A.CHILD_ITEM_ID = TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))
				     AND    TO_DATE(#{inDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') BETWEEN A.START_TIME AND A.END_TIME
				     CONNECT BY NOCYCLE A.CHILD_ITEM_ID = PRIOR A.PARENT_ITEM_ID
					 </if>
				    <if test= "inDeployment == 'deployment'">
				     START WITH A.CHILD_ITEM_ID = TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))
				     AND    A.PARENT_ITEM_ID IN (SELECT A.PARENT_ITEM_ID
				                                 FROM TEMP1 A 
				                                 WHERE A.CHILD_ITEM_ID = TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))
				                                 AND ROWNUM = 1)
				     CONNECT BY NOCYCLE PRIOR A.CHILD_ITEM_ID = A.PARENT_ITEM_ID
					</if>
					<if test= "inDeployment == 'deploymentLevel2'">
				     START WITH A.CHILD_ITEM_ID = TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))
				     AND    A.PARENT_ITEM_ID IN (SELECT A.PARENT_ITEM_ID
				                                 FROM TEMP1 A 
				                                 WHERE A.CHILD_ITEM_ID = TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) 
                                                 AND ROWNUM = 1)
				     CONNECT BY NOCYCLE PRIOR A.CHILD_ITEM_ID = A.PARENT_ITEM_ID
				     AND LEVEL <![CDATA[<=]]> 2
				     </if>
		     </otherwise>
	     </choose>
	     ORDER SIBLINGS BY A.BOM_SEQ, B.ITEM_ID
	     </if>
	     
	</select>
	
	<select id="get_bom" resultType="camelMap" parameterType="java.util.HashMap">
	    SELECT *
	      FROM MOM_BOM
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	  	   AND COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
	  	   AND PARENT_ITEM_ID = #{parentItemId, jdbcType=VARCHAR}
	  	   AND CHILD_ITEM_ID = #{childItemId, jdbcType=VARCHAR}
	</select>
	
	<insert id="create_bom" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	DECLARE
	BEGIN
		#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
		
		INSERT INTO MOM_BOM(
			DIVISION_CD,
			COMPANY_CD,
			PARENT_ITEM_ID,
			CHILD_ITEM_ID,
			BOM_TYPE,
			QTY,
			MRP_FLAG,
			RNP_FLAG,
			BOM_SEQ,
			START_TIME,
			END_TIME,
			IS_PHANTOM,
			USE_YN,
			DESCRIPTION,
			CREATE_DATE,
			CREATE_BY,
			UPDATE_DATE,
			UPDATE_BY
			)
		VALUES(
			#{divisionCd, jdbcType=VARCHAR},
			#{companyCd, jdbcType=VARCHAR},
			UPPER(TRIM(#{parentItemId, jdbcType=VARCHAR})),
			UPPER(TRIM(#{childItemId, jdbcType=VARCHAR})),
			#{bomType, jdbcType=VARCHAR},
			#{qty, jdbcType=INTEGER},
			UPPER(TRIM(#{mrpFlag, jdbcType=VARCHAR})),
			UPPER(TRIM(#{rnpFlag, jdbcType=VARCHAR})),
			#{bomSeq, jdbcType=INTEGER},
			TO_DATE(#{startTime, jdbcType=VARCHAR}, 'YYYY-MM-DD'),
			TO_DATE(#{endTime, jdbcType=VARCHAR}, 'YYYY-MM-DD'),
			NVL(#{isPhantom, jdbcType=VARCHAR}, 'N'),
			NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})), 'Y'),
			#{description, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{createBy, jdbcType=VARCHAR},
			MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			#{updateBy, jdbcType=VARCHAR}
		);
		INSERT INTO MOM_BOM_HIST(
			LAST_EVENT_SEQ,
			DIVISION_CD,
			COMPANY_CD,
			PARENT_ITEM_ID,
			CHILD_ITEM_ID,
			BOM_TYPE,
			QTY,
			MRP_FLAG,
			RNP_FLAG,
			BOM_SEQ,
			START_TIME,
			END_TIME,
			IS_PHANTOM,
			USE_YN,
			DESCRIPTION,
			CREATE_DATE,
			CREATE_BY,
			UPDATE_DATE,
			UPDATE_BY
			)
		SELECT s_order_seq.nextval,
				DIVISION_CD,
				COMPANY_CD,
				PARENT_ITEM_ID,
				CHILD_ITEM_ID,
				BOM_TYPE,
				QTY,
				MRP_FLAG,
				RNP_FLAG,
				BOM_SEQ,
				START_TIME,
				END_TIME,
				IS_PHANTOM,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY
		FROM	MOM_BOM
		WHERE   DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	    AND 	COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	    AND 	PARENT_ITEM_ID = UPPER(TRIM(#{parentItemId, jdbcType=VARCHAR}))
	    AND 	CHILD_ITEM_ID = UPPER(TRIM(#{childItemId, jdbcType=VARCHAR}))
			;
		
		SELECT
			CASE 
				WHEN COUNT(CHILD_ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_BOM
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND PARENT_ITEM_ID = UPPER(TRIM(#{parentItemId, jdbcType=VARCHAR}))
   		    AND	CHILD_ITEM_ID = UPPER(TRIM(#{childItemId, jdbcType=VARCHAR}))
		;
	END
	}
		
	</insert>	
	
	<update id="modify_bom" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	DECLARE
	BEGIN
		#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
		
		UPDATE MOM_BOM
		SET    QTY =  #{qty, jdbcType=INTEGER},
			   MRP_FLAG = UPPER(TRIM(#{mrpFlag, jdbcType=VARCHAR})),
			   RNP_FLAG = UPPER(TRIM(#{rnpFlag, jdbcType=VARCHAR})),
			   START_TIME =  TO_DATE(#{startTime, jdbcType=VARCHAR}, 'YYYY-MM-DD'),
			   END_TIME = TO_DATE(#{endTime, jdbcType=VARCHAR}, 'YYYY-MM-DD'),
			   IS_PHANTOM = NVL(#{isPhantom, jdbcType=VARCHAR}, 'N'),
			   BOM_SEQ = #{bomSeq, jdbcType=INTEGER},
			   UPDATE_DATE =  MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   UPDATE_BY =  #{updateBy, jdbcType=VARCHAR},
			   USE_YN = NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})), 'Y'),
			   DESCRIPTION =  #{description, jdbcType=VARCHAR}
		WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
  		AND    COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
  		AND    PARENT_ITEM_ID = UPPER(TRIM(#{parentItemId, jdbcType=VARCHAR}))
  		AND    CHILD_ITEM_ID = UPPER(TRIM(#{childItemId, jdbcType=VARCHAR}))
	  	;
	  	INSERT INTO MOM_BOM_HIST(
				LAST_EVENT_SEQ,
				DIVISION_CD,
				COMPANY_CD,
				PARENT_ITEM_ID,
				CHILD_ITEM_ID,
				BOM_TYPE,
				QTY,
				MRP_FLAG,
				RNP_FLAG,
				BOM_SEQ,
				START_TIME,
				END_TIME,
				IS_PHANTOM,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY
				)
				SELECT s_order_seq.nextval,
				DIVISION_CD,
				COMPANY_CD,
				PARENT_ITEM_ID,
				CHILD_ITEM_ID,
				BOM_TYPE,
				QTY,
				MRP_FLAG,
				RNP_FLAG,
				BOM_SEQ,
				START_TIME,
				END_TIME,
				IS_PHANTOM,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY
		FROM	MOM_BOM
		WHERE   DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	    AND 	COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	    AND 	PARENT_ITEM_ID = UPPER(TRIM(#{parentItemId, jdbcType=VARCHAR}))
	    AND 	CHILD_ITEM_ID = UPPER(TRIM(#{childItemId, jdbcType=VARCHAR}))
			;
		
		SELECT
			CASE 
				WHEN COUNT(CHILD_ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_BOM
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND PARENT_ITEM_ID = UPPER(TRIM(#{parentItemId, jdbcType=VARCHAR}))
   		    AND	CHILD_ITEM_ID = UPPER(TRIM(#{childItemId, jdbcType=VARCHAR}))
		;
	END
	}
  	
	</update>
	
	<delete id="remove_bom" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	DECLARE
	BEGIN
		#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
		
		INSERT INTO MOM_BOM_HIST(
				LAST_EVENT_SEQ,
				DIVISION_CD,
				COMPANY_CD,
				PARENT_ITEM_ID,
				CHILD_ITEM_ID,
				BOM_TYPE,
				QTY,
				MRP_FLAG,
				RNP_FLAG,
				BOM_SEQ,
				START_TIME,
				END_TIME,
				IS_PHANTOM,
				USE_YN,
				DESCRIPTION,
				CREATE_DATE,
				CREATE_BY,
				UPDATE_DATE,
				UPDATE_BY
				)
		SELECT s_order_seq.nextval,
				DIVISION_CD,
				COMPANY_CD,
				PARENT_ITEM_ID,
				CHILD_ITEM_ID,
				BOM_TYPE,
				QTY,
				MRP_FLAG,
				RNP_FLAG,
				BOM_SEQ,
				START_TIME,
				END_TIME,
				IS_PHANTOM,
				USE_YN,
				'Delete Data',
				CREATE_DATE,
				CREATE_BY,
				MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
				#{userId, jdbcType=VARCHAR}
		FROM	MOM_BOM
		WHERE   DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	    AND 	COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	    AND 	PARENT_ITEM_ID = UPPER(#{parentItemId, jdbcType=VARCHAR})
	    AND 	CHILD_ITEM_ID = UPPER(#{childItemId, jdbcType=VARCHAR})
		;
		
		DELETE FROM MOM_BOM
		 WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND  COMPANY_CD  = #{companyCd,jdbcType=VARCHAR}
		   AND  PARENT_ITEM_ID = UPPER(#{parentItemId, jdbcType=VARCHAR})
		   AND  CHILD_ITEM_ID = UPPER(#{childItemId, jdbcType=VARCHAR})
		;
		
		SELECT
			CASE 
				WHEN COUNT(CHILD_ITEM_ID) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_BOM
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND PARENT_ITEM_ID = UPPER(#{parentItemId, jdbcType=VARCHAR})
	  	    AND CHILD_ITEM_ID = UPPER(#{childItemId, jdbcType=VARCHAR})
		;
    END
    }
	</delete>
	
	
	<select id="get_item_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT ITEM_ID AS ID
             , ITEM_ID||'('||ITEM_NAME||')' AS TEXT
             , ITEM_ID AS CODE
             , ITEM_ID||'('||ITEM_NAME||')' AS NAME
          FROM MOM_ITEM_DEFINITION
         WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND (ITEM_ID LIKE '%' || UPPER(#{key, jdbcType=VARCHAR}) || '%'
                OR UPPER(ITEM_NAME) LIKE '%' || UPPER(#{key, jdbcType=VARCHAR}) || '%')
           AND NVL(USE_YN, 'Y') = 'Y'
         ORDER BY ID
	</select>
	
	<!-- 
	* 20191030 / gyp / 사용안하는 sql로 주석처리 후 삭제예정
	 -->
<!-- 	<select id="get_item2_list" resultType="camelMap" parameterType="java.util.HashMap"> -->
<!-- 		SELECT  -->
<!-- 			  ITEM_ID AS CODE -->
<!-- 		    , ITEM_NAME AS NAME -->
<!-- 		FROM  -->
<!-- 			MOM_ITEM_DEFINITION -->
<!-- 		WHERE  -->
<!-- 			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} -->
<!-- 			AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR} -->
<!-- 		    AND NVL(USE_YN, 'Y') = 'Y' -->
<!-- 	</select> -->
	
	<select id="get_parentItem_list" resultType="camelMap" parameterType="java.util.HashMap">
    SELECT ID 
         , TEXT
         , ID AS CODE
         , TEXT AS NAME
 	  FROM (SELECT ITEM_ID AS ID
                 , ITEM_ID||'('||ITEM_NAME||')' TEXT
                 , 2 SEQ
              FROM MOM_ITEM_DEFINITION
             WHERE NVL(USE_YN, 'Y') = 'Y'
               AND (ITEM_ID LIKE '%' || UPPER(#{key, jdbcType=VARCHAR}) || '%'
                    OR UPPER(ITEM_NAME) LIKE '%' || UPPER(#{key, jdbcType=VARCHAR}) || '%')
               AND ITEM_TYPE IN(${itemType})
               AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
               AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
             UNION ALL
            SELECT '-' ID
                 , '-' TEXT
                 , 1 SEQ
            FROM DUAL
            )
      ORDER BY SEQ, ID
	</select>
	
	<!-- 
    * 20191030 / gyp / 사용안하는 sql로 주석처리 후 삭제예정
     -->
<!-- 	<select id="get_parentItem2_list" resultType="camelMap" parameterType="java.util.HashMap"> -->
<!-- 		SELECT ID AS CODE, TEXT AS NAME -->
<!-- 	 	  FROM	(SELECT ID,  -->
<!-- 	 					TEXT -->
<!-- 	         	   FROM (SELECT DISTINCT ITEM_ID AS ID -->
<!-- 	                          , ITEM_NAME TEXT -->
<!-- 	                          , 2 SEQ -->
<!-- 	                          , DIVISION_CD -->
<!-- 	                       FROM MOM_ITEM_DEFINITION -->
<!-- 	                      WHERE NVL(USE_YN, 'Y') = 'Y' -->
<!-- 	                        AND ITEM_TYPE IN(${itemType}) -->
<!-- 	                      UNION ALL -->
<!-- 	                     SELECT '-' ID -->
<!-- 	                          , '-' TEXT -->
<!-- 	                          , 1 SEQ -->
<!-- 	                          , #{divisionCd, jdbcType=VARCHAR} DIVISION_CD -->
<!-- 	                     FROM DUAL -->
<!-- 	                     ) -->
<!-- 	              WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR} -->
<!-- 	               ORDER BY SEQ, ID ) -->
<!-- 	</select> -->
	
	<insert id="create_bomLinkCopy" statementType="CALLABLE">
	{
        CALL MOM_BASIC_INFO_PKG.COPY_BOM_PROC (
             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
           , #{parentItemId, mode=IN, jdbcType=VARCHAR}
           , #{childItemId, mode=IN, jdbcType=VARCHAR}
           , #{changeItemId, mode=IN, jdbcType=VARCHAR}
           , #{userId, mode=IN, jdbcType=VARCHAR}
        )
    }
	</insert>
	
	<select id="get_bomIf_list" resultType="camelMap" parameterType="java.util.HashMap">
	SELECT COUNT(*) AS COUNT
	  FROM (
	        SELECT DISTINCT A.PARENT_ITEM_ID AS ITEM_ID
	             , B.ITEM_NAME 
	          FROM TU_EAI.IF_MOM_BOM_R A
	             , MOM_ITEM_DEFINITION B
	         WHERE A.DIVISION_CD = B.DIVISION_CD(+)
	           AND A.COMPANY_CD = B.COMPANY_CD(+)
	           AND A.PARENT_ITEM_ID = B.ITEM_ID(+)
	           AND A.DIVISION_CD = #{divisionCd, mode=IN, jdbcType=VARCHAR}
	           AND A.COMPANY_CD = #{companyCd, mode=IN, jdbcType=VARCHAR}
	           AND A.TRANSFER_FLAG = 'N' 
	           AND A.PARENT_ITEM_ID != '-'
	         UNION 
	        SELECT DISTINCT A.CHILD_ITEM_ID AS ITEM_ID
	             , B.ITEM_NAME 
	          FROM TU_EAI.IF_MOM_BOM_R A
	             , MOM_ITEM_DEFINITION B
	         WHERE A.DIVISION_CD = B.DIVISION_CD(+)
	           AND A.COMPANY_CD = B.COMPANY_CD(+)
	           AND A.CHILD_ITEM_ID = B.ITEM_ID(+)
	           AND A.DIVISION_CD = #{divisionCd, mode=IN, jdbcType=VARCHAR}
	           AND A.COMPANY_CD = #{companyCd, mode=IN, jdbcType=VARCHAR}
	           AND A.TRANSFER_FLAG = 'N' 
	        )
	 WHERE ITEM_NAME IS NULL
	</select>
	
	<select id="get_bomIfNoItem_list" resultType="camelMap" parameterType="java.util.HashMap">
		    SELECT DISTINCT A.ITEM_ID
			FROM  (SELECT   DIVISION_CD 
			              , COMPANY_CD
			              , ATTRIBUTE1 AS ITEM_ID
			         FROM MOM_ERROR_MSG
			        WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			          AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			          AND MENU_ID = #{menuId, jdbcType=VARCHAR}
			          AND PROG_ID = #{progId, jdbcType=VARCHAR}
			        UNION 
			       SELECT DIVISION_CD 
			            , COMPANY_CD
			            , ATTRIBUTE2 AS ITEM_ID
			         FROM MOM_ERROR_MSG
			        WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			          AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			          AND MENU_ID = #{menuId, jdbcType=VARCHAR}
			          AND PROG_ID = #{progId, jdbcType=VARCHAR}
			          ) A 
			WHERE NOT EXISTS (SELECT '*' 
			                  FROM   MOM_ITEM_DEFINITION B
			                  WHERE  B.DIVISION_CD= A.DIVISION_CD
			                  AND    B.COMPANY_CD = A.COMPANY_CD
			                  AND    B.ITEM_ID = A.ITEM_ID
			                  AND    B.USE_YN = 'Y')
			ORDER BY  A.ITEM_ID
	</select>
	
	<insert id="create_bomAct" statementType="CALLABLE">
	{
        CALL MOM_BASIC_INFO_PKG.P_CREATE_BOM_IF (
            #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
           , #{userId, mode=IN, jdbcType=VARCHAR}
        )
    }
	</insert>
</mapper>
