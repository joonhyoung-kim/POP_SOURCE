<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.shipping.salesOrderStatus">
    <!-- modify_hists 
    * XMOMA11 / 20191105 / gyp / TRIM, UPPER 처리
     -->
	<select id="get_salesOrderStatus_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.*
		  FROM ( SELECT A.CUSTOMER_PO_ID
			   		  , A.CUSTOMER_PO_NO
			          , A.SALES_ORDER_ID              
			          , A.SALES_ITEM_ID               
			          , A.ITEM_ID                     
			          , A.ITEM_NAME                   
			          , A.ORDER_STATE                 
			          , A.ORDER_STATE_NAME            
			          , A.ORDER_QTY                   
			          , A.SHIP_QTY
			          , (SELECT SUM(D.DEPARTURE_QTY)
			               FROM MOM_LGE_B2B_DEPARTURE D
			              WHERE D.DIVISION_CD = A.DIVISION_CD
			                AND D.PO_NO = A.CUSTOMER_PO_NO
			                AND D.DEPARTURE_STATUS IN('DEPARTURE', 'RECEIVE')) AS B2BI_SHIP_QTY
			          , A.CONFIRMED_QTY
			          , (SELECT SUM(R.RECEIVING_QUANTITY)
			          	   FROM MOM_LGE_B2B_RECEIVING R
			          	  WHERE R.DIVISION_CD = A.DIVISION_CD
			          	    AND R.PO_NUMBER = A.CUSTOMER_PO_NO) AS B2BI_CONFIRMED_QTY               
			          , A.CANCEL_QTY                  
			          , (A.ORDER_QTY - A.SHIP_QTY - A.CANCEL_QTY) AS REMAINED_QTY 
			          , A.LOCATION_CD                 
			          , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME( A.DIVISION_CD
			                                                       , A.COMPANY_CD
			                                                       , A.LOCATION_CD)
			               FROM DUAL ) AS  LOCATION_NAME     
			          , A.VENDOR_CD                           
			          , A.VENDOR_NAME                         
			          , A.DESTINATION_CD                      
			          , A.DESTINATION_NAME                    
			          , A.ITEM_STOCK_ID                       
			          , A.SHIPPED_DATE                        
			          , A.CONFIRMED_DATE                      
			          , A.DUE_DATE                            
			          , A.SHIPPED_UNIT_PRICE                  
			          , A.SHIPPED_INOUT_PRICE                 
			          , A.CONFIRMED_UNIT_PRICE                
			          , A.CONFIRMED_INOUT_PRICE               
			          , A.MARKET_CD                           
			          , A.MARKET_NAME                         
			          , A.CURRENCY_CD                         
			          , A.CURRENCY_NAME                       
			          , A.SHIPPED_CREATE_BY                   
			          , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
			                                                   , A.COMPANY_CD
			                                                   , A.SHIPPED_CREATE_BY)
			               FROM DUAL)                       AS SHIPPED_CREATE_BY_NAME                                               
			          , A.SHIPPED_EXCHANGE_RATE               
			          , A.CONFIRMED_EXCHANGE_RATE             
			          , A.CONFIRMED_CREATE_BY                 
			          , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME( A.DIVISION_CD
			                                                   , A.COMPANY_CD
			                                                   , A.CONFIRMED_CREATE_BY)
			               FROM DUAL)                       AS CONFIRMED_CREATE_BY_NAME   
			          , A.ORDER_GUBUN                         
			          , A.ORDER_GUBUN_NAME                    
			          , (SELECT MOM_COMMON_PKG.FN_GET_CURRENT_STOCK( A.DIVISION_CD
			                                                       , A.COMPANY_CD
			                                                       , A.ITEM_ID
			                                                       , A.LOCATION_CD)
			               FROM DUAL )                      AS CURRENT_QTY    
			          , A.HS_PART_NO
			          , A.LGE_PART_NO
			       FROM (
			           SELECT MAX(A.CUSTOMER_PO_ID)         AS CUSTOMER_PO_ID 
			                , A.SALES_ORDER_ID
			                , MAX(A.SALES_ITEM_ID )         AS SALES_ITEM_ID
			                , MAX(A.ITEM_ID)                AS ITEM_ID
			                , MAX(A.ITEM_NAME)              AS ITEM_NAME
			                , MAX(A.ORDER_QTY)              AS ORDER_QTY 
			                , MAX(NVL(A.SHIP_QTY, 0))       AS SHIP_QTY
			                , MAX(NVL(A.CANCEL_QTY, 0))     AS CANCEL_QTY
			                , MAX(A.LOCATION_CD)            AS LOCATION_CD
			                , MAX(A.VENDOR_CD )             AS VENDOR_CD
			                , MAX(A.VENDOR_NAME)            AS VENDOR_NAME
			                , MAX(A.DESTINATION_CD)         AS DESTINATION_CD
			                , MAX(A.DESTINATION_NAME)       AS DESTINATION_NAME
			                , MAX(A.ITEM_STOCK_ID)          AS ITEM_STOCK_ID
			                , MAX(A.SHIPPED_DATE)           AS SHIPPED_DATE
			                , MAX(A.SHIPPED_UNIT_PRICE)     AS SHIPPED_UNIT_PRICE
			                , MAX(A.MARKET_CD )             AS MARKET_CD
			                , MAX(A.MARKET_NAME )           AS MARKET_NAME
			                , MAX(A.CURRENCY_CD )           AS CURRENCY_CD             
			                , MAX(A.CURRENCY_NAME)          AS CURRENCY_NAME
			                , MAX(A.SHIPPED_CREATE_BY )     AS SHIPPED_CREATE_BY
			                , SUM(A.SHIPPED_INOUT_PRICE)    AS SHIPPED_INOUT_PRICE
			                , MAX(A.SHIPPED_EXCHANGE_RATE)  AS SHIPPED_EXCHANGE_RATE
			                , MAX(A.ORDER_STATE)            AS ORDER_STATE
			                , MAX(A.ORDER_STATE_NAME)       AS ORDER_STATE_NAME
			                , MAX(A.DUE_DATE) 				AS DUE_DATE
			                , MAX(A.ORDER_GUBUN)            AS ORDER_GUBUN
			                , MAX(A.ORDER_GUBUN_NAME)       AS ORDER_GUBUN_NAME
			                , A.DIVISION_CD
			                , A.COMPANY_CD
			                , SUM(A.CONFIRMED_QTY)          AS CONFIRMED_QTY
			                , MAX(A.CONFIRMED_DATE)         AS CONFIRMED_DATE
			                , MAX(A.CONFIRMED_UNIT_PRICE) 	AS CONFIRMED_UNIT_PRICE
			                , SUM(A.CONFIRMED_INOUT_PRICE)  AS CONFIRMED_INOUT_PRICE
			                , MAX(A.CONFIRMED_CREATE_BY)    AS CONFIRMED_CREATE_BY
			                , MAX(A.CONFIRMED_EXCHANGE_RATE) AS CONFIRMED_EXCHANGE_RATE
			                , MAX(A.CURRENCY_CD)            AS DEFAULT_CURRENCY
			                , MAX(A.CUSTOMER_PO_NO) AS CUSTOMER_PO_NO  
			                , MAX(A.HS_PART_NO) AS HS_PART_NO
			                , MAX(A.LGE_PART_NO) AS LGE_PART_NO
			             FROM (                
			                   SELECT (O.CUSTOMER_PO_ID)         AS CUSTOMER_PO_ID 
			                        ,  O.SALES_ORDER_ID
			                        , (O.SALES_ITEM_ID )         AS SALES_ITEM_ID
			                        , (O.ITEM_ID)                AS ITEM_ID
			                        , (O.ITEM_NAME)              AS ITEM_NAME
			                        , (O.ORDER_QTY)              AS ORDER_QTY 
			                        , (NVL(O.SHIP_QTY, 0))       AS SHIP_QTY
			                        , (NVL(O.CANCEL_QTY, 0))     AS CANCEL_QTY
			                        , (I.LOCATION_CD)            AS LOCATION_CD
			                        , (O.VENDOR_CD )             AS VENDOR_CD
			                        , (O.VENDOR_NAME)            AS VENDOR_NAME
			                        , (O.DESTINATION_CD)         AS DESTINATION_CD
			                        , (O.DESTINATION_NAME)       AS DESTINATION_NAME
			                        , (I.ITEM_STOCK_ID)          AS ITEM_STOCK_ID
			                        , TO_CHAR(I.IO_TIME, 'YYYY-MM-DD') AS SHIPPED_DATE
			                        , (DECODE(O.CURRENCY_CD, P.CURRENCY_CD, I.UNIT_PRICE, I.FOREIGN_UNIT_PRICE)) AS SHIPPED_UNIT_PRICE
			                        , (O.MARKET_CD )             AS MARKET_CD
			                        , (O.MARKET_NAME )           AS MARKET_NAME
			                        , (O.CURRENCY_CD )           AS CURRENCY_CD             
			                        , (O.CURRENCY_NAME)          AS CURRENCY_NAME
			                        , (I.CREATE_BY )             AS SHIPPED_CREATE_BY
			                        , (I.INOUT_PRICE)            AS SHIPPED_INOUT_PRICE
			                        , (NVL(I.EXCHANGE_RATE,1))   AS SHIPPED_EXCHANGE_RATE
			                        , (O.ORDER_STATE)            AS ORDER_STATE
			                        , (O.ORDER_STATE_NAME)       AS ORDER_STATE_NAME
									, O.DUE_DATE
			                        , (O.ORDER_GUBUN)            AS ORDER_GUBUN
			                        , (O.ORDER_GUBUN_NAME)       AS ORDER_GUBUN_NAME
			                        , O.DIVISION_CD
			                        , O.COMPANY_CD
			                        , 0                    AS CONFIRMED_QTY
			                        , ''                   AS CONFIRMED_DATE
			                        , 0 AS CONFIRMED_UNIT_PRICE
			                        , 0                    AS CONFIRMED_INOUT_PRICE
			                        , ''                   AS CONFIRMED_CREATE_BY
			                        , 0   AS CONFIRMED_EXCHANGE_RATE
			                        , (P.CURRENCY_CD)            AS DEFAULT_CURRENCY
			                        , O.CUSTOMER_PO_NO 
			                        , O.HS_PART_NO
			                        , O.LGE_PART_NO 
			                     FROM   MOM_SALES_ORDER_V O
			                        , (SELECT * FROM MOM_ITEM_STOCK_INOUT A
			                            WHERE A.DIVISION_CD =  #{divisionCd, jdbcType=VARCHAR}
			                              AND A.COMPANY_CD  =  #{companyCd, jdbcType=VARCHAR}
			                              AND A.IO_TYPE = 'I'
			                              AND A.IO_CATEGORY IN ('S001','S002')
			                              AND NOT EXISTS (SELECT '*'
			                                                FROM   MOM_ITEM_STOCK_INOUT IC
			                                               WHERE  IC.DIVISION_CD    = A.DIVISION_CD
			                                                 AND    IC.COMPANY_CD     = A.COMPANY_CD
			                                                 AND    IC.PREV_STOCK_INOUT_ID = A.ITEM_STOCK_INOUT_ID
			                                                 AND    IC.IO_TYPE = 'I'
			                                                 AND    IC.IO_CATEGORY = 'SC001')) I
			                        , MOM_PARAMETER P
			                    WHERE    O.DIVISION_CD    = I.DIVISION_CD(+)
			                      AND    O.COMPANY_CD     = I.COMPANY_CD(+)
			                      AND    O.SALES_ORDER_ID = I.ITEM_ORDER_ID(+)
			                      AND    O.DIVISION_CD    = P.DIVISION_CD
			                      AND    O.COMPANY_CD     = P.COMPANY_CD
			                      AND	 O.DIVISION_CD	  = I.DIVISION_CD(+)
			                      AND    O.COMPANY_CD     = I.COMPANY_CD(+)
			                      AND    O.DIVISION_CD    = #{divisionCd, jdbcType=VARCHAR}
			                      AND    O.COMPANY_CD     = #{companyCd, jdbcType=VARCHAR}
			                     <if test= "fromDate != '' and fromDate != null and toDate != '' and toDate != null">
				                  AND    O.DUE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
				                                        AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997/24
				                 </if>
		                         <if test="customerName != '' and customerName != null">
				                  AND 	 O.VENDOR_CD = #{customerName, jdbcType=VARCHAR}
				                 </if>
						         <if test="itemName != '' and itemName != null">
				                  AND 	 (O.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%'
				                  		  OR UPPER(O.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%') <!-- XMOMG18 / pyj / 검색조건 품명 추가 -->
				                 </if>
				                 <if test="customerPoId != '' and customerPoId != null">
				                  AND    UPPER(O.CUSTOMER_PO_ID) LIKE '%' || TRIM(UPPER(#{customerPoId, jdbcType=VARCHAR})) || '%'
				                 </if>
				                 <if test="customerPoNo != '' and customerPoNo != null">
				                  AND    UPPER(O.CUSTOMER_PO_NO) LIKE '%' || TRIM(UPPER(#{customerPoNo, jdbcType=VARCHAR})) || '%'
				                 </if>
				                 <if test="orderState != '' and orderState != null">
				                  AND	 O.ORDER_STATE = #{orderState, jdbcType=VARCHAR}
				                 </if>
				                 <if test="destinationName != '' and destinationName != null">
				                  AND	 O.DESTINATION_CD = #{destinationName, jdbcType=VARCHAR}
				                 </if>
				                 <if test="orderGubun != '' and orderGubun != null">
				                  AND	 O.ORDER_GUBUN = #{orderGubun, jdbcType=VARCHAR}
				                 </if>
				                 <if test="marketName != '' and marketName != null">
				                  AND	  O.MARKET_CD = #{marketName, jdbcType=VARCHAR}
				                 </if>
				                 <if test="currencyName != '' and currencyName != null">
				                  AND    O.CURRENCY_CD = #{currencyName, jdbcType=VARCHAR}
				                 </if>
			                   UNION ALL
			                   SELECT (O.CUSTOMER_PO_ID)         AS CUSTOMER_PO_ID 
			                        ,  O.SALES_ORDER_ID
			                        , (O.SALES_ITEM_ID )         AS SALES_ITEM_ID
			                        , (O.ITEM_ID)                AS ITEM_ID
			                        , (O.ITEM_NAME)              AS ITEM_NAME
			                        , (O.ORDER_QTY)              AS ORDER_QTY 
			                        , (NVL(O.SHIP_QTY, 0))       AS SHIP_QTY
			                        , (NVL(O.CANCEL_QTY, 0))     AS CANCEL_QTY
			                        , ''            			 AS LOCATION_CD
			                        , (O.VENDOR_CD )             AS VENDOR_CD
			                        , (O.VENDOR_NAME)            AS VENDOR_NAME
			                        , (O.DESTINATION_CD)         AS DESTINATION_CD
			                        , (O.DESTINATION_NAME)       AS DESTINATION_NAME
			                        , ''          				 AS ITEM_STOCK_ID
			                        , ''                		 AS SHIPPED_DATE
			                        , 0 AS SHIPPED_UNIT_PRICE
			                        , (O.MARKET_CD )             AS MARKET_CD
			                        , (O.MARKET_NAME )           AS MARKET_NAME
			                        , (O.CURRENCY_CD )           AS CURRENCY_CD             
			                        , (O.CURRENCY_NAME)          AS CURRENCY_NAME
			                        , ''             			 AS SHIPPED_CREATE_BY
			                        , 0            				 AS SHIPPED_INOUT_PRICE
			                        , 0   						 AS SHIPPED_EXCHANGE_RATE
			                        , (O.ORDER_STATE)            AS ORDER_STATE
			                        , (O.ORDER_STATE_NAME)       AS ORDER_STATE_NAME
									, O.DUE_DATE
			                        , (O.ORDER_GUBUN)            AS ORDER_GUBUN
			                        , (O.ORDER_GUBUN_NAME)       AS ORDER_GUBUN_NAME
			                        , O.DIVISION_CD
			                        , O.COMPANY_CD
			                        , (S.QTY)                    AS CONFIRMED_QTY
			                        , TO_CHAR(S.IO_TIME, 'YYYY-MM-DD') AS CONFIRMED_DATE
			                        , (DECODE(O.CURRENCY_CD, P.CURRENCY_CD, S.UNIT_PRICE, S.FOREIGN_UNIT_PRICE)) AS CONFIRMED_UNIT_PRICE
			                        , (S.INOUT_PRICE)            AS CONFIRMED_INOUT_PRICE
			                        , (S.CREATE_BY)              AS CONFIRMED_CREATE_BY
			                        , (NVL(S.EXCHANGE_RATE,1))   AS CONFIRMED_EXCHANGE_RATE
			                        , (P.CURRENCY_CD)            AS DEFAULT_CURRENCY
			                        , O.CUSTOMER_PO_NO
			                        , O.HS_PART_NO
			                        , O.LGE_PART_NO 
			                    FROM   MOM_SALES_ORDER_V O
			                        , (SELECT * FROM MOM_ITEM_STOCK_INOUT B
			                            WHERE B.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			                              AND B.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			                              AND B.IO_TYPE = 'O'
			                              AND B.IO_CATEGORY IN ('S003', 'S004')
			                              AND NOT EXISTS (SELECT '*'
			                                                FROM   MOM_ITEM_STOCK_INOUT IC
			                                               WHERE  IC.DIVISION_CD    = B.DIVISION_CD
			                                                 AND    IC.COMPANY_CD   = B.COMPANY_CD
			                                                 AND    IC.PREV_STOCK_INOUT_ID = B.ITEM_STOCK_INOUT_ID
			                                                 AND    IC.IO_TYPE = 'O'
			                                                 AND    IC.IO_CATEGORY = 'SC003')) S
			                        , MOM_PARAMETER P
			                   WHERE  O.DIVISION_CD    = S.DIVISION_CD(+)
			                     AND  O.COMPANY_CD     = S.COMPANY_CD(+)
			                     AND  O.SALES_ORDER_ID = S.ITEM_ORDER_ID(+)
			                     AND  O.DIVISION_CD    = P.DIVISION_CD
			                     AND  O.COMPANY_CD     = P.COMPANY_CD
			                     AND  O.DIVISION_CD	   = #{divisionCd, jdbcType=VARCHAR}
			                     AND  O.COMPANY_CD	   = #{companyCd, jdbcType=VARCHAR}
			                  <if test= "fromDate != '' and fromDate != null and toDate != '' and toDate != null">
				               AND    O.DUE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
				                                     AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997/24
				              </if>
				              <if test="customerName != '' and customerName != null">
				               AND 	  O.VENDOR_CD = #{customerName, jdbcType=VARCHAR}
				              </if>
				               <if test="itemName != '' and itemName != null">
				               AND 	  (O.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%'
                                       OR UPPER(O.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%') <!-- XMOMG18 / pyj / 검색조건 품명 추가 -->
				              </if>
				              <if test="customerPoId != '' and customerPoId != null">
				               AND    UPPER(O.CUSTOMER_PO_ID) LIKE '%' || TRIM(UPPER(#{customerPoId, jdbcType=VARCHAR})) || '%'
				              </if>
				              <if test="customerPoNo != '' and customerPoNo != null">
				               AND    UPPER(O.CUSTOMER_PO_NO) LIKE '%' || TRIM(UPPER(#{customerPoNo, jdbcType=VARCHAR})) || '%'
				              </if>
				              <if test="orderState != '' and orderState != null">
				               AND	  O.ORDER_STATE = #{orderState, jdbcType=VARCHAR}
				              </if>
				              <if test="destinationName != '' and destinationName != null">
				               AND	  O.DESTINATION_CD = #{destinationName, jdbcType=VARCHAR}
				              </if>
				              <if test="orderGubun != '' and orderGubun != null">
				               AND	  O.ORDER_GUBUN = #{orderGubun, jdbcType=VARCHAR}
				              </if>
				              <if test="marketName != '' and marketName != null">
				               AND	  O.MARKET_CD = #{marketName, jdbcType=VARCHAR}
				              </if>
				              <if test="currencyName != '' and currencyName != null">
				               AND    O.CURRENCY_CD = #{currencyName, jdbcType=VARCHAR}
				              </if>
			                ) A
			         WHERE 1 = 1
		              <if test="LocationName != '' and LocationName != null">
		               AND A.LOCATION_CD = #{LocationName, jdbcType=VARCHAR}
		              </if>
			         GROUP BY A.DIVISION_CD
			                , A.COMPANY_CD
			                , A.SALES_ORDER_ID ) A 
			     ) A
			     WHERE 1 = 1
		         <if test="compareFlag != '' and compareFlag != null">
		         	<choose>
			        	<when test="compareFlag.equals('B2BI_SHIP_QTY')">
			             AND A.B2BI_SHIP_QTY > A.SHIP_QTY
			            </when>
			            <when test="compareFlag.equals('B2BI_CONFIRMED_QTY')">
			             AND A.B2BI_CONFIRMED_QTY > A.CONFIRMED_QTY
			            </when>
			            <otherwise>
			             AND A.B2BI_SHIP_QTY > A.B2BI_CONFIRMED_QTY
			            </otherwise>
		          	</choose>
		         </if>
			     ORDER BY A.VENDOR_NAME, A.DESTINATION_NAME, A.DUE_DATE, A.CUSTOMER_PO_ID, A.SALES_ORDER_ID, A.ITEM_ID
	</select>
	
</mapper>