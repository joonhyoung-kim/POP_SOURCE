<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.quality.materialReturnHist">
	<select id="get_materialReturnHist_list" resultType="camelMap" parameterType="java.util.HashMap">
	SELECT A.* 
	  FROM (SELECT MI.ITEM_OUTPUT_ID AS ITEM_INPUT_ID 
			     , MI.IO_CATEGORY  
			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.DIVISION_CD
			     										 , MI.COMPANY_CD
			     										 , 'IO_CATEGORY'
			     										 , MI.IO_CATEGORY  )
	                  FROM   DUAL )          AS IO_CATEGORY_NAME 
			     , MI.RETURN_TYPE   
			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.DIVISION_CD
			     										 , MI.COMPANY_CD
			     										 , 'MATERIAL_RETURN_TYPE'
			     										 , MI.RETURN_TYPE  )
			          FROM   DUAL )          AS RETURN_TYPE_NAME  
			     , MI.ITEM_ID       
			     , MD.ITEM_NAME     
			     , MD.SPECIFICATION  
			     , TO_CHAR(MI.IO_TIME, 'YYYY-MM-DD')   AS IO_TIME 
			     , MI.MARKET_CD      
			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.DIVISION_CD
			     										 , MI.COMPANY_CD
			     										 , 'MARKET_CODE'
			     										 , MI.MARKET_CD  )
			          FROM   DUAL )          AS MARKET_NAME          
			     , MI.CURRENCY_CD    
			     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MI.DIVISION_CD
			     										 , MI.COMPANY_CD
			     										 , 'CURRENCY_CODE'
			     										 , MI.CURRENCY_CD  )
			          FROM   DUAL )          AS CURRENCY_NAME 
			     , NVL(MI.EXCHANGE_RATE, 1) AS EXCHANGE_RATE
			     , MI.QTY 
			     , ABS(MIC.QTY)                 AS CANCEL_QTY 
			     , TO_CHAR(MIC.IO_TIME, 'YYYY-MM-DD')   AS CANCEL_DATE 
			     , NVL2 (MIC.IO_TIME, 'Y', 'N') AS CANCEL_FLAG
			     , MD.CONVERSION_UNIT       
			     , DECODE(MIC.QTY, NULL, MI.CONVERSION_UNIT_QTY, 0) AS CONVERSION_UNIT_QTY
			     , DECODE(MI.CURRENCY_CD, MP.CURRENCY_CD, MI.UNIT_PRICE, MI.FOREIGN_UNIT_PRICE)  AS UNIT_PRICE 
			     , DECODE(MIC.QTY, NULL, MI.INOUT_PRICE, 0) AS INOUT_PRICE              
			     , DECODE(MI.IO_CATEGORY, 'MRTW002', MO.LOCATION_CD, MI.LOCATION_CD) AS FROM_LOCATION_CD                                                
			     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME(MI.DIVISION_CD
			     											 , MI.COMPANY_CD
			     											 , DECODE(MI.IO_CATEGORY, 'MRTW002', MO.LOCATION_CD, MI.LOCATION_CD))
			          FROM   DUAL)           AS FROM_LOCATION_NAME                                                
			     , MI.VENDOR_CD          AS TO_VENDOR_CD                                                      
			     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME(MI.DIVISION_CD
			     										   , MI.COMPANY_CD
			     										   , MI.VENDOR_CD)       
			          FROM   DUAL)           AS TO_VENDOR_NAME                                                    
			     , MD.ITEM_USER_ID 
			     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(MD.DIVISION_CD
			     										 , MD.COMPANY_CD
			     										 , MD.ITEM_USER_ID)
			          FROM   DUAL )          AS ITEM_USER_NAME              
			     , NVL( (SELECT 'Y' 
			               FROM MOM_ITEM_LAST 
			              WHERE DIVISION_CD = MI.DIVISION_CD 
			                AND COMPANY_CD = MI.COMPANY_CD 
			                AND ITEM_STOCK_INOUT_ID = MI.ITEM_STOCK_INOUT_ID 
			                AND ROWNUM = 1), 'N') AS CLOSE_FLAG                                                                        
			     , MI.DESCRIPTION   
			     , MI.ITEM_STOCK_INOUT_ID AS FROM_STOCK_INOUT_ID
	             , MO.ITEM_STOCK_INOUT_ID AS TO_STOCK_INOUT_ID
	             , MI.ITEM_ORDER_ID
	             , TO_CHAR(MI.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
			FROM   MOM_ITEM_STOCK_INOUT MI
			     , MOM_ITEM_DEFINITION MD 
			     , MOM_PARAMETER MP
			     , MOM_ITEM_STOCK_INOUT MIC
			     , (SELECT * 
	                  FROM MOM_ITEM_STOCK_INOUT A
	                 WHERE IO_CATEGORY IN (SELECT MC.CODE_ID
	                                         FROM MOM_CODE MC
	                                        WHERE MC.DIVISION_CD = A.DIVISION_CD
	                                          AND MC.COMPANY_CD = A.COMPANY_CD
	                                          AND MC.CODE_CLASS_ID = 'IO_CATEGORY' 
	                                          AND MC.USE_YN = 'Y' 
	                                          AND NVL (MC.ATTRIBUTE12, 'N') = 'Y')
	                  AND IO_TYPE = 'O'
	                ) MO
			WHERE  MI.DIVISION_CD = MD.DIVISION_CD
			AND    MI.COMPANY_CD  = MD.COMPANY_CD
			AND    MI.ITEM_ID     = MD.ITEM_ID
			AND    MI.DIVISION_CD = MP.DIVISION_CD
			AND    MI.COMPANY_CD  = MP.COMPANY_CD
			AND    MI.DIVISION_CD = MO.DIVISION_CD(+)
	        AND    MI.COMPANY_CD  = MO.COMPANY_CD(+)
	        AND    MI.ITEM_STOCK_INOUT_ID = MO.PREV_STOCK_INOUT_ID(+)
			AND    MI.DIVISION_CD = MIC.DIVISION_CD(+)
			AND    MI.COMPANY_CD  = MIC.COMPANY_CD(+)
			AND    MI.ITEM_STOCK_INOUT_ID     = MIC.PREV_STOCK_INOUT_ID(+)
			AND    MI.IO_TYPE                 = MIC.IO_TYPE(+)
			AND    MI.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND    MI.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND    MI.IO_TYPE     = 'I'
			AND    MI.IO_CATEGORY IN ( SELECT MC.CODE_ID
			                           FROM   MOM_CODE MC
			                           WHERE  MC.DIVISION_CD = MI.DIVISION_CD
			                           AND    MC.COMPANY_CD  = MI.COMPANY_CD                                       
			                           AND    MC.CODE_CLASS_ID = 'IO_CATEGORY'
			                           AND    MC.USE_YN      = 'Y'
			                           AND    NVL(MC.ATTRIBUTE12, 'N') = 'Y')
			<if test = "dateCombo == 'RETURN_DATE'">
			AND MI.IO_TIME BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
			                   AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997/24
			</if>
			<if test = "dateCombo == 'CREATE_DATE'">
            AND MI.CREATE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
                                   AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997/24
            </if>
			<if test = "itemId != null and itemId != ''">
			AND    (MI.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%'
			        OR UPPER(MD.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%')
			</if>
			<if test = "fromLocation != null and fromLocation != ''">
			AND MI.LOCATION_CD = #{fromLocation, jdbcType=VARCHAR}
			</if>
			<if test = "toVendor != null and toVendor != ''">
			AND MI.VENDOR_CD = #{toVendor, jdbcType=VARCHAR}
			</if>
			<if test = "returnType != null and returnType != ''">
			AND MI.RETURN_TYPE = #{returnType, jdbcType=VARCHAR}
			</if>
			<if test = "returnCategory != null and returnCategory != ''">
			AND MI.IO_CATEGORY = #{returnCategory, jdbcType=VARCHAR}
			</if>
			) A
		WHERE 1 = 1 
	   <if test = "cancelYn != null and cancelYn != ''">
        AND A.CANCEL_FLAG = #{cancelYn, jdbcType=VARCHAR}
       </if>
	   <if test = "userName != null and userName != ''">
		AND UPPER(A.ITEM_USER_NAME) LIKE '%' || TRIM(UPPER(#{userName, jdbcType=VARCHAR})) || '%'
	   </if>
	   <if test = "endYn != null and endYn != ''">
		AND A.CLOSE_FLAG = #{endYn, jdbcType=VARCHAR}
	   </if>
	    ORDER BY A.IO_TIME, A.ITEM_INPUT_ID
	</select>
	
	 <insert id="create_materialReturnCancel" statementType="CALLABLE">
    {
        CALL SP_MOM_RETURN_PKG.P_CANCEL_MATERIAL_RETURN ( 
          #{p_err_code, mode=OUT, jdbcType=VARCHAR}
        , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
        , #{divisionCd, mode=IN, jdbcType=VARCHAR}
        , #{companyCd, mode=IN, jdbcType=VARCHAR}
        , #{rtnType, mode=IN, jdbcType=VARCHAR}  
        , #{tnxType, mode=IN, jdbcType=VARCHAR} 
        ) 
    }
    </insert>
	
</mapper>