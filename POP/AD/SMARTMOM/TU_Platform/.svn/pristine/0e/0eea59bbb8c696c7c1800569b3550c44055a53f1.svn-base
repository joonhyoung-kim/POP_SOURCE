<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.equipment.emRequest">
	<select id="get_emRequest_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.DIVISION_CD
		     , A.COMPANY_CD
		     , A.REQUEST_GROUP_ID
		     , A.EQM_REQUEST_ID
		     , A.STATE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD,
		                                               A.COMPANY_CD,
		                                               'EQM_REQ_STATE',
		                                               A.STATE)
		          FROM DUAL) AS STATE_NAME
		     , A.EQUIPMENT_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_EQUIPMENT_NAME(A.DIVISION_CD,
		     												A.COMPANY_CD,
		     												A.EQUIPMENT_CD)
		     	  FROM DUAL) AS EQUIPMENT_NAME
		     , A.ITEM_ID
		     , B.ITEM_NAME
		     , B.SPECIFICATION
		     , B.UNIT
		     , A.DEPT_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD,
		                                               A.COMPANY_CD,
		                                               'DEPT_CD',
		                                               A.DEPT_CD)
		          FROM DUAL) AS DEPT_NAME
		     , A.QTY AS REQUEST_QTY
		     , TO_CHAR(A.DUE_DATE, 'YYYY-MM-DD') AS DUE_DATE
		     , A.REASON_CODE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD
                                               , A.COMPANY_CD
                                               , 'EQM_MAT_REQ_REASON'
                                               , A.REASON_CODE)
            	  FROM DUAL) AS REASON_NAME
		     , A.DESCRIPTION
		     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
		     , A.CREATE_BY
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(A.DIVISION_CD,
		                                               A.COMPANY_CD,
		                                               A.CREATE_BY)
		          FROM DUAL) AS CREATE_USER_NAME
		     , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
		     , A.UPDATE_BY
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(A.DIVISION_CD,
		                                               A.COMPANY_CD,
		                                               A.UPDATE_BY)
		          FROM DUAL) AS UPDATE_USER_NAME
		  FROM MOM_EQM_PO_REQUEST A
		     , MOM_ITEM_DEFINITION B
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID = B.ITEM_ID
		  <if test="dateCombo == 'CUSTOMER_DUE_DATE'">
		   AND A.DUE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
		                  AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997 / 24
		  </if>
		  <if test="dateCombo == 'REQUEST_TIME'">
		   AND A.CREATE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
		                     AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997 / 24
		  </if>
		  <if test="resourceCd != null and resourceCd != ''">
		   AND A.EQUIPMENT_CD = #{resourceCd, jdbcType=VARCHAR}
		  </if>
		  <if test="itemId != null and itemId != ''">
		   AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%'
		        OR UPPER(B.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%')  
		  </if>
		  <if test="specification != null and specification != ''">
		   AND UPPER(B.SPECIFICATION) LIKE '%' || TRIM(UPPER(#{specification, jdbcType=VARCHAR})) || '%'
		  </if>
		  <if test="eoRequestId != null and eoRequestId != ''">
		   AND UPPER(A.EQM_REQUEST_ID) LIKE '%' || TRIM(UPPER(#{eoRequestId, jdbcType=VARCHAR})) || '%'
		  </if>
		  <if test="state != null and state!= ''">
		   AND A.STATE = #{state, jdbcType=VARCHAR}
		  </if>
		  <if test="requester != null and requester != ''">
		   AND A.CREATE_BY = #{requester, jdbcType=VARCHAR}
		  </if>
		 ORDER BY A.EQM_REQUEST_ID, A.ITEM_ID
	</select>
	
	<insert id="create_emRequest" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  		v_req_id varchar2(40) := MOM_COMMON_PKG.FN_GET_EQM_SEQ_ID(#{divisionCd, jdbcType=VARCHAR}, 
								  									  #{companyCd, jdbcType=VARCHAR}, 
								  									  'EM_REQUEST',
								  									  MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
								  									  #{requestGroupId, jdbcType=VARCHAR},
								  									  TO_NUMBER(#{transactionSeq, jdbcType=VARCHAR}));
	  BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_EQM_PO_REQUEST (
	    	  DIVISION_CD
			, COMPANY_CD
			, EQM_REQUEST_ID
			, EQUIPMENT_CD
			, ITEM_ID
			, QTY
			, CANCEL_QTY
			, DUE_DATE
			, STATE
			, DEPT_CD
			, REQUEST_GROUP_ID
			, TRANSACTION_SEQ
			, REASON_CODE
			, DESCRIPTION
			, CREATE_DATE
			, CREATE_BY
			, UPDATE_DATE
			, UPDATE_BY
		)
		VALUES (
		    #{divisionCd, jdbcType=VARCHAR}
		  , #{companyCd, jdbcType=VARCHAR}
		  , v_req_id
		  , #{equipmentCd, jdbcType=VARCHAR}
		  , #{itemId, jdbcType=VARCHAR}
		  , #{requestQty, jdbcType=NUMERIC}
		  , ''
		  , TO_DATE(#{dueDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
		  , 'R'
		  , (SELECT DEPT_CD 
               FROM TU_USER 
              WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR} 
                AND USER_ID = #{userId, jdbcType=VARCHAR})
		  , #{requestGroupId, jdbcType=VARCHAR}
		  , #{transactionSeq, jdbcType=NUMERIC}
		  , #{reasonCode, jdbcType=VARCHAR}
		  , #{description, jdbcType=VARCHAR}
		  , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
		  , #{userId, jdbcType=VARCHAR}
		  , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
		  , #{userId, jdbcType=VARCHAR}
		)
		;
		
		INSERT INTO MOM_EQM_PO_REQUEST_HIST (
   	    	LAST_EVENT_SEQ
		  , DIVISION_CD
		  , COMPANY_CD
		  , EQM_REQUEST_ID
		  , EQUIPMENT_CD
		  , ITEM_ID
		  , QTY
		  , CANCEL_QTY
		  , DUE_DATE
		  , STATE
		  , DEPT_CD
		  , REQUEST_GROUP_ID
		  , TRANSACTION_SEQ
		  , REASON_CODE
		  , DESCRIPTION
		  , CREATE_DATE
		  , CREATE_BY
		  , UPDATE_DATE
		  , UPDATE_BY
		)
		SELECT S_ORDER_SEQ.NEXTVAL,
			   DIVISION_CD,
		       COMPANY_CD,
		       EQM_REQUEST_ID,
		       EQUIPMENT_CD,
			   ITEM_ID,
			   QTY,
			   CANCEL_QTY,
			   DUE_DATE,
			   STATE,
			   DEPT_CD,
			   REQUEST_GROUP_ID,
			   TRANSACTION_SEQ,
			   REASON_CODE,
			   DESCRIPTION,
			   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   #{userId, jdbcType=VARCHAR},
			   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   #{userId, jdbcType=VARCHAR}
		  FROM MOM_EQM_PO_REQUEST
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND EQM_REQUEST_ID = v_req_id
		 ;
		
		SELECT
		  CASE 
			WHEN COUNT(ITEM_ID) = 0 THEN 'E'
			ELSE 'S' 
		   END  
		  INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
	      FROM MOM_EQM_PO_REQUEST
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	       AND EQM_REQUEST_ID = v_req_id
		;
       
	  END
	} 
	</insert>
	
	<update id="modify_emRequest" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
	  		#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
	  	
			UPDATE MOM_EQM_PO_REQUEST
			SET    EQUIPMENT_CD = #{equipmentCd, jdbcType=VARCHAR}
				 , ITEM_ID = #{itemId, jdbcType=VARCHAR}
			     , QTY = #{requestQty, jdbcType=NUMERIC}
			     , DUE_DATE = TO_DATE(#{dueDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
			     , REASON_CODE = #{reasonCode, jdbcType=VARCHAR}
			     , DESCRIPTION = #{description, jdbcType=VARCHAR}
			     , DEPT_CD = (SELECT DEPT_CD 
                                FROM TU_USER 
                               WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                 AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR} 
                                 AND USER_ID = #{userId, jdbcType=VARCHAR})
			     , UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			     , UPDATE_BY = #{updateBy, jdbcType=VARCHAR}
			WHERE  DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND    COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND    EQM_REQUEST_ID = TRIM(UPPER(#{eqmRequestId, jdbcType=VARCHAR}))
			;
			
			INSERT INTO MOM_EQM_PO_REQUEST_HIST (
	    		LAST_EVENT_SEQ
			  , DIVISION_CD
			  , COMPANY_CD
			  , EQM_REQUEST_ID
			  , EQUIPMENT_CD
			  , ITEM_ID
			  , QTY
			  , CANCEL_QTY
			  , DUE_DATE
			  , STATE
			  , DEPT_CD
			  , REQUEST_GROUP_ID
			  , TRANSACTION_SEQ
			  , REASON_CODE
			  , DESCRIPTION
			  , CREATE_DATE
			  , CREATE_BY
			  , UPDATE_DATE
			  , UPDATE_BY
		)
		SELECT S_ORDER_SEQ.NEXTVAL,
			   DIVISION_CD,
			   COMPANY_CD,
			   EQM_REQUEST_ID,
			   EQUIPMENT_CD,
			   ITEM_ID,
			   QTY,
			   CANCEL_QTY,
			   DUE_DATE,
			   STATE,
			   DEPT_CD,
			   REQUEST_GROUP_ID,
			   TRANSACTION_SEQ,
			   REASON_CODE,
			   DESCRIPTION,
		       MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   #{userId, jdbcType=VARCHAR},
			   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   #{userId, jdbcType=VARCHAR}
		  FROM MOM_EQM_PO_REQUEST
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND EQM_REQUEST_ID = TRIM(UPPER(#{eqmRequestId, jdbcType=VARCHAR}))
		 ;
		
		SELECT
		  CASE 
			WHEN COUNT(ITEM_ID) = 0 THEN 'E'
			ELSE 'S' 
		   END  
		  INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
	      FROM MOM_EQM_PO_REQUEST
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	       AND EQM_REQUEST_ID = TRIM(UPPER(#{eqmRequestId, jdbcType=VARCHAR}))
		;
		
	  END
	}
	</update>
	
	<delete id="remove_emRequest" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
	  DECLARE
	  BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_EQM_PO_REQUEST_HIST (
	    	LAST_EVENT_SEQ
		  , DIVISION_CD
		  , COMPANY_CD
		  , EQM_REQUEST_ID
		  , EQUIPMENT_CD
		  , ITEM_ID
		  , QTY
		  , CANCEL_QTY
		  , DUE_DATE
		  , STATE
		  , DEPT_CD
		  , REQUEST_GROUP_ID
		  , TRANSACTION_SEQ
		  , REASON_CODE
		  , DESCRIPTION
		  , CREATE_DATE
		  , CREATE_BY
		  , UPDATE_DATE
		  , UPDATE_BY
		)
		SELECT S_ORDER_SEQ.NEXTVAL,
			   DIVISION_CD,
		       COMPANY_CD,
		       EQM_REQUEST_ID,
		       EQUIPMENT_CD,
		       ITEM_ID,
		       QTY,
		       CANCEL_QTY,
		       DUE_DATE,
		       'C',
		   	   DEPT_CD,
		       REQUEST_GROUP_ID,
		       TRANSACTION_SEQ,
		       REASON_CODE,
		       'Delete Data',
		       MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   #{userId, jdbcType=VARCHAR},
			   MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR}),
			   #{userId, jdbcType=VARCHAR}
		  FROM MOM_EQM_PO_REQUEST
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND EQM_REQUEST_ID = TRIM(UPPER(#{eqmRequestId, jdbcType=VARCHAR}))
		 ;
			
		DELETE FROM MOM_EQM_PO_REQUEST
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND EQM_REQUEST_ID = TRIM(UPPER(#{eqmRequestId, jdbcType=VARCHAR}))
		;
		 
		SELECT
		  CASE 
			WHEN COUNT(ITEM_ID) > 0 THEN 'E'
			ELSE 'S' 
		   END  
		  INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
	      FROM MOM_EQM_PO_REQUEST
	     WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	       AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
	       AND EQM_REQUEST_ID = TRIM(UPPER(#{eqmRequestId, jdbcType=VARCHAR}))
		;
       
	  END
	}  
	</delete>
	
	<select id="get_emRequestExcelPrintCount_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT COUNT(*) AS ROW_COUNT
		  FROM MOM_EQM_PO_REQUEST A
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.REQUEST_GROUP_ID IN(${requestGroupIds})
		   AND EXISTS(SELECT '*'
		   				FROM MOM_CODE
		   			   WHERE DIVISION_CD = A.DIVISION_CD
		   			     AND COMPANY_CD = A.COMPANY_CD
		   			     AND CODE_CLASS_ID = 'EQM_REQ_STATE'
		   			     AND NVL(USE_YN, 'N') = 'Y'
		   			     AND CODE_ID = A.STATE
		   			     AND ATTRIBUTE4 = 'Y')
	</select>
	
	<select id="get_emRequestExcelPrint_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.DIVISION_CD AS DIVISION_CD
		     , A.COMPANY_CD AS COMPANY_CD
		     , A.REQUEST_GROUP_ID AS 그룹번호
		     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD') AS 작성일시
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD,
		                                               A.COMPANY_CD,
		                                               'DEPT_CD',
		                                               A.DEPT_CD)
		          FROM DUAL) AS 부서
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(A.DIVISION_CD,
		                                               A.COMPANY_CD,
		                                               A.CREATE_BY)
		          FROM DUAL) AS 작성자
		     , A.ITEM_ID AS PLIST_ITEM_ID
		     , B.ITEM_NAME AS PLIST_ITEM_NAME
		     , B.SPECIFICATION AS PLIST_SPECIFICATION
		     , A.QTY AS PLIST_QTY
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD
		                                             , A.COMPANY_CD
		                                             , 'EQ_MAT_REQ_REASON'
		                                             , A.REASON_CODE)
            	  FROM DUAL) AS PLIST_REASON_NAME
		     , A.DESCRIPTION AS PLIST_DESCRIPTION
		  FROM MOM_EQM_PO_REQUEST A
		     , MOM_ITEM_DEFINITION B
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID = B.ITEM_ID
		   AND EXISTS(SELECT '*'
		   				FROM MOM_CODE
		   			   WHERE DIVISION_CD = A.DIVISION_CD
		   			     AND COMPANY_CD = A.COMPANY_CD
		   			     AND CODE_CLASS_ID = 'EQM_REQ_STATE'
		   			     AND NVL(USE_YN, 'N') = 'Y'
		   			     AND CODE_ID = A.STATE
		   			     AND ATTRIBUTE4 = 'Y')
		   AND A.REQUEST_GROUP_ID IN(${requestGroupIds})
	</select>
	
	<select id="get_emRequestGroupId_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT MOM_COMMON_PKG.FN_GET_EQM_SEQ_ID(#{divisionCd, jdbcType=VARCHAR}
										      , #{companyCd, jdbcType=VARCHAR}
										      , 'EM_REQUEST'
										      , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})) AS REQUEST_GROUP_ID
		  FROM DUAL
	</select>
	
</mapper>