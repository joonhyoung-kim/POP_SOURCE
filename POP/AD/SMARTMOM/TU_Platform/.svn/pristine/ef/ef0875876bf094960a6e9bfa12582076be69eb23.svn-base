<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.equipment.emOrder">
	<select id="get_emOrder_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.DIVISION_CD
		     , A.COMPANY_CD
		     , A.EQM_REQUEST_ID
		     , B.VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME( B.DIVISION_CD
		                                                , B.COMPANY_CD
		                                                , B.VENDOR_CD) 
		          FROM DUAL) AS VENDOR_NAME
		     , NVL(B.DEPARTURE_VENDOR_CD, B.VENDOR_CD) AS DEPARTURE_VENDOR_CD
			 , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME( B.DIVISION_CD
		                                                , B.COMPANY_CD
		                                                , NVL(B.DEPARTURE_VENDOR_CD , B.VENDOR_CD)) 
		          FROM DUAL) AS DEPARTURE_VENDOR_NAME
		     , A.ITEM_ID
		     , B.ITEM_NAME
		     , B.SPECIFICATION
		     , B.UNIT
		     , A.DEPT_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD
		                                             , A.COMPANY_CD
		                                             , 'DEPT_CD'
		                                             , A.DEPT_CD)
		          FROM DUAL) AS DEPT_NAME
		     , A.QTY AS REQUEST_QTY
		     , B.MOQ
		     , A.CANCEL_QTY
		     , TO_CHAR(A.DUE_DATE, 'YYYY-MM-DD') AS DUE_DATE
		     , A.STATE
		     , P.MARKET_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (P.DIVISION_CD
                                                      , P.COMPANY_CD
                                                      , 'MARKET_CODE'
                                                      , P.MARKET_CD)
                  FROM DUAL) AS MARKET_NAME 
             , P.CURRENCY_CD
             , (SELECT MOM_COMMON_PKG.FN_GET_MATERIAL_PRICE (A.DIVISION_CD
                                                           , A.COMPANY_CD
                                                           , B.VENDOR_CD
                                                           , A.ITEM_ID
                                                           , P.MARKET_CD
                                                           , P.CURRENCY_CD
                                                           , A.DUE_DATE)
                  FROM DUAL) AS UNIT_PRICE
		     , A.REQUEST_GROUP_ID
		     , A.TRANSACTION_SEQ
		     , A.REASON_CODE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME ( A.DIVISION_CD
		                                               , A.COMPANY_CD
		                                               , 'EQM_MAT_REQ_REASON'
		                                               , A.REASON_CODE)
            	  FROM DUAL) AS REASON_NAME
		     , TO_CHAR(A.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
		     , A.CREATE_BY
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(A.DIVISION_CD
		                                             , A.COMPANY_CD
		                                             , A.CREATE_BY)
		          FROM DUAL) AS CREATE_USER_NAME
		     , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
		     , A.UPDATE_BY
		     , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME(A.DIVISION_CD
		                                             , A.COMPANY_CD
		                                             , A.UPDATE_BY)
		          FROM DUAL) AS UPDATE_USER_NAME
		  FROM MOM_EQM_PO_REQUEST A
		     , MOM_ITEM_DEFINITION B
		     , MOM_PARAMETER P
		 WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND A.DIVISION_CD = B.DIVISION_CD
		   AND A.COMPANY_CD = B.COMPANY_CD
		   AND A.ITEM_ID = B.ITEM_ID
		   AND A.DIVISION_CD = P.DIVISION_CD
           AND A.COMPANY_CD = P.COMPANY_CD
		   AND EXISTS(SELECT '*'
		                FROM MOM_CODE MC
		               WHERE MC.DIVISION_CD = A.DIVISION_CD
		                 AND MC.COMPANY_CD = A.COMPANY_CD
		                 AND MC.CODE_CLASS_ID = 'EQM_REQ_STATE'
		                 AND MC.CODE_ID = A.STATE
		                 AND MC.ATTRIBUTE1 = 'Y'
		                 AND NVL(MC.USE_YN, 'N') = 'Y')
		  <if test="dateCombo == 'CUSTOMER_DUE_DATE'">
		   AND A.DUE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
		                  AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997 / 24
		  </if>
		  <if test="dateCombo == 'REQUEST_TIME'">
		   AND A.CREATE_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
		                     AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997 / 24
		  </if>
		  <if test="specification != null and specification != ''">
		   AND UPPER(B.SPECIFICATION) LIKE '%' || TRIM(UPPER(#{specification, jdbcType=VARCHAR})) || '%'
		  </if>
		  <if test="eoRequestId != null and eoRequestId != ''">
		   AND A.EQM_REQUEST_ID LIKE '%' || TRIM(UPPER(#{eoRequestId, jdbcType=VARCHAR})) || '%' 
		  </if>
		  <if test="deptCd != null and deptCd != ''">
		   AND A.DEPT_CD = #{deptCd, jdbcType=VARCHAR}
		  </if>
		  <if test="createUserName != null and createUserName !=''">
		   AND A.CREATE_BY = #{createUserName, jdbcType=VARCHAR}
		  </if> 
		  <if test="itemId != null and itemId != ''">
		    AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%'
		        OR UPPER(B.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%')
		  </if>
		 ORDER BY A.REQUEST_GROUP_ID, A.EQM_REQUEST_ID, B.VENDOR_CD, B.DEPARTURE_VENDOR_CD, A.ITEM_ID
	</select>
	
	<insert id="create_emOrder" statementType="CALLABLE">
	{
        CALL SP_MOM_EQUIPMENT_PKG.P_CREATE_EQM_ORDER ( 
             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
		   , #{eqmRequestId, mode=IN, jdbcType=VARCHAR}
           , #{vendorCd, mode=IN, jdbcType=VARCHAR}
           , #{departureVendorCd, mode=IN, jdbcType=VARCHAR}
           , #{locationCd, mode=IN, jdbcType=VARCHAR}
           , #{orderQty, mode=IN, jdbcType=NUMERIC}
           , TO_DATE(#{dueDate, mode=IN, jdbcType=VARCHAR}, 'YYYY-MM-DD')
           , #{currencyCd, mode=IN, jdbcType=VARCHAR}
           , #{marketCd, mode=IN, jdbcType=VARCHAR}
           , #{unitPrice, mode=IN, jdbcType=NUMERIC}
           , #{description, mode=IN, jdbcType=VARCHAR}
           , #{updateBy, mode=IN, jdbcType=VARCHAR}
           , #{orderGroupId, mode=IN, jdbcType=VARCHAR}
           , #{transactionSeq, mode=IN, jdbcType=NUMERIC}
           , #{itemId, mode=IN, jdbcType=VARCHAR} 
        )
    }
	</insert>
	
	<select id="get_emOrderGroupId_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT MOM_COMMON_PKG.FN_GET_EQM_SEQ_ID(#{divisionCd, mode=IN, jdbcType=VARCHAR}
           									  , #{companyCd, mode=IN, jdbcType=VARCHAR}
           									  , 'EM_ORDER'
           									  , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})) AS ORDER_GROUP_ID
		  FROM DUAL
	</select>
	
</mapper>