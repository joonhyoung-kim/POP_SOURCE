<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.quality.qualityInput">
	
	<!-- modify_hists 
    * XMOMA11 / 20191106 / gyp / SQL 정리, TRIM 추가
     -->
	<select id="get_qualityInputUp_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT MO.ITEM_ID
		     , MID.ITEM_NAME
		     , MID.SPECIFICATION
		     , MID.ITEM_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( MID.DIVISION_CD
		                                              , MID.COMPANY_CD
		                                              , 'ITEM_TYPE'
		                                              , MID.ITEM_TYPE) 
		          FROM DUAL) AS ITEM_TYPE_NAME
		     , MO.MATERIAL_ORDER_ID
		     , MD.MATERIAL_DEPARTURE_ID
		     , MO.VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME(MO.DIVISION_CD
		                                               , MO.COMPANY_CD
		                                               , MO.VENDOR_CD )
		        FROM  DUAL)     AS VENDOR_NAME   
		     , NVL(MO.DEPARTURE_VENDOR_CD, MO.VENDOR_CD) AS DEPARTURE_VENDOR_CD
		     , (SELECT MOM_COMMON_PKG.FN_GET_VENDOR_NAME(MO.DIVISION_CD
		                                               , MO.COMPANY_CD
		                                               , NVL(MO.DEPARTURE_VENDOR_CD, MO.VENDOR_CD) )
		        FROM  DUAL)     AS DEPARTURE_VENDOR_NAME   
		     , MO.ORDER_QTY
		     , MD.DEPARTURE_QTY
		     , TO_CHAR(MO.ORDER_DATE, 'YYYY-MM-DD') AS ORDER_DATE
		     , TO_CHAR(MD.DEPARTURE_DATE, 'YYYY-MM-DD') AS DEPARTURE_DATE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( MD.DIVISION_CD
		                                              , MD.COMPANY_CD
		                                              , 'MATERIAL_DEPARTURE_STATE'
		                                              , MD.DEPARTURE_STATE) 
		          FROM DUAL) AS DEPARTURE_STATE
		     , NVL(MD.IQC_FLAG, 'N') AS IQC_FLAG
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME( MD.DIVISION_CD
		                                              , MD.COMPANY_CD
		                                              , 'USE_FLAG'
		                                              , NVL(MD.IQC_FLAG, 'N')) 
		          FROM DUAL) AS IQC_FLAG_NAME
		FROM   MOM_MATERIAL_ORDER MO
		     , MOM_MATERIAL_DEPARTURE MD
		     , MOM_ITEM_DEFINITION MID
		WHERE  MO.DIVISION_CD = MD.DIVISION_CD
		AND    MO.COMPANY_CD  = MD.COMPANY_CD
		AND    MO.MATERIAL_ORDER_ID = MD.MATERIAL_ORDER_ID
		AND    MO.DIVISION_CD = MID.DIVISION_CD(+)
		AND    MO.COMPANY_CD  = MID.COMPANY_CD(+)
		AND    MO.ITEM_ID     = MID.ITEM_ID(+)
		AND    MD.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND    MD.COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
		AND    MD.IQC_FLAG = 'Y'
        AND    MD.DEPARTURE_STATE IN ('DEPARTURE', 'WAIT_GR')
		AND    MO.ORDER_DATE BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR},'YYYY-MM-DD') 
		                     AND     TO_DATE(#{toDate, jdbcType=VARCHAR},'YYYY-MM-DD')
	   <if test="itemName != null and itemName != ''">
		AND (MO.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR} || '%'))
		     OR UPPER(MID.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemName, jdbcType=VARCHAR})) || '%')
	   </if>
	   <if test="vendorName != null and vendorName != ''">
		AND MO.VENDOR_CD = #{vendorName, jdbcType=VARCHAR}
	   </if>
	   <if test="orderType != null and orderType != ''">
      	AND MO.ORDER_FLAG = #{orderType, jdbcType=VARCHAR}
	   </if>
	   ORDER BY MO.MATERIAL_ORDER_ID
	</select>

	<select id="get_qualityInputDown_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT A.MEASURE_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD,A.COMPANY_CD, 'MEASURE_TYPE', A.MEASURE_TYPE) FROM DUAL) AS MEASURE_TYPE_NAME
		     , A.GAUGE_METHOD  
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'GAUGE_METHOD', A.GAUGE_METHOD) FROM DUAL) AS GAUGE_METHOD_NAME
		     , A.MEASURE_SPEC 
		     , A.CHECK_METHOD  
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'CHECK_METHOD', A.GAUGE_METHOD) FROM DUAL) AS GAUGE_METHOD_NAME
		     , A.MEASURE_METHOD  
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(A.DIVISION_CD, A.COMPANY_CD, 'MEASURE_METHOD', A.MEASURE_METHOD) FROM DUAL) AS CHECK_METHOD_NAME
		     , DECODE(A.MEASURE_METHOD, 'COUNT', '', NVL(A.TARGET_TYPE, 'ALL')) AS    TARGET_TYPE
		     , A.TARGET
		     , A.USL
		     , A.LSL
		     , MR.ITEM_VALUE1
		     , MR.ITEM_VALUE2
		     , MR.ITEM_VALUE3
		     , MR.ITEM_VALUE4
		     , MR.ITEM_VALUE5
		     , A.UNIT
		     , A.SAMPLING_BASE
		     , CASE WHEN A.SAMPLE_CNT > A.DEPARTURE_QTY THEN A.DEPARTURE_QTY
                    ELSE A.SAMPLE_CNT END SAMPLE_CNT
		     , MR.DEFECT_QTY
		     , MR.JUDGMENT_ID
		     , DECODE(MR.JUDGMENT_ID, 'Y', #{MESSAGES30064, jdbcType=VARCHAR}, 'N', #{MESSAGES30063, jdbcType=VARCHAR}) AS JUDGMENT_NAME
		     , MR.PROCESS_DESCRIPTION  
		     , TO_CHAR(NVL(MR.HANDLING_TIME, TRUNC(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(A.DIVISION_CD, A.COMPANY_CD))), 'YYYY-MM-DD')  AS HANDLING_TIME
		     , MR.REASON_CODE    
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME(MR.DIVISION_CD, MR.COMPANY_CD, 'IQC_REASON_CODE', MR.REASON_CODE) FROM DUAL) AS REASON_NAME
		     , MR.DESCRIPTION    
		     , MR.DEFECT_BY       
		     , MR.PROBLEM_REASON  
		     , DECODE(NVL((SELECT 'Y'
				             FROM MOM_FILE
				            WHERE ENTITY_ID = MR.DEFECT_RESULT_ID
				              AND USE_YN = 'Y'
				              AND DIVISION_CD = MR.DIVISION_CD
				              AND COMPANY_CD = MR.COMPANY_CD
				              AND ROWNUM = 1), 'N')
			          , 'Y', 'Y', 'N') AS IS_FILE
		     , A.MATERIAL_DEPARTURE_ID
		     , MR.DEFECT_RESULT_ID  
		     , A.DIVISION_CD
		     , A.COMPANY_CD
		     , A.ITEM_ID
		     , A.MATERIAL_ORDER_ID
		     , A.DEPARTURE_QTY
		FROM   (SELECT MS.MEASURE_TYPE
		             , MS.GAUGE_METHOD
		             , MS.MEASURE_SPEC
		             , MS.CHECK_METHOD
		             , MS.MEASURE_METHOD
		             , MS.TARGET_TYPE
		             , MS.TARGET
		             , MS.USL
		             , MS.LSL
		             , MS.SEQ
		             , MID.UNIT
		             , MS.SAMPLING_BASE
		             , MS.SAMPLE_CNT
		             , MD.MATERIAL_DEPARTURE_ID
		             , MD.DIVISION_CD
		             , MD.COMPANY_CD
		             , MO.ITEM_ID
		             , MO.MATERIAL_ORDER_ID
		             , MD.DEPARTURE_QTY
		        FROM   MOM_MATERIAL_ORDER MO
		             , MOM_MATERIAL_DEPARTURE MD
		             , MOM_MEASURE_SPEC MS
		             , MOM_ITEM_DEFINITION MID
		        WHERE  MO.DIVISION_CD = MD.DIVISION_CD
		        AND    MO.COMPANY_CD  = MD.COMPANY_CD
		        AND    MO.MATERIAL_ORDER_ID = MD.MATERIAL_ORDER_ID
		        AND    MO.DIVISION_CD = MS.DIVISION_CD
		        AND    MO.COMPANY_CD  = MS.COMPANY_CD
		        AND    MO.ITEM_ID     = MS.ITEM_ID
		        AND    MO.DIVISION_CD = MID.DIVISION_CD
                AND    MO.COMPANY_CD = MID.COMPANY_CD
                AND    MO.ITEM_ID = MID.ITEM_ID
		        AND    MD.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		        AND    MD.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		        AND    MD.MATERIAL_DEPARTURE_ID = #{materialDepartureId, jdbcType=VARCHAR}
		        AND    MS.MEASURE_TYPE = 'IQC'
		        AND	   MS.SAMPLE_CNT > 0 
		        AND    MS.USE_YN = 'Y') A
		     , MOM_DEFECT_RESULT MR
		WHERE  A.DIVISION_CD = MR.DIVISION_CD(+)
		AND    A.COMPANY_CD  = MR.COMPANY_CD(+)
		AND    A.MATERIAL_DEPARTURE_ID = MR.MATERIAL_DEPARTURE_ID(+)            
		AND    A.GAUGE_METHOD = MR.GAUGE_METHOD(+)
		ORDER BY A.SEQ
	</select>
	
	<delete id="remove_checkIqc" parameterType="java.util.HashMap">
		DELETE 
		  FROM MOM_IQC_UPLOAD
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	</delete>
	
	<insert id="create_checkIqc" parameterType="java.util.HashMap">
		INSERT INTO MOM_IQC_UPLOAD (
			DIVISION_CD,
			COMPANY_CD,
			MEASURE_TYPE,
			ITEM_ID,
			MATERIAL_ORDER_ID,
			MATERIAL_DEPARTURE_ID,
			GAUGE_METHOD,
			ITEM_VALUE1,
			ITEM_VALUE2,
			ITEM_VALUE3,
			ITEM_VALUE4,
			ITEM_VALUE5,
			HANDLING_TIME,
			PROCESS_DESCRIPTION,
			REASON_CODE,
			DESCRIPTION,
			PROBLEM_REASON,
			DEFECT_BY,
			DEFECT_RESULT_ID,
			BUTTON_TYPE
		) 
		VALUES (
			#{divisionCd, jdbcType=VARCHAR},
			#{companyCd, jdbcType=VARCHAR},
			#{measureType, jdbcType=VARCHAR},
			#{itemId, jdbcType=VARCHAR},
			#{materialOrderId, jdbcType=VARCHAR},
			#{materialDepartureId, jdbcType=VARCHAR},
			#{gaugeMethod, jdbcType=VARCHAR},
			#{itemValue1, jdbcType=VARCHAR},
			#{itemValue2, jdbcType=VARCHAR},
			#{itemValue3, jdbcType=VARCHAR},
			#{itemValue4, jdbcType=VARCHAR},
			#{itemValue5, jdbcType=VARCHAR},
			TO_DATE(SUBSTR(#{handlingTime, jdbcType=VARCHAR}, 0, 10), 'YYYY-MM-DD'),
			#{processDescription, jdbcType=VARCHAR},
			#{reasonCode, jdbcType=VARCHAR},
			#{description, jdbcType=VARCHAR},
			#{problemReason, jdbcType=VARCHAR},
			#{defectBy, jdbcType=VARCHAR},
			#{defectResultId, jdbcType=VARCHAR},
			#{buttonType, jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- modify_hists 
    * XMOMA11 / 20191106 / gyp / 사용하지 않는 sql 확인 후 삭제예정
     -->
	<update id="modify_checkIqc" parameterType="java.util.HashMap">
		UPDATE MOM_IQC_UPLOAD
		SET ITEM_VALUE1 = #{itemValue1, jdbcType=VARCHAR},
			ITEM_VALUE2 = #{itemValue2, jdbcType=VARCHAR},
			ITEM_VALUE3 = #{itemValue3, jdbcType=VARCHAR},
			ITEM_VALUE4 = #{itemValue4, jdbcType=VARCHAR},
			ITEM_VALUE5 = #{itemValue5, jdbcType=VARCHAR}
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND MEASURE_TYPE = #{measureType, jdbcType=VARCHAR}
		AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
		AND MATERIAL_ORDER_ID = #{materialOrderId, jdbcType=VARCHAR}
		AND MATERIAL_DEPARTURE_ID = #{materialDepartureId, jdbcType=VARCHAR}
		AND GAUGE_METHOD = #{gaugeMethod, jdbcType=VARCHAR}
		AND HANDLING_TIME = TO_DATE(SUBSTR(#{handlingTime, jdbcType=VARCHAR}, 0, 10), 'YYYY-MM-DD')
		AND PROCESS_DESCRIPTION = #{processDescription, jdbcType=VARCHAR}
		AND REASON_CODE = #{reasonCode, jdbcType=VARCHAR}
	</update>
	
	<insert id="create_upsertIqc" statementType="CALLABLE">
	{
        CALL SP_MOM_QA_PKG.P_UPSERT_IQC (
             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
           , #{userId, mode=IN, jdbcType=VARCHAR}
        )
    }
	</insert>

</mapper>