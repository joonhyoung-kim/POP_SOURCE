<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.reference.document.eco">
	<select id="get_eco_list" resultType="camelMap" parameterType="java.util.HashMap">
    SELECT ECO_NO
	     , TO_CHAR(START_DATE, 'YYYY-MM-DD') AS START_DATE
	     , TO_CHAR(END_DATE, 'YYYY-MM-DD') AS END_DATE
	     , USE_YN
	  FROM MOM_ECO_MASTER
	  WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	  AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	 ORDER BY ECO_NO
	</select>
	
	<select id="get_item_list" resultType="camelMap" parameterType="java.util.HashMap">
    SELECT ECO_NO
	     , ITEM_ID
	     , USE_YN
	     , DESCRIPTION
	     , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
	     , CREATE_BY
	     , TO_CHAR(UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
	     , UPDATE_BY
	  FROM MOM_ECO_ITEM_MAPPING
	 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
	   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	   AND ECO_NO = #{ecoNo, jdbcType=VARCHAR}
	  ORDER BY ITEM_ID
	</select>

	<insert id="create_eco" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_ECO_MASTER(
				    DIVISION_CD
				  , COMPANY_CD
				  , ECO_NO
				  , START_DATE
				  , END_DATE
				  , USE_YN
				  , DESCRIPTION
				  , CREATE_DATE
				  , CREATE_BY
				  , UPDATE_DATE
				  , UPDATE_BY
				  )
		VALUES(
				  #{divisionCd, jdbcType=VARCHAR}
				, #{companyCd, jdbcType=VARCHAR}
				, UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
				, #{startDate, jdbcType=VARCHAR}
				, #{endDate, jdbcType=VARCHAR}
				, NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})), 'Y')
				, #{description, jdbcType=VARCHAR}
				, MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
				, #{userId, jdbcType=VARCHAR}
				, MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
				, #{userId, jdbcType=VARCHAR}
		);
				
		INSERT INTO MOM_ECO_MASTER_HIST(
				LAST_EVENT_SEQ
			  ,	DIVISION_CD
			  , COMPANY_CD
			  , ECO_NO
			  , START_DATE
			  , END_DATE
			  , USE_YN
			  , DESCRIPTION
			  , CREATE_DATE
			  , CREATE_BY
			  , UPDATE_DATE
			  , UPDATE_BY
				)
		SELECT s_order_seq.nextval
			  , DIVISION_CD
			  , COMPANY_CD
			  , ECO_NO
			  , START_DATE
			  , END_DATE
			  , USE_YN
			  , DESCRIPTION
			  , CREATE_DATE
			  , CREATE_BY
			  , UPDATE_DATE
			  , UPDATE_BY
		FROM  MOM_ECO_MASTER
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}));
		
		SELECT
			CASE 
				WHEN COUNT(ECO_NO) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_ECO_MASTER
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
		;
		END
	}
	</insert>

	<update id="modify_eco" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		UPDATE MOM_ECO_MASTER
		  SET START_DATE = TO_DATE(#{startDate,jdbcType=VARCHAR}, 'yyyy-mm-dd')
		    , END_DATE = TO_DATE(#{endDate,jdbcType=VARCHAR}, 'yyyy-mm-dd')
			, DESCRIPTION = #{description,jdbcType=VARCHAR}
			, UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd,jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			, UPDATE_BY = #{userId, jdbcType=VARCHAR}
			, USE_YN = UPPER(TRIM(#{useYn, jdbcType=VARCHAR}))
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
		;
		
		INSERT INTO MOM_ECO_MASTER_HIST(
				LAST_EVENT_SEQ
			  ,	DIVISION_CD
			  , COMPANY_CD
			  , ECO_NO
			  , START_DATE
			  , END_DATE
			  , USE_YN
			  , DESCRIPTION
			  , CREATE_DATE
			  , CREATE_BY
			  , UPDATE_DATE
			  , UPDATE_BY
				)
		SELECT s_order_seq.nextval
			  , DIVISION_CD
			  , COMPANY_CD
			  , ECO_NO
			  , START_DATE
			  , END_DATE
			  , USE_YN
			  , DESCRIPTION
			  , CREATE_DATE
			  , CREATE_BY
			  , UPDATE_DATE
			  , UPDATE_BY
		FROM  MOM_ECO_MASTER
		WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(ECO_NO) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_ECO_MASTER
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
		;		
		END
		}
	</update>

	<delete id="remove_eco" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
		#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_ECO_MASTER_HIST(
				LAST_EVENT_SEQ
			  , DIVISION_CD
			  , COMPANY_CD
			  , ECO_NO
			  , START_DATE
			  , END_DATE
			  , USE_YN
			  , DESCRIPTION
			  , CREATE_DATE
			  , CREATE_BY
			  , UPDATE_DATE
			  , UPDATE_BY
				)
		SELECT s_order_seq.nextval
			  , DIVISION_CD
			  , COMPANY_CD
			  , ECO_NO
			  , START_DATE
			  , END_DATE
			  , USE_YN
			  , DESCRIPTION
			  , CREATE_DATE
			  , CREATE_BY
			  , UPDATE_DATE
			  , UPDATE_BY
		FROM MOM_ECO_MASTER
	   WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		 AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		 AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
		;
		
		DELETE 
		  FROM MOM_ECO_MASTER
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(ECO_NO) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_ECO_MASTER
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
		;
		END
		}
	</delete>
	
	<insert id="create_item" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_ECO_ITEM_MAPPING(
				    DIVISION_CD
				  , COMPANY_CD
				  , ECO_NO
				  , ITEM_ID
				  , USE_YN
				  , DESCRIPTION
				  , CREATE_DATE
				  , CREATE_BY
				  , UPDATE_DATE
				  , UPDATE_BY
				  )
		VALUES(
				    #{divisionCd, jdbcType=VARCHAR}
				  , #{companyCd, jdbcType=VARCHAR}
				  , #{ecoNo, jdbcType=VARCHAR}
				  , #{itemId, jdbcType=VARCHAR}
				  , NVL(UPPER(TRIM(#{useYn, jdbcType=VARCHAR})), 'Y')
				  , #{description, jdbcType=VARCHAR}
				  , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
				  , #{userId, jdbcType=VARCHAR}
				  , MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd, jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
				  , #{userId, jdbcType=VARCHAR}
		);
				
		INSERT INTO MOM_ECO_ITEM_MAPPING_HIST(
					LAST_EVENT_SEQ
				  ,	DIVISION_CD
				  , COMPANY_CD
				  , ECO_NO
				  , ITEM_ID
				  , USE_YN
				  , DESCRIPTION
				  , CREATE_DATE
				  , CREATE_BY
				  , UPDATE_DATE
				  , UPDATE_BY
					)
		     SELECT s_order_seq.nextval
			      ,	DIVISION_CD
				  , COMPANY_CD
				  , ECO_NO
				  , ITEM_ID
				  , USE_YN
				  , DESCRIPTION
				  , CREATE_DATE
				  , CREATE_BY
				  , UPDATE_DATE
				  , UPDATE_BY
			   FROM MOM_ECO_ITEM_MAPPING
			  WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			    AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			    AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
			    AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}));
		
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_ECO_ITEM_MAPPING
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
			AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
		END
	}
	</insert>

	<update id="modify_item" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
			#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		UPDATE MOM_ECO_ITEM_MAPPING
		   SET DESCRIPTION = #{description,jdbcType=VARCHAR}
			 , UPDATE_DATE = MOM_COMMON_PKG.FN_GET_LOCAL_TIME(#{divisionCd,jdbcType=VARCHAR}, #{companyCd, jdbcType=VARCHAR})
			 , UPDATE_BY = #{userId, jdbcType=VARCHAR}
			 , USE_YN = UPPER(TRIM(#{useYn, jdbcType=VARCHAR}))
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
		   AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
		
		INSERT INTO MOM_ECO_ITEM_MAPPING_HIST(
					LAST_EVENT_SEQ
				  ,	DIVISION_CD
				  , COMPANY_CD
				  , ECO_NO
				  , ITEM_ID
				  , USE_YN
				  , DESCRIPTION
				  , CREATE_DATE
				  , CREATE_BY
				  , UPDATE_DATE
				  , UPDATE_BY
					)
		     SELECT s_order_seq.nextval
			      ,	DIVISION_CD
				  , COMPANY_CD
				  , ECO_NO
				  , ITEM_ID
				  , USE_YN
				  , DESCRIPTION
				  , CREATE_DATE
				  , CREATE_BY
				  , UPDATE_DATE
				  , UPDATE_BY
			   FROM MOM_ECO_ITEM_MAPPING
			  WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			    AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
			    AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
			    AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'E'
				ELSE 'S' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_ECO_ITEM_MAPPING
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
		    AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;		
		END
		}
	</update>

	<delete id="remove_item" statementType="CALLABLE" parameterType="java.util.HashMap">
	{ CALL
		DECLARE
		BEGIN
		#{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String} := 'E';
			
		INSERT INTO MOM_ECO_ITEM_MAPPING_HIST(
				LAST_EVENT_SEQ
			  ,	DIVISION_CD
			  , COMPANY_CD
			  , ECO_NO
			  , ITEM_ID
			  , USE_YN
			  , DESCRIPTION
			  , CREATE_DATE
			  , CREATE_BY
			  , UPDATE_DATE
			  , UPDATE_BY
				)
		SELECT s_order_seq.nextval
			  ,	DIVISION_CD
			  , COMPANY_CD
			  , ECO_NO
			  , ITEM_ID
			  , USE_YN
			  , DESCRIPTION
			  , CREATE_DATE
			  , CREATE_BY
			  , UPDATE_DATE
			  , UPDATE_BY
		FROM MOM_ECO_ITEM_MAPPING
	   WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		 AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		 AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
	     AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
		
		DELETE 
		  FROM MOM_ECO_ITEM_MAPPING
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
	       AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
		
		SELECT
			CASE 
				WHEN COUNT(ITEM_ID) = 0 THEN 'S'
				ELSE 'E' 
			END  
			INTO #{p_err_code, mode=OUT, jdbcType=VARCHAR, javaType=String}
		FROM MOM_ECO_ITEM_MAPPING
		WHERE 
			    DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
			AND COMPANY_CD  = #{companyCd, jdbcType=VARCHAR}
			AND ECO_NO = UPPER(TRIM(#{ecoNo, jdbcType=VARCHAR}))
	        AND ITEM_ID = UPPER(TRIM(#{itemId, jdbcType=VARCHAR}))
		;
		END
		}
	</delete>
	
	<select id="get_checkItem_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT COUNT(*) AS CNT 
		  FROM MOM_ITEM_DEFINITION
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
		   AND ITEM_ID = #{itemId, jdbcType=VARCHAR}
	</select>
</mapper>