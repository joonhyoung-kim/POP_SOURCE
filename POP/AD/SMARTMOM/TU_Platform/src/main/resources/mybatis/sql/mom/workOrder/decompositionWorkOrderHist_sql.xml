<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.workOrder.workOrderCreate">
	<select id="get_decompositionWorkOrderHist_list" resultType="camelMap" parameterType="java.util.HashMap">
		SELECT MW.DIVISION_CD
             , MW.COMPANY_CD
             , MW.WORK_ORDER_ID
             , MI.ITEM_STOCK_INOUT_ID
             , MI.ITEM_STOCK_ID
             , MID.ITEM_ID AS P_ITEM_ID
             , MID.ITEM_NAME AS P_ITEM_NAME
             , MIDD.ITEM_ID
             , MIDD.ITEM_NAME AS ITEM_NAME
             , MID.SPECIFICATION AS P_SPECIFICATION
             , MIDD.SPECIFICATION
             , MID.ITEM_TYPE AS P_ITEM_TYPE
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (MID.DIVISION_CD
		                                              , MID.COMPANY_CD
		                                              , 'ITEM_TYPE'
		                                              , MID.ITEM_TYPE)
		          FROM DUAL) AS P_ITEM_TYPE_NAME
             , MIDD.ITEM_TYPE
		     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (MIDD.DIVISION_CD
		                                              , MIDD.COMPANY_CD
		                                              , 'ITEM_TYPE'
		                                              , MIDD.ITEM_TYPE)
		          FROM DUAL) AS ITEM_TYPE_NAME
             , MI.LOCATION_CD
             , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (MI.DIVISION_CD
                                                          , MI.COMPANY_CD
                                                          , MI.LOCATION_CD)
                  FROM DUAL) AS LOCATION_NAME
             , MI.PREV_STOCK_INOUT_ID
             , MI.IO_TYPE
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (MI.DIVISION_CD
                                                      , MI.COMPANY_CD
                                                      , 'IO_TYPE'
                                                      , MI.IO_TYPE)
                  FROM DUAL) AS IO_TYPE_NAME
             , TO_CHAR (MI.IO_TIME, 'YYYY-MM-DD') AS IO_TIME
             , MI.IO_CATEGORY
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (MI.DIVISION_CD
                                                      , MI.COMPANY_CD
                                                      , 'IO_CATEGORY'
                                                      , MI.IO_CATEGORY)
                  FROM DUAL) AS IO_CATEGORY_NAME
             , MW.CONFIRM_QTY AS DEDUCT_QTY
             , MI.QTY AS CONFIRM_QTY
             , MIC.QTY AS CANCEL_QTY
             , MID.UNIT AS P_ITEM_UNIT
             , MI.UNIT
             , NVL (MI.STOCK_QTY, 0) AS STOCK_QTY
             , TO_CHAR (MI.CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
			 , TO_CHAR (MIC.IO_TIME, 'YYYY-MM-DD') AS IO_CANCEL_DATE
             , MI.CREATE_BY
             , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME (MI.DIVISION_CD
                                                      , MI.COMPANY_CD
                                                      , MI.CREATE_BY)
                  FROM DUAL) AS CREATE_BY_NAME
             , TO_CHAR (MI.UPDATE_DATE, 'YYYY-MM-DD') AS UPDATE_DATE
             , MI.UPDATE_BY
             , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME (MI.DIVISION_CD
                                                      , MI.COMPANY_CD
                                                      , MI.UPDATE_BY)
                  FROM DUAL) AS UPDATE_BY_NAME
          FROM MOM_ITEM_STOCK_INOUT MI 
             , MOM_WORK_ORDER MW
             , MOM_ITEM_STOCK_INOUT MIC
             , MOM_ITEM_DEFINITION MID
             , MOM_ITEM_DEFINITION MIDD
         WHERE MI.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND MI.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND MI.DIVISION_CD = MW.DIVISION_CD
           AND MI.COMPANY_CD = MW.COMPANY_CD
           AND MI.WORK_ORDER_ID = MW.WORK_ORDER_ID
           AND MI.DIVISION_CD = MIC.DIVISION_CD(+)
           AND MI.COMPANY_CD = MIC.COMPANY_CD(+)
           AND MI.ITEM_STOCK_INOUT_ID = MIC.PREV_STOCK_INOUT_ID(+)
		   AND MI.IO_TYPE = MIC.IO_TYPE(+)
		   AND MI.DIVISION_CD = MIDD.DIVISION_CD
		   AND MI.COMPANY_CD = MIDD.COMPANY_CD
		   AND MI.ITEM_ID = MIDD.ITEM_ID
		   AND MW.DIVISION_CD = MID.DIVISION_CD
		   AND MW.COMPANY_CD = MID.COMPANY_CD
		   AND MW.ITEM_ID = MID.ITEM_ID
           AND MI.IO_TYPE = 'I'
           AND EXISTS (SELECT '*'
	                     FROM MOM_CODE MC2
	                    WHERE MC2.DIVISION_CD = MI.DIVISION_CD
                          AND MC2.COMPANY_CD = MI.COMPANY_CD
                          AND MC2.CODE_CLASS_ID = 'IO_CATEGORY'
                          AND MC2.ATTRIBUTE22 = 'Y'
                          AND NVL (MC2.USE_YN, 'N') = 'Y'
                          AND MC2.CODE_ID = MI.IO_CATEGORY) 
           AND MI.IO_TIME BETWEEN TO_DATE(#{fromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
                              AND TO_DATE(#{toDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997/24
          <if test="searchLocation != null and searchLocation != ''">
		   AND MI.LOCATION_CD = #{searchLocation, jdbcType=VARCHAR}
  		  </if>
  		  <if test="searchWorkOrder != null and searchWorkOrder != ''">
  		   AND MI.WORK_ORDER_ID LIKE '%' || TRIM(UPPER(#{searchWorkOrder, jdbcType=VARCHAR})) ||'%'
  		  </if>
		  <if test="searchParentItemId != null and searchParentItemId != ''">
		   AND (MID.ITEM_ID LIKE '%' || TRIM(UPPER(#{searchParentItemId, jdbcType=VARCHAR})) || '%' 
		        OR UPPER(MID.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{searchParentItemId, jdbcType=VARCHAR})) || '%')
		  </if>
		  <if test="searchItemId != null and searchItemId != ''">
		   AND (MIDD.ITEM_ID LIKE '%' || TRIM(UPPER(#{searchItemId, jdbcType=VARCHAR})) || '%' 
		        OR UPPER(MIDD.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{searchItemId, jdbcType=VARCHAR})) || '%')
		  </if>
  		 ORDER BY MI.WORK_ORDER_ID, MI.ITEM_STOCK_INOUT_ID
	</select>
	
	<delete id="remove_decompositionCancelTemp" parameterType="java.util.HashMap">
		DELETE FROM MOM_ITEM_DECOMP_TMP
		 WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
		   AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
	</delete>
	
	<insert id="create_decompositionCancelTemp" parameterType="java.util.HashMap">
		INSERT INTO MOM_ITEM_DECOMP_TMP (
			DIVISION_CD,
	      	COMPANY_CD,
			WORK_ORDER_ID,
			ITEM_STOCK_ID,
			ITEM_STOCK_INOUT_ID,
			PARENT_ITEM_ID,
			ITEM_ID,
			P_ITEM_UNIT,
			UNIT,
			BAD_LOCATION_CD,
			IO_TIME,
			DEDUCT_QTY,
			CONFIRM_DATE,
			CONFIRM_QTY
		)
		VALUES (
			#{divisionCd, jdbcType=VARCHAR},
		  	#{companyCd, jdbcType=VARCHAR},
			#{workOrderId, jdbcType=VARCHAR},
			#{itemStockId, jdbcType=VARCHAR},
			#{itemStockInoutId, jdbcType=VARCHAR},
			#{pItemId, jdbcType=VARCHAR},
			#{itemId, jdbcType=VARCHAR},
			#{pItemUnit, jdbcType=VARCHAR},
			#{unit, jdbcType=VARCHAR},
			#{locationCd, jdbcType=VARCHAR},
			TO_DATE(#{ioTime, jdbcType=VARCHAR}, 'YYYY-MM-DD'),
			#{deductQty, jdbcType=NUMERIC},
			TO_DATE(#{updateDate, jdbcType=VARCHAR}, 'YYYY-MM-DD'),
			#{confirmQty, jdbcType=NUMERIC}
		)
	</insert>
	
	<insert id="create_decompositionCancelProc" statementType="CALLABLE">
    {
        CALL SP_MOM_WORK_ORDER_PKG.P_CANCEL_DECOMP_WO ( 
             #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
           , #{updateBy, mode=IN, jdbcType=VARCHAR}
        )
    }
    </insert>
	
</mapper>