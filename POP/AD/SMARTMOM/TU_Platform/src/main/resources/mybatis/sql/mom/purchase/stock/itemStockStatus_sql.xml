<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.thirautech.mom.purchase.stock.itemStockStatus">
    <select id="get_itemStockStatus_list" resultType="camelMap" parameterType="java.util.HashMap">
        <if test="sysDateFlag != null and sysDateFlag != ''">
            <choose>
                <when test='sysDateFlag == "Y"'>
                SELECT A.ITEM_ID
                     , B.ITEM_NAME
                     , B.SPECIFICATION
                     , A.LOCATION_CD
                     , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (A.DIVISION_CD, A.COMPANY_CD, A.LOCATION_CD) FROM DUAL) AS LOCATION_NAME
                     , A.CURRENT_QTY
                     , NVL(B.SAFETY_STOCK_QTY, 0) SAFETY_STOCK_QTY
                     , CASE WHEN (A.CURRENT_QTY - NVL(B.SAFETY_STOCK_QTY, 0)) >= 0 THEN 0
                            ELSE (A.CURRENT_QTY - NVL(B.SAFETY_STOCK_QTY, 0))
                       END AS SHORTAGE_STOCK_QTY
                     , B.UNIT
<!--                      , A.DESCRIPTION -->
					 , '' AS DESCRIPTION
                     , B.ITEM_TYPE
                     , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME ( B.DIVISION_CD, B.COMPANY_CD, 'ITEM_TYPE', B.ITEM_TYPE) FROM DUAL) AS ITEM_TYPE_NAME
                     , '' IO_TIME
                     , B.ITEM_GRADE
                     , B.VENDOR_CD
                     , NVL((SELECT MOM_COMMON_PKG.FN_GET_CODE_VALUES(A.DIVISION_CD,A.COMPANY_CD, 'ONHAND_SETUP', 'STOCK_REVISION_TYPE') FROM DUAL), 'C') AS STOCK_REVISION_TYPE
                     , TO_CHAR(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(A.DIVISION_CD, A.COMPANY_CD), 'YYYY-MM-DD HH24:MI:SS') AS CUR_TIME
                  FROM MOM_ITEM_STOCK A
                     , MOM_ITEM_DEFINITION B
                 WHERE 1 = 1
                   AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                   AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                   AND A.DIVISION_CD = B.DIVISION_CD
                   AND A.COMPANY_CD = B.COMPANY_CD
                   AND A.ITEM_ID = B.ITEM_ID
                   AND B.USE_YN = 'Y'
               	  <if test="itemId != null and itemId != ''">
                   AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))|| '%'
                        OR UPPER(B.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR}))|| '%')
               	  </if>
                  <if test="type != null and type != ''">
                   AND B.ITEM_TYPE = #{type, jdbcType=VARCHAR}
                  </if>
                  <if test="locationCd != null and locationCd != ''">
                   AND A.LOCATION_CD = #{locationCd, jdbcType=VARCHAR}
                  </if>
                  <if test="itemGrade != null and itemGrade != ''">
                   AND B.ITEM_GRADE = #{itemGrade, jdbcType=VARCHAR}
                  </if>
                  <if test="stockQty != null and stockQty != ''">
                   <choose>
                       <when test='stockQty == "N"'>
                           AND A.CURRENT_QTY != 0
                       </when>
                       <when test="stockQty == 'MINUS'">
                           AND A.CURRENT_QTY <![CDATA[<]]> 0
                       </when>
                       <when test="stockQty == 'PLUS'">
                           AND A.CURRENT_QTY > 0
                       </when>
                   </choose>
                  </if>
                  <if test="shortageFlag != null and shortageFlag != ''">
                   <choose>
                       <when test='shortageFlag == "N"'>
                           AND CASE WHEN (A.CURRENT_QTY - NVL(B.SAFETY_STOCK_QTY, 0)) >= 0 THEN 0
                                    ELSE (A.CURRENT_QTY - NVL(B.SAFETY_STOCK_QTY, 0))
                               END != 0
                       </when>
                   </choose>
                  </if>
                  <if test="facilityType != null and facilityType != '' and itemType != 'EM'">
                    AND A.LOCATION_CD IN (SELECT FACILITY_CD FROM MOM_FACILITY
                                           WHERE DIVISION_CD = A.DIVISION_CD
                                             AND COMPANY_CD = A.COMPANY_CD
                                             AND FACILITY_TYPE IN (${facilityType}))
                  </if>
                  <if test="itemType == 'EM'">
                    AND B.ITEM_TYPE = 'EM'
                  </if>
                 ORDER BY A.LOCATION_CD, A.ITEM_ID
                </when>
                <otherwise>
               WITH S_DATE AS
				( SELECT NVL(MAX(BASIS_YYYYMM), '2017-12') AS MAX_MONTH
				       , ADD_MONTHS(TO_DATE(NVL(MAX(BASIS_YYYYMM), '2017-12'), 'yyyy-MM'),1) AS START_DATE
				    FROM MOM_MONTH_MATERIAL_MST 
				   WHERE DIVISION_CD = #{divisionCd,jdbcType=VARCHAR}
				     AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
				     AND TO_DATE(BASIS_YYYYMM, 'yyyy-MM') <![CDATA[<]]> TO_DATE(SUBSTR(#{inDate, jdbcType=VARCHAR},0,7),'yyyy-mm')
				)
			  SELECT A.ITEM_ID
			       , D.ITEM_NAME
			       , D.SPECIFICATION
			       , A.LOCATION_CD
			       , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (A.DIVISION_CD, A.COMPANY_CD, A.LOCATION_CD) FROM DUAL) AS LOCATION_NAME
			       , A.CURRENT_QTY
			       , D.UNIT
			       , NVL ( (SELECT MOM_COMMON_PKG.FN_GET_CODE_VALUES (A.DIVISION_CD
			                                                        , A.COMPANY_CD
			                                                        , 'ONHAND_SETUP'
			                                                        , 'STOCK_REVISION_TYPE')
			                  FROM DUAL)
			            , 'C')
			            AS STOCK_REVISION_TYPE
			        , D.ITEM_TYPE
			        , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (D.DIVISION_CD
			                                                  , D.COMPANY_CD
			                                                  , 'ITEM_TYPE'
			                                                  , D.ITEM_TYPE)
			              FROM DUAL)
			              AS ITEM_TYPE_NAME
			        , D.VENDOR_CD
			        , D.SAFETY_STOCK_QTY
			        , D.ITEM_GRADE
                    , TO_CHAR(MOM_COMMON_PKG.FN_GET_LOCAL_TIME(A.DIVISION_CD, A.COMPANY_CD), 'YYYY-MM-DD HH24:MI:SS') AS CUR_TIME
                    , '' AS DESCRIPTION
                 FROM (SELECT A.ITEM_ID
                            , A.LOCATION_CD
                            , MAX(NVL(A.CURRENT_QTY, 0)) + (SUM(A.IN_QTY - A.OUT_QTY)) AS CURRENT_QTY
                            , A.DIVISION_CD
                            , A.COMPANY_CD
                         FROM (SELECT A.ITEM_ID
                                    , A.LOCATION_CD
                                    , M3.STOCK_QTY AS CURRENT_QTY
                                    , NVL(DECODE(B.IO_TYPE, 'I', B.QTY, ''), 0) AS IN_QTY
                                    , NVL(DECODE(B.IO_TYPE, 'O', B.QTY, ''), 0) AS OUT_QTY
                                    , A.DIVISION_CD
                                    , A.COMPANY_CD
                                 FROM MOM_ITEM_STOCK A
                                    , (SELECT * FROM MOM_ITEM_STOCK_INOUT 
                                       WHERE 1=1
                                       AND DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                       AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                   <if test="inDate != null and inDate != ''">
                                       AND IO_TIME BETWEEN (SELECT START_DATE FROM S_DATE) 
                                                       AND TO_DATE (#{inDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997 / 24
                                   </if>
                                       ) B
						            , (SELECT * FROM MOM_MONTH_MATERIAL_MST 
						               WHERE DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                       AND COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                       AND BASIS_YYYYMM = (SELECT MAX_MONTH FROM S_DATE)
						               ) M3
                                WHERE A.ITEM_ID = B.ITEM_ID(+)
                                  AND A.LOCATION_CD = B.LOCATION_CD(+)
						          AND A.LOCATION_CD = M3.LOCATION_CD(+)
						          AND A.ITEM_ID = M3.ITEM_ID(+)
                                  AND A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
                                  AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
                                ) A
                    WHERE 1 = 1
                <if test="locationCd != null and locationCd != ''">
                    AND A.LOCATION_CD = #{locationCd, jdbcType=VARCHAR}
                </if>
                 <if test="facilityType != null and facilityType != ''  and itemType != 'EM'">
                    AND A.LOCATION_CD IN (SELECT FACILITY_CD 
                                            FROM MOM_FACILITY
                                           WHERE DIVISION_CD = A.DIVISION_CD
                                             AND COMPANY_CD = A.COMPANY_CD
                                             AND FACILITY_TYPE IN (${facilityType}))
                 </if>
                 <if test="itemType == 'EM'">
                    AND B.ITEM_TYPE = 'EM'
                 </if>
                    GROUP BY A.DIVISION_CD, A.COMPANY_CD, A.ITEM_ID, A.LOCATION_CD ) A
                    , MOM_ITEM_DEFINITION D
                WHERE 1 = 1
                  AND A.DIVISION_CD = D.DIVISION_CD
                  AND A.COMPANY_CD = D.COMPANY_CD
                  AND A.ITEM_ID = D.ITEM_ID
                <if test="itemId != null and itemId != ''">
                    AND (A.ITEM_ID LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%'
                         OR UPPER(D.ITEM_NAME) LIKE '%' || TRIM(UPPER(#{itemId, jdbcType=VARCHAR})) || '%')
                </if>
                <if test="type != null and type != ''">
                    AND D.ITEM_TYPE = #{type, jdbcType=VARCHAR}
                </if>
                <if test="itemGrade != null and itemGrade != ''">
                    AND D.ITEM_GRADE = #{itemGrade, jdbcType=VARCHAR}
                </if>
                <if test="shortageFlag != null and shortageFlag != ''">
                    <choose>
                        <when test='shortageFlag == "N"'>
                            AND CASE WHEN (A.CURRENT_QTY - NVL(D.SAFETY_STOCK_QTY, 0)) >= 0 THEN 0
                                     ELSE (A.CURRENT_QTY - NVL(D.SAFETY_STOCK_QTY, 0))
                                END != 0
                        </when>
                    </choose>
                </if>
                <if test="stockQty != null and stockQty != ''">
                   <choose>
                       <when test='stockQty == "N"'>
                           AND A.CURRENT_QTY != 0
                       </when>
                       <when test="stockQty == 'MINUS'">
                           AND A.CURRENT_QTY <![CDATA[<]]> 0
                       </when>
                       <when test="stockQty == 'PLUS'">
                           AND A.CURRENT_QTY > 0
                       </when>
                   </choose>
                  </if>
                   ORDER BY A.LOCATION_CD, A.ITEM_ID
                </otherwise>
            </choose>
        </if>
    </select>

    <select id="get_itemStockStatusHist_list" resultType="camelMap" parameterType="java.util.HashMap">
        <!-- 
        SELECT A.ITEM_ID
             , B.ITEM_NAME
             , B.SPECIFICATION
             , A.LOCATION_CD
             , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME (A.DIVISION_CD,A.COMPANY_CD, A.LOCATION_CD) FROM DUAL) AS LOCATION_NAME
             , A.IO_TYPE
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME ( A.DIVISION_CD, A.COMPANY_CD, 'IO_TYPE', A.IO_TYPE) FROM DUAL) AS IO_TYPE_NAME
             , TO_CHAR(A.IO_TIME, 'YYYY-MM-DD') AS IO_TIME
             , A.IO_CATEGORY
             , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME ( A.DIVISION_CD, A.COMPANY_CD, 'IO_CATEGORY', A.IO_CATEGORY) FROM DUAL) AS IO_CATEGORY_NAME
             , DECODE (A.IO_TYPE, 'I', NVL (A.STOCK_QTY, 0) - NVL (A.QTY, 0), NVL(A.STOCK_QTY, 0) + NVL (A.QTY, 0)) FROM_QTY
             , NVL(A.QTY, 0) QTY
             , NVL(A.STOCK_QTY, 0) TO_QTY
             , B.UNIT
             , A.UPDATE_BY
             , TO_CHAR(A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') UPDATE_DATE
             , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME (A.DIVISION_CD, A.COMPANY_CD, A.UPDATE_BY) FROM DUAL) AS UPDATE_USER_NAME
          FROM MOM_ITEM_STOCK_INOUT A
             , MOM_ITEM_DEFINITION B
         WHERE A.DIVISION_CD = #{divisionCd, jdbcType=VARCHAR}
           AND A.COMPANY_CD = #{companyCd, jdbcType=VARCHAR}
           AND A.DIVISION_CD = B.DIVISION_CD(+)
           AND A.COMPANY_CD = B.COMPANY_CD(+)
           AND A.ITEM_ID = B.ITEM_ID(+)
        <if test="moItem != null and moItem != ''">
           AND (UPPER(A.ITEM_ID) LIKE '%' || UPPER(#{moItem, jdbcType=VARCHAR}) || '%'
            OR UPPER(B.ITEM_NAME) LIKE '%' || UPPER(#{moItem, jdbcType=VARCHAR}) || '%' )
        </if>
        <if test="moFromDate != null and moFromDate != ''">
           AND A.IO_TIME BETWEEN TO_DATE(#{moFromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') AND TO_DATE(#{moToDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')
        </if>
        <if test="moLocation != null and moLocation">
           AND A.LOCATION_CD = #{moLocation, jdbcType=VARCHAR}
        </if>
         ORDER BY A.IO_TIME DESC, A.ITEM_ID, A.ITEM_STOCK_INOUT_ID DESC, A.IO_TYPE DESC
          -->
		WITH S_DATE AS
		    ( SELECT NVL(MAX(BASIS_YYYYMM), '2017-12') AS MAX_MONTH
		           , ADD_MONTHS(TO_DATE(NVL(MAX(BASIS_YYYYMM), '2017-12'), 'yyyy-MM'),1) AS START_DATE
		        FROM MOM_MONTH_MATERIAL_MST 
		       WHERE DIVISION_CD = #{divisionCd,jdbcType=VARCHAR}
		         AND COMPANY_CD = #{companyCd,jdbcType=VARCHAR}
		         AND TO_DATE(BASIS_YYYYMM, 'yyyy-MM') <![CDATA[<]]> TO_DATE(SUBSTR(#{moFromDate, jdbcType=VARCHAR},0,7),'yyyy-mm')
		    )
		  , BASE_QTY AS
		  (
		    SELECT MAX(T.CURRENT_QTY) + SUM(T.IN_QTY - T.OUT_QTY) AS QTY
		         , T.LOCATION_CD
		         , T.ITEM_ID
		         , T.DIVISION_CD
		         , T.COMPANY_CD
		      FROM (
		            SELECT A.ITEM_ID
		                , A.LOCATION_CD
		                , NVL(M3.STOCK_QTY, 0) AS CURRENT_QTY
		                , NVL(DECODE(B.IO_TYPE, 'I', B.QTY, ''), 0) AS IN_QTY
		                , NVL(DECODE(B.IO_TYPE, 'O', B.QTY, ''), 0) AS OUT_QTY
		                , A.DIVISION_CD
		                , A.COMPANY_CD
		             FROM MOM_ITEM_STOCK A
		                , (SELECT * FROM MOM_ITEM_STOCK_INOUT 
		                   WHERE 1=1
		                   AND IO_TIME BETWEEN (SELECT START_DATE FROM S_DATE)
		                                   AND TO_DATE (#{moFromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') - 1
		                   ) B
		                , (SELECT * FROM MOM_MONTH_MATERIAL_MST 
		                    WHERE BASIS_YYYYMM = (SELECT MAX_MONTH FROM S_DATE)
		                   ) M3
		            WHERE A.DIVISION_CD = B.DIVISION_CD(+)
		              AND A.COMPANY_CD = B.COMPANY_CD(+)
		              AND A.ITEM_ID = B.ITEM_ID(+)
		              AND A.LOCATION_CD = B.LOCATION_CD(+)
		              AND A.DIVISION_CD = M3.DIVISION_CD(+)
		              AND A.COMPANY_CD = M3.COMPANY_CD(+)
		              AND A.LOCATION_CD = M3.LOCATION_CD(+)
		              AND A.ITEM_ID = M3.ITEM_ID(+)
		              AND A.DIVISION_CD = #{divisionCd,jdbcType=VARCHAR}
		              AND A.COMPANY_CD = #{companyCd,jdbcType=VARCHAR}
		              AND A.ITEM_ID = #{moItem,jdbcType=VARCHAR}
		            ) T
		     GROUP BY T.DIVISION_CD, T.COMPANY_CD, T.LOCATION_CD, T.ITEM_ID 
		  )
		  SELECT Z.ITEM_ID
		       , Z.ITEM_NAME
		       , Z.SPECIFICATION
		       , Z.LOCATION_CD
		       , (SELECT MOM_COMMON_PKG.FN_GET_FACILITY_NAME ( Z.DIVISION_CD
		                                                     , Z.COMPANY_CD
		                                                     , Z.LOCATION_CD) 
		            FROM DUAL) AS LOCATION_NAME
		       , Z.IO_TIME
		       , Z.IO_TYPE
		       , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME (Z.DIVISION_CD
                                                        , Z.COMPANY_CD
                                                        , 'IO_TYPE'
                                                        , Z.IO_TYPE)
                    FROM DUAL) AS IO_TYPE_NAME
		       , Z.IO_CATEGORY
		       , (SELECT MOM_COMMON_PKG.FN_GET_CODE_NAME ( Z.DIVISION_CD
                                                         , Z.COMPANY_CD
                                                         , 'IO_CATEGORY'
                                                         , Z.IO_CATEGORY)
                    FROM DUAL) AS IO_CATEGORY_NAME
		       , NVL(LAG (Z.TO_QTY) OVER (PARTITION BY Z.ITEM_ID, Z.LOCATION_CD ORDER BY Z.IO_TIME, TO_NUMBER(Z.ITEM_STOCK_INOUT_ID) ), Z.BASE_QTY) FROM_QTY
		       , Z.QTY
		       , DECODE(Z.IO_TYPE, 'I', Z.QTY, Z.QTY * (-1)) IO_QTY
		       , Z.TO_QTY
		       , Z.UNIT
		       , Z.UPDATE_BY
		       , (SELECT MOM_COMMON_PKG.FN_GET_USER_NAME ( Z.DIVISION_CD
		                                                 , Z.COMPANY_CD
		                                                 , Z.UPDATE_BY) 
		            FROM DUAL) AS UPDATE_USER_NAME
		       , Z.UPDATE_DATE
		       , Z.ITEM_STOCK_INOUT_ID
		    FROM (
		          SELECT A.ITEM_ID
		               , B.ITEM_NAME
		               , B.SPECIFICATION
		               , A.LOCATION_CD
		               , A.IO_TYPE
		               , TO_CHAR (A.IO_TIME, 'YYYY-MM-DD') AS IO_TIME
		               , A.IO_CATEGORY
		               , BQ.QTY AS BASE_QTY
		               , NVL(A.QTY, 0) QTY
		               , BQ.QTY + SUM(DECODE(A.IO_TYPE, 'I', A.QTY, A.QTY * (-1))) OVER(PARTITION BY A.ITEM_ID, A.LOCATION_CD ORDER BY A.IO_TIME, TO_NUMBER(A.ITEM_STOCK_INOUT_ID) ) TO_QTY
		               , B.UNIT
		               , A.UPDATE_BY
		               , TO_CHAR (A.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') UPDATE_DATE
		               , A.ITEM_STOCK_INOUT_ID
		               , A.DIVISION_CD
		               , A.COMPANY_CD
		            FROM BASE_QTY BQ
		               , MOM_ITEM_STOCK_INOUT A
		               , MOM_ITEM_DEFINITION B
		           WHERE BQ.DIVISION_CD = A.DIVISION_CD
		             AND BQ.COMPANY_CD = A.COMPANY_CD
		             AND BQ.ITEM_ID = A.ITEM_ID
		             AND BQ.LOCATION_CD = A.LOCATION_CD
		             AND BQ.DIVISION_CD = B.DIVISION_CD(+)
		             AND BQ.COMPANY_CD = B.COMPANY_CD(+)
		             AND BQ.ITEM_ID = B.ITEM_ID(+)
		             AND BQ.ITEM_ID = #{moItem,jdbcType=VARCHAR}
		             AND A.IO_TIME BETWEEN TO_DATE (#{moFromDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
		                               AND TO_DATE (#{moToDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') + 23.9997/24
		             AND BQ.LOCATION_CD = #{moLocation, jdbcType=VARCHAR}
		       ) Z
		ORDER BY Z.IO_TIME DESC 
		       , TO_NUMBER(Z.ITEM_STOCK_INOUT_ID) DESC 
    </select>
    
    <insert id="create_stockIf" statementType="CALLABLE">
	{
        CALL SP_MOM_ITEM_STOCK_PKG.P_ITEM_STOCK_IF (
            #{p_err_code, mode=OUT, jdbcType=VARCHAR}
           , #{p_err_msg, mode=OUT, jdbcType=VARCHAR}
           , #{divisionCd, mode=IN, jdbcType=VARCHAR}
           , #{companyCd, mode=IN, jdbcType=VARCHAR}
           , #{userId, mode=IN, jdbcType=VARCHAR}
        )
    }
	</insert>

</mapper>